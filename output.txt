class CodebaseManager(BaseModel):
    """
    A class for managing a codebase.

    Parameters
    ----------
    source_dir : str
        The directory containing the source code.

    Attributes
    ----------
    _codebase : Dict[str, ModuleParser]
        A dictionary containing the parsed modules of the codebase.

    Methods
    -------
    model_post_init(__context)
        Initializes the codebase manager and parses the codebase.

    get_entities()
        Returns a dictionary of all the entities (classes and functions) in the codebase.

    get_source_code(entity)
        Returns the source code of the given entity.

    get_docstrings(entity)
        Returns the docstring of the given entity.

    _parse_codebase(source_dir)
        Parses the codebase and stores the parsed modules in the _codebase attribute.

    _get_python_file_paths(path)
        Returns a list of file paths for all Python files in the given directory.

    _parse_python_files(file_paths)
        Parses the Python files and stores the parsed modules in the _codebase attribute.
    """
    source_dir: str
    _codebase: Dict[str, ModuleParser] = PrivateAttr(default_factory=dict)

    def model_post_init(self, __context):
        """
        Initializes the codebase manager and parses the codebase.

        Parameters
        ----------
        __context : Any
            The context of the model.

        Returns
        -------
        None
        """
        self._parse_codebase(self.source_dir)

    def get_entities(self):
        """
        Returns a dictionary of all the entities (classes and functions) in the codebase.

        Returns
        -------
        entities : dict
            A dictionary of all the entities in the codebase.
        """
        entities = {}
        for module_entities in self._codebase.values():
            entities.update(module_entities.classes.items())
            entities.update(module_entities.functions.items())
        return entities

    def get_source_code(self, entity):
        """
        Returns the source code of the given entity.

        Parameters
        ----------
        entity : Any
            The entity for which to retrieve the source code.

        Returns
        -------
        source_code : str
            The source code of the entity.
        """
        return ast.unparse(entity)

    def get_docstrings(self, entity):
        """
        Returns the docstring of the given entity.

        Parameters
        ----------
        entity : Any
            The entity for which to retrieve the docstring.

        Returns
        -------
        docstring : str or None
            The docstring of the entity.
        """
        return ast.get_docstring(entity)

    def _parse_codebase(self, source_dir):
        """
        Parses the codebase and stores the parsed modules in the _codebase attribute.

        Parameters
        ----------
        source_dir : str
            The directory containing the source code.

        Returns
        -------
        None
        """
        file_paths = self._get_python_file_paths(source_dir)
        self._parse_python_files(file_paths)

    def _get_python_file_paths(self, path):
        """
        Returns a list of file paths for all Python files in the given directory.

        Parameters
        ----------
        path : str
            The directory path.

        Returns
        -------
        file_paths : list
            A list of file paths for all Python files in the directory.
        """
        return [pyfile for pyfile in glob.glob(f'{path}/**/*.py', recursive=True) if os.path.split(pyfile)[-1] != '__init__.py']

    def _parse_python_files(self, file_paths):
        """
        Parses the Python files and stores the parsed modules in the _codebase attribute.

        Parameters
        ----------
        file_paths : list
            A list of file paths for the Python files to parse.

        Returns
        -------
        None
        """
        for file_path in file_paths:
            parser = ModuleParser()
            with open(file_path) as source:
                parser.visit(ast.parse(source.read()))
            self._codebase[file_path] = parser