{"content": "## User Interface\n\n### Component Hierarchy\n\nThe user interface is structured using a hierarchical component model, where each component is responsible for a specific part of the UI. At the top level, we have the main application components, such as `App`, `Panel`, and `Widget`, which manage the overall layout and interaction. These components are further divided into smaller, reusable components like `Button`, `TextBox`, `Dropdown`, and `Toggle`, each handling specific UI elements. This modular approach allows for easy maintenance and scalability of the UI.\n\n### State Management\n\nState management in the UI is handled through a combination of local and global states. Each component can maintain its own local state for managing internal interactions, such as the current value of a `TextBox` or the selected option in a `Dropdown`. For global state management, the `App` component acts as a central store, managing shared data and facilitating communication between components. This is achieved through the use of state management patterns and libraries, ensuring that the UI remains responsive and consistent.\n\n### Styling Approach\n\nThe styling of the UI is managed through a combination of CSS and inline styles. The `Style` class defines the overall styling configuration, including color schemes, fonts, and button styles. Components can customize their appearance using these predefined styles, ensuring a consistent look and feel across the application. The styling approach supports both light and dark themes, allowing users to switch between different visual modes based on their preferences.\n\n### Responsive Design\n\nThe UI is designed to be responsive, adapting to different screen sizes and orientations. This is achieved through the use of flexible layout components, such as `Panel` and `Container`, which can adjust their size and position based on the available screen space. The `Canvas` component provides panning and zooming functionality, allowing users to interact with the UI on both desktop and mobile devices. Responsive design principles ensure that the application remains usable and visually appealing across a wide range of devices.\n\n### Accessibility Features\n\nAccessibility is a key consideration in the design of the UI. Components are built with accessibility in mind, providing keyboard navigation, screen reader support, and high-contrast themes for users with visual impairments. The `Event` and `Key` classes handle keyboard interactions, allowing users to navigate the UI using keyboard shortcuts. Additionally, components like `Button` and `TextBox` are designed to be focusable and provide appropriate ARIA attributes to enhance accessibility.\n\n### User Interaction Flows\n\nUser interaction flows are carefully designed to provide a seamless and intuitive experience. The UI supports various interaction patterns, such as drag-and-drop, form submission, and menu navigation. The `EventCtx` and `UserInput` classes manage user interactions, processing events and updating the UI in response to user actions. Components like `DragDrop` and `Menu` provide interactive elements that respond to user input, ensuring that the application is both engaging and easy to use.\n\n### Examples\n\n- **Button Interaction**: A `Button` component can be clicked to trigger an action. It changes its appearance based on its state (e.g., hovered, pressed) and provides feedback to the user through visual cues.\n  \n- **Dropdown Selection**: A `Dropdown` component allows users to select an option from a list. It opens a menu when clicked, displaying available choices, and updates its state based on the user's selection.\n\n- **Responsive Layout**: The `Panel` component adjusts its layout based on the screen size, ensuring that content is displayed optimally on both large and small screens.\n\nBy following these principles and utilizing the described components and functionalities, the UI provides a robust and user-friendly interface for interacting with the application.", "cost": {"input_cost": 0.314365, "output_cost": 0.01107, "total_cost": 0.325435}, "tokens": {"input_tokens": 62873, "output_tokens": 738, "total_tokens": 63611}, "messages": [{"role": "user", "content": "# widgetry_demo/src/lib.rs [5365 tokens]:\n\nDescription:\nThis file implements a demo application using the widgetry library to showcase various UI components and functionalities.\n\nExternal Imports:\n- rand\n- rand_xorshift\n- geom\n- widgetry\n\nInternal Imports:\n- abstutil\n- abstio\n- svg_face\n\nClasses:\n- {'name': 'App', 'description': 'Represents the shared application state.'}\n- {'name': 'Demo', 'description': 'Handles the main functionality and UI of the demo application.'}\n\nRelationships:\n- Demo -> App\n- Demo -> abstutil\n- Demo -> abstio\n- Demo -> svg_face\n\nFunctionalities:\n- UI rendering\n- Event handling\n- State management\n- Data visualization\n- User interaction\n\n# web/Makefile [1192 tokens]:\n\nDescription:\nThis Makefile defines tasks for building and serving multiple web applications using TypeScript and Rust with WebAssembly.\n\nExternal Imports:\n- npx\n- python3\n\nInternal Imports:\n- bin/build-wasm\n- bin/bundle-widgetry-js\n\nFunctionalities:\n- Build applications for development and release\n- Serve applications over HTTP\n- Manage dependencies for TypeScript and Rust\n- Create symlinks for data directories\n- Copy and bundle JavaScript files\n\n# web/src/map_editor/map_editor.ts [168 tokens]:\n\nDescription:\nThis file defines a MapEditor class that initializes and runs a WebAssembly-based map editor application.\n\nExternal Imports:\n- wasm_pkg\n\nInternal Imports:\n- widgetry\n\nClasses:\n- {'name': 'MapEditor', 'description': 'A class that extends WidgetryApp to manage the initialization and execution of a WebAssembly map editor.'}\n\nRelationships:\n- MapEditor -> WidgetryApp\n- MapEditor -> wasm_pkg\n\nFunctionalities:\n- Initialize WebAssembly module\n- Run the map editor application\n- Provide URL for WebAssembly background file\n\n# web/src/widgetry_demo/widgetry_demo.ts [171 tokens]:\n\nDescription:\nThis file defines the WidgetryDemo class that initializes and runs a WebAssembly application using the Widgetry library.\n\nExternal Imports:\n- wasm_pkg\n\nInternal Imports:\n- widgetry\n\nClasses:\n- {'name': 'WidgetryDemo', 'description': 'A class that manages the initialization and execution of a WebAssembly application.'}\n\nRelationships:\n- WidgetryDemo -> wasm_pkg\n- WidgetryDemo -> widgetry\n\nFunctionalities:\n- Initialize WebAssembly module\n- Run the application\n- Provide the URL for the WebAssembly module\n\n# web/src/fifteen_min/fifteen_min.ts [173 tokens]:\n\nDescription:\nThis file defines the FifteenMinute class which initializes and runs a WebAssembly application.\n\nExternal Imports:\n- wasm_pkg\n\nInternal Imports:\n- widgetry\n\nClasses:\n- {'name': 'FifteenMinute', 'description': 'A class that extends WidgetryApp to manage a WebAssembly application.'}\n\nRelationships:\n- FifteenMinute -> WidgetryApp\n- FifteenMinute <- wasm_pkg\n\nFunctionalities:\n- Initialize WebAssembly module\n- Run the application\n- Provide the URL for the WebAssembly file\n\n# web/src/abstreet/abstreet.ts [166 tokens]:\n\nDescription:\nThis file defines the ABStreet class which initializes and runs a WebAssembly application for the ABStreet project.\n\nExternal Imports:\n- wasm_pkg\n\nInternal Imports:\n- widgetry\n\nClasses:\n- {'name': 'ABStreet', 'description': 'A class that extends WidgetryApp to manage the initialization and execution of a WebAssembly application.'}\n\nRelationships:\n- ABStreet -> WidgetryApp\n- ABStreet -> wasm_pkg\n\nFunctionalities:\n- Initialize WebAssembly module\n- Run the application\n- Provide WebAssembly URL\n\n# web/src/santa/santa.ts [167 tokens]:\n\nDescription:\nThis file defines a Santa class that initializes and runs a WebAssembly application using the Widgetry framework.\n\nExternal Imports:\n- wasm_pkg\n\nInternal Imports:\n- widgetry\n\nClasses:\n- {'name': 'Santa', 'description': 'A class that extends WidgetryApp to manage the initialization and execution of a WebAssembly application.'}\n\nRelationships:\n- Santa -> WidgetryApp\n- Santa -> wasm_pkg\n\nFunctionalities:\n- Initialize WebAssembly module\n- Run the application\n- Provide URL for WebAssembly file\n\n# web/src/ltn/ltn.ts [168 tokens]:\n\nDescription:\nThis file defines the LTN class which initializes and runs a WebAssembly module for a widgetry application.\n\nExternal Imports:\n- wasm_pkg\n\nInternal Imports:\n- widgetry\n\nClasses:\n- {'name': 'LTN', 'description': 'A class that extends WidgetryApp to manage the initialization and execution of a WebAssembly module.'}\n\nRelationships:\n- LTN -> WidgetryApp\n- LTN -> wasm_pkg\n\nFunctionalities:\n- Initialize WebAssembly module\n- Run the application\n- Provide the URL for the WebAssembly file\n\n# web/src/osm_viewer/osm_viewer.ts [173 tokens]:\n\nDescription:\nThis file defines the OSMViewer class that initializes and runs a WebAssembly-based map viewer application.\n\nExternal Imports:\n- wasm_pkg\n\nInternal Imports:\n- widgetry\n\nClasses:\n- {'name': 'OSMViewer', 'description': 'A class that extends WidgetryApp to manage the initialization and execution of a WebAssembly map viewer.'}\n\nRelationships:\n- OSMViewer -> WidgetryApp\n- OSMViewer -> wasm_pkg\n\nFunctionalities:\n- Initialize WebAssembly module\n- Run the map viewer application\n- Provide the URL for the WebAssembly binary\n\n# web/src/web_root/widgetry_demo.html [129 tokens]:\n\nDescription:\nThis file sets up a web page that loads and starts a Widgetry demo application.\n\nInternal Imports:\n- widgetry_demo/widgetry_demo.bundle.js\n\nClasses:\n- {'name': 'WidgetryDemo', 'description': 'Handles the loading and starting of the Widgetry demo application.'}\n\nRelationships:\n- WidgetryDemo -> widgetry_demo/widgetry_demo.bundle.js\n\nFunctionalities:\n- Loads the Widgetry demo application\n- Displays a preloading message\n- Initializes the application on DOM content loaded\n\n# web/src/web_root/abstreet.css [64 tokens]:\nbody {\n    font-family: Arial;\n    background: white;\n    color: #4a4a4a;\n}\n\n.full-screen-widgetry-app {\n  height: 100%;\n  width: 100%;\n}\n\n.widgetry-app .preloading {\n    padding: 16px;\n    color: white;\n}\n\n\n# web/src/web_root/ltn.html [126 tokens]:\n\nDescription:\nThis file sets up a web page for the Low Traffic Neighborhoods application, loading necessary styles and initializing the app on DOM content loaded event.\n\nInternal Imports:\n- ltn/ltn.bundle.js\n\nClasses:\n- {'name': 'LTN', 'description': 'Manages the Low Traffic Neighborhoods application lifecycle.'}\n\nRelationships:\n- LTN -> ltn/ltn.bundle.js\n\nFunctionalities:\n- Loads application styles\n- Initializes the application\n- Handles DOM content loaded event\n\n# web/src/web_root/index.html [319 tokens]:\n<html>\n    <head>\n    <link rel=\"stylesheet\" href=\"abstreet.css\">\n    </head>\n    <body>\n        <h1>Apps</h1>\n        <ul>\n            <li><a href=\"abstreet.html\">A/B Street</a></li>\n\t    <!-- Just sticking this in here for convenience, until the tool is split out -->\n\t    <li><a href=\"abstreet.html?--ungap&system/us/seattle/maps/central_seattle.bin\">Bike network tool</a></li>\n\t    <li><a href=\"ltn.html?system/gb/leeds/maps/north.bin\">Low traffic neighborhood tool</a></li>\n            <li><a href=\"fifteen_min.html\">Fifteen Minute Neighborhood Tool</a></li>\n            <li><a href=\"osm_viewer.html\">OSM Viewer</a></li>\n            <li><a href=\"widgetry_demo.html\">Widgetry Demo</a></li>\n            <li><a href=\"santa.html\">15-Minute Santa</a></li>\n            <li><a href=\"map_editor.html?../../dev/data/input/us/seattle/raw_maps/montlake.bin\">RawMap editor</a></li>\n        </ul>\n\n        <h1>Examples</h1>\n        <ul>\n            <li><a href=\"blog_root/2021/03/31/example-post.html\">An app embedded among other page content.</a></li>\n        </ul>\n    </body>\n</html>\n\n\n# web/src/web_root/fifteen_min.html [133 tokens]:\n\nDescription:\nThis file sets up a web page for the Fifteen Minute Neighborhood application, loading the necessary scripts and displaying a preloading message.\n\nInternal Imports:\n- fifteen_min.bundle.js\n\nClasses:\n- {'name': 'FifteenMinute', 'description': 'Handles the initialization and operation of the Fifteen Minute Neighborhood application.'}\n\nRelationships:\n- FifteenMinute -> fifteen_min.bundle.js\n\nFunctionalities:\n- Load and start the application\n- Display a preloading message\n\n# web/src/web_root/abstreet.html [125 tokens]:\n\nDescription:\nThis file sets up an A/B Street web application by importing necessary modules and initializing the app on page load.\n\nInternal Imports:\n- abstreet.bundle.js\n\nClasses:\n- {'name': 'ABStreet', 'description': 'Handles the initialization and operation of the A/B Street application.'}\n\nRelationships:\n- ABStreet -> abstreet.bundle.js\n\nFunctionalities:\n- Load and start the A/B Street application\n- Display a preloading screen with a title\n\n# web/src/web_root/osm_viewer.html [130 tokens]:\n\nDescription:\nThis file sets up an OSM Viewer application with a loading screen.\n\nInternal Imports:\n- osm_viewer.bundle.js\n\nClasses:\n- {'name': 'OSMViewer', 'description': 'Handles the loading and display of OpenStreetMap data.'}\n\nRelationships:\n- OSMViewer -> osm_viewer.bundle.js\n\nFunctionalities:\n- Initializes the OSM Viewer application\n- Loads and starts the viewer on DOM content loaded event\n\n# web/src/web_root/blog_root/2021/03/31/example-post.html [1397 tokens]:\n\nDescription:\nThis file represents a blog post that embeds an A/B Street simulation application within a web page.\n\nExternal Imports:\n- abstreet\n\nInternal Imports:\n- abstreet.bundle.js\n\nClasses:\n- {'name': 'ABStreet', 'description': 'Handles the initialization and management of the A/B Street simulation application.'}\n\nRelationships:\n- ABStreet -> abstreet.bundle.js\n\nFunctionalities:\n- Embedding a simulation application into a web page\n- Loading and starting the simulation on page load\n- Styling the blog post and its components\n\n# web/src/web_root/map_editor.html [125 tokens]:\n\nDescription:\nThis file serves as the main entry point for the RawMap Editor application, loading the necessary modules and initializing the editor.\n\nInternal Imports:\n- map_editor/map_editor.bundle.js\n\nClasses:\n- {'name': 'MapEditor', 'description': 'Handles the functionality and user interface of the map editor.'}\n\nRelationships:\n- MapEditor -> map_editor/map_editor.bundle.js\n\nFunctionalities:\n- Loads the map editor application\n- Initializes the editor on DOM content loaded\n\n# web/src/web_root/santa.html [125 tokens]:\n\nDescription:\nThis file sets up a web page that initializes and starts a Santa application.\n\nInternal Imports:\n- santa/santa.bundle.js\n\nClasses:\n- {'name': 'Santa', 'description': 'Handles the main functionality and lifecycle of the Santa application.'}\n\nRelationships:\n- Santa -> santa/santa.bundle.js\n\nFunctionalities:\n- Initializes the Santa application\n- Loads and starts the application on DOM content loaded event\n\n# web/src/widgetry.ts [2481 tokens]:\n\nDescription:\nThis file defines a wrapper for a Rust Widgetry application compiled to WebAssembly, handling loading and rendering of the app.\n\nInternal Imports:\n- AppLoader\n\nClasses:\n- {'name': 'WidgetryApp', 'description': 'Abstract class that serves as a base for Widgetry applications, managing asset loading and WebAssembly initialization.'}\n- {'name': 'AppLoader', 'description': 'Helper class for loading WebAssembly modules and rendering the application content.'}\n\nRelationships:\n- WidgetryApp -> AppLoader\n- AppLoader <- WidgetryApp\n\nFunctionalities:\n- Loading WebAssembly modules\n- Rendering application content\n- Managing asset URLs and gzip settings\n- Handling loading and error states\n\n# map_gui/Cargo.toml [399 tokens]:\n\nDescription:\nThis file defines the package configuration for the 'map_gui' Rust project, specifying its dependencies and features.\n\nExternal Imports:\n- anyhow\n- built\n- chrono\n- colorous\n- contour\n- flate2\n- futures-channel\n- geojson\n- geom\n- instant\n- log\n- lyon\n- regex\n- rfd\n- serde\n- structopt\n- subprocess\n- wasm-bindgen\n- web-sys\n\nInternal Imports:\n- abstio\n- abstutil\n- map_model\n- synthpop\n- widgetry\n\nFunctionalities:\n- Package configuration\n- Dependency management\n- Feature toggling\n\n# map_gui/src/tools/draw_overlapping_paths.rs [1326 tokens]:\n\nDescription:\nThis file provides functionality to draw overlapping paths on a map with appropriate colors and intervals based on their characteristics.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n\nClasses:\n- {'name': 'DistanceInterval', 'description': 'Represents a distance interval with a start and end point.'}\n\nRelationships:\n- draw_overlapping_paths -> AppLike\n- draw_overlapping_paths -> PathV2\n- draw_overlapping_paths -> Color\n- draw_overlapping_paths -> RoadID\n- draw_overlapping_paths -> Direction\n- draw_overlapping_paths -> PathStepV2\n- draw_overlapping_paths -> ToggleZoomed\n- draw_overlapping_paths -> ToggleZoomedBuilder\n- draw_overlapping_paths -> Ring\n- draw_overlapping_paths -> Distance\n\nFunctionalities:\n- Draw overlapping paths with colors\n- Calculate intervals for paths\n- Handle different path steps\n- Generate polygons for visual representation\n- Fill in intersections between paths\n\n# map_gui/src/tools/navigate.rs [2138 tokens]:\n\nDescription:\nThis file implements navigation functionality for a map application, allowing users to search for streets and buildings.\n\nExternal Imports:\n- std\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::tools\n- crate::AppLike\n\nClasses:\n- {'name': 'Navigator', 'description': 'Handles the user interface for navigating streets.'}\n- {'name': 'CrossStreet', 'description': 'Manages the selection of cross streets based on user input.'}\n- {'name': 'SearchBuildings', 'description': 'Facilitates searching for buildings by name or address.'}\n\nRelationships:\n- Navigator -> crate::tools\n- Navigator -> crate::AppLike\n- CrossStreet -> crate::tools\n- CrossStreet -> crate::AppLike\n- SearchBuildings -> crate::tools\n- SearchBuildings -> crate::AppLike\n\nFunctionalities:\n- User interface for street navigation\n- Autocomplete functionality for street names\n- Search functionality for buildings\n- Display of cross streets based on selected roads\n- Interaction handling for navigation actions\n\n# map_gui/src/tools/updater.rs [1217 tokens]:\n\nDescription:\nThis file provides functionality to prompt the user to download missing data files for a specified map and handles the downloading process asynchronously.\n\nExternal Imports:\n- std\n- anyhow\n- fs_err\n- futures_channel\n- abstio\n- abstutil\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n\nRelationships:\n- prompt_to_download_missing_data -> AppLike\n- files_to_download -> abstio\n- download_files -> abstio\n- download_files -> fs_err\n\nFunctionalities:\n- Prompting user for missing data download\n- Downloading files asynchronously\n- Handling file decompression\n- Updating progress during download\n\n# map_gui/src/tools/compare_counts.rs [2433 tokens]:\n\nDescription:\nThis file implements a GUI tool for comparing traffic counts between two datasets.\n\nExternal Imports:\n- abstutil\n- geom\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::tools\n- crate::AppLike\n\nClasses:\n- {'name': 'CompareCounts', 'description': 'Handles the comparison of traffic counts between two datasets and manages the associated visualizations.'}\n- {'name': 'Layer', 'description': 'Enum representing the different layers of traffic count data (A, B, Compare).'}\n- {'name': 'Obj', 'description': 'Enum representing the types of objects (Road or Intersection) used in the comparison.'}\n\nRelationships:\n- CompareCounts -> crate::tools\n- CompareCounts -> crate::AppLike\n- Layer <> CompareCounts\n- Obj <> CompareCounts\n\nFunctionalities:\n- Initialize traffic counts comparison\n- Recalculate traffic counts\n- Draw heatmaps for traffic counts\n- Handle user interactions with the GUI\n- Generate tooltips for traffic data\n\n# map_gui/src/tools/waypoints.rs [2384 tokens]:\n\nDescription:\nThis file provides functionality for managing waypoints on a map, allowing users to add, drag, and delete waypoints while snapping to road and building endpoints.\n\nExternal Imports:\n- geom\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n\nClasses:\n- {'name': 'InputWaypoints', 'description': 'Manages a collection of waypoints, allowing for their creation, manipulation, and visualization.'}\n- {'name': 'WaypointID', 'description': 'A unique identifier for waypoints.'}\n- {'name': 'Waypoint', 'description': 'Represents a single waypoint with its location, label, and center point.'}\n\nRelationships:\n- InputWaypoints -> AppLike\n- WaypointID -> ObjectID\n- Waypoint -> TripEndpoint\n- Waypoint -> AppLike\n\nFunctionalities:\n- Adding waypoints\n- Dragging waypoints\n- Deleting waypoints\n- Snapping to map features\n- Displaying waypoint information\n- Rebuilding visual representation of waypoints\n\n# map_gui/src/tools/icons.rs [205 tokens]:\n\nDescription:\nThis file provides functions to draw start and goal markers on a graphical interface using SVG assets.\n\nExternal Imports:\n- geom\n- widgetry\n\nFunctionalities:\n- Drawing graphical markers\n- Loading SVG assets\n- Scaling and positioning graphics\n- Changing color transparency\n\n# map_gui/src/tools/ui.rs [2014 tokens]:\n\nDescription:\nThis file provides generic UI tools for file picking and saving, along with various UI components and utilities.\n\nExternal Imports:\n- anyhow\n- futures_channel\n- rfd\n- fs_err\n- abstutil\n- geom\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n\nClasses:\n- {'name': 'FilePicker', 'description': 'Handles the file picking UI and logic.'}\n- {'name': 'FileSaver', 'description': 'Manages the file saving UI and functionality.'}\n\nRelationships:\n- FilePicker -> crate::AppLike\n- FileSaver -> crate::AppLike\n\nFunctionalities:\n- File picking and saving UI\n- Progress tracking for file operations\n- Displaying messages for file operations\n- Creating visual components like percentage bars and checkboxes for trip modes\n\n# map_gui/src/tools/polygon.rs [1866 tokens]:\n\nDescription:\nThis file provides functionality for editing a polygon on a map, including adding points, dragging them, and using a leafblower tool to modify points based on cursor position.\n\nExternal Imports:\n- anyhow\n- geom\n- widgetry\n\nClasses:\n- {'name': 'EditPolygon', 'description': 'Handles the editing of a polygon, including point management and rendering.'}\n- {'name': 'Leafblower', 'description': 'Manages the leafblower tool functionality for modifying polygon points.'}\n\nRelationships:\n- > EditPolygon -> Leafblower\n\nFunctionalities:\n- Edit polygon points\n- Drag points and polygons\n- Add new points to the polygon\n- Delete points from the polygon\n- Modify points using a leafblower tool\n\n# map_gui/src/tools/city_picker.rs [4298 tokens]:\n\nDescription:\nThis file provides a graphical user interface for selecting cities and districts within a map application.\n\nExternal Imports:\n- std\n- abstio\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::load\n- crate::render\n- crate::tools\n- crate::AppLike\n\nClasses:\n- {'name': 'CityPicker', 'description': 'Allows the player to switch maps by selecting a city and its districts.'}\n- {'name': 'AllCityPicker', 'description': 'Facilitates the selection of a city from a list of all available cities.'}\n- {'name': 'CitiesInCountryPicker', 'description': 'Enables the selection of cities within a specified country.'}\n\nRelationships:\n- CityPicker -> crate::load\n- CityPicker -> crate::render\n- CityPicker -> crate::tools\n- CityPicker -> crate::AppLike\n- AllCityPicker -> crate::load\n- AllCityPicker -> crate::render\n- AllCityPicker -> crate::tools\n- AllCityPicker -> crate::AppLike\n- CitiesInCountryPicker -> crate::load\n- CitiesInCountryPicker -> crate::render\n- CitiesInCountryPicker -> crate::tools\n- CitiesInCountryPicker -> crate::AppLike\n\nFunctionalities:\n- City selection\n- District selection\n- File loading\n- Map rendering\n- User interaction handling\n\n# map_gui/src/tools/trip_files.rs [2919 tokens]:\n\nDescription:\nThis file manages the saving, loading, and browsing of named trips consisting of sequences of waypoints.\n\nExternal Imports:\n- std\n- serde\n- abstutil\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::tools::grey_out_map\n- crate::AppLike\n\nClasses:\n- {'name': 'TripManagement', 'description': 'Handles the management of trips including saving, loading, and navigating between them.'}\n- {'name': 'TripManagementState', 'description': 'Trait defining the state behavior for trip management.'}\n- {'name': 'NamedTrip', 'description': 'Represents a trip with a name and a list of waypoints.'}\n- {'name': 'SavedTrips', 'description': 'Handles the loading and saving of trips to and from a file.'}\n- {'name': 'RenameTrip', 'description': 'Manages the renaming of a trip.'}\n\nRelationships:\n- TripManagement -> TripManagementState\n- TripManagement -> SavedTrips\n- TripManagement -> NamedTrip\n- TripManagementState -> AppLike\n- RenameTrip -> NamedTrip\n- RenameTrip -> SavedTrips\n\nFunctionalities:\n- Manage named trips\n- Load trips from a file\n- Save trips to a file\n- Navigate between trips\n- Rename trips\n- Add new trips\n- Delete trips\n\n# map_gui/src/tools/importer.rs [1493 tokens]:\n\nDescription:\nThis file provides a GUI for importing a new city by allowing users to draw a polygon on geojson.io and import the resulting GeoJSON data from their clipboard.\n\nExternal Imports:\n- std\n- anyhow\n- abstio\n- widgetry\n\nInternal Imports:\n- crate::load\n- crate::tools\n- crate::AppLike\n\nClasses:\n- {'name': 'ImportCity', 'description': 'Handles the state and UI for importing a new city.'}\n\nRelationships:\n- ImportCity -> MapLoader\n- ImportCity -> find_exe\n- ImportCity -> AppLike\n- MapLoader <- ImportCity\n- find_exe <- ImportCity\n- AppLike <- ImportCity\n\nFunctionalities:\n- Display import instructions\n- Handle user interactions for importing a city\n- Manage clipboard data for GeoJSON\n- Generate map names\n- Open external URLs for instructions\n- Run command line tools for importing\n\n# map_gui/src/tools/command.rs [1377 tokens]:\n\nDescription:\nThis file executes a command and displays its STDOUT and STDERR in a loading screen window.\n\nExternal Imports:\n- std\n- instant\n- subprocess\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n\nClasses:\n- {'name': 'RunCommand', 'description': 'Handles the execution of a command and manages the display of its output in a loading screen.'}\n\nRelationships:\n- RunCommand -> AppLike\n\nFunctionalities:\n- Execute a command\n- Display command output\n- Handle command success or failure\n- Show loading screen\n\n# map_gui/src/tools/labels.rs [2861 tokens]:\n\nDescription:\nThis test file covers the functionality of the simplify_name function used for road name simplification.\n\nExternal Imports:\n- regex\n\nInternal Imports:\n- map_gui/src/tools/labels\n\nTest Cases:\n- Test cases for name simplification logic.\n\n# map_gui/src/tools/heatmap.rs [3051 tokens]:\n\nDescription:\nThis file implements a heatmap visualization tool for geographic data, allowing for customizable options and rendering of heatmaps based on point data.\n\nExternal Imports:\n- colorous\n- contour\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- widgetry::tools\n\nClasses:\n- {'name': 'HeatmapOptions', 'description': 'Holds configuration options for generating heatmaps.'}\n- {'name': 'Grid', 'description': 'Represents a 2D grid structure for storing and manipulating data.'}\n\nRelationships:\n- HeatmapOptions -> widgetry::tools\n- Grid -> geom\n- Grid -> map_model\n\nFunctionalities:\n- Creating heatmap options with user controls\n- Generating heatmaps based on point data\n- Drawing isochrones based on duration data\n- Managing a 2D grid for data representation\n\n# map_gui/src/tools/title_screen.rs [2813 tokens]:\n\nDescription:\nThis file implements a title screen for the A/B Street applications, allowing users to select different games and functionalities.\n\nExternal Imports:\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n\nClasses:\n- {'name': 'TitleScreen', 'description': 'A title screen shared among all of the A/B Street apps.'}\n- {'name': 'Executable', 'description': 'An enumeration representing different executable applications in the A/B Street suite.'}\n\nRelationships:\n- TitleScreen -> AppLike\n- Executable -> AppLike\n\nFunctionalities:\n- Display a title screen with options for different applications\n- Handle user interactions to launch selected applications\n- Manage transitions between different application states\n- Provide information about the application and its creators\n\n# map_gui/src/tools/mod.rs [5382 tokens]:\n\nDescription:\nThis file contains various tools and UI states useful for applications that display maps.\n\nExternal Imports:\n- std\n- abstio\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- camera\n- city_picker\n- colors\n- command\n- draw_overlapping_paths\n- heatmap\n- icons\n- labels\n- minimap\n- navigate\n- polygon\n- title_screen\n- trip_files\n- ui\n- updater\n- waypoints\n\nClasses:\n- {'name': 'CameraState', 'description': 'Manages the camera state for map visualization.'}\n- {'name': 'DefaultMap', 'description': 'Represents the default map settings.'}\n- {'name': 'CityPicker', 'description': 'Provides functionality to select a city.'}\n- {'name': 'ColorDiscrete', 'description': 'Handles discrete color settings for visualization.'}\n- {'name': 'ColorNetwork', 'description': 'Manages color settings for network visualization.'}\n- {'name': 'Navigator', 'description': 'Facilitates navigation within the map.'}\n- {'name': 'EditPolygon', 'description': 'Allows editing of polygon shapes on the map.'}\n- {'name': 'Executable', 'description': 'Represents an executable state in the application.'}\n- {'name': 'TitleScreen', 'description': 'Manages the title screen of the application.'}\n- {'name': 'TripManagement', 'description': 'Handles trip management functionalities.'}\n- {'name': 'TripManagementState', 'description': 'Represents the state of trip management.'}\n- {'name': 'InputWaypoints', 'description': 'Handles input for waypoints.'}\n- {'name': 'WaypointID', 'description': 'Represents an identifier for waypoints.'}\n\nRelationships:\n- > CameraState\n- < DefaultMap\n- < CityPicker\n- < ColorDiscrete\n- < ColorNetwork\n- < Navigator\n- < EditPolygon\n- < Executable\n- < TitleScreen\n- < TripManagement\n- < TripManagementState\n- < InputWaypoints\n- < WaypointID\n- < command\n- < draw_overlapping_paths\n- < heatmap\n- < icons\n- < labels\n- < minimap\n- < navigate\n- < polygon\n- < title_screen\n- < trip_files\n- < ui\n- < updater\n- < waypoints\n\nFunctionalities:\n- Manage camera states for map visualization\n- Select cities for display\n- Handle color settings for visualization\n- Facilitate navigation within the map\n- Edit polygon shapes on the map\n- Manage the title screen and executable states\n- Handle trip management and waypoint input.\n\n# map_gui/src/tools/colors.rs [1909 tokens]:\n\nDescription:\nThis file provides functionality for visualizing different categories of map elements using colors in a graphical user interface.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n\nClasses:\n- {'name': 'ColorDiscrete', 'description': 'Handles the visualization of discrete categories on a map with associated colors.'}\n- {'name': 'ColorNetwork', 'description': 'Manages the visualization of a network of map elements with color coding.'}\n\nRelationships:\n- ColorDiscrete -> crate::AppLike\n- ColorNetwork -> crate::AppLike\n\nFunctionalities:\n- Visualizing map elements with colors\n- Creating color legends\n- Handling different visualization modes (zoomed/unzoomed)\n- Ranking and interpolating colors based on counts\n\n# map_gui/src/tools/minimap.rs [4188 tokens]:\n\nDescription:\nThis file implements a minimap widget for a graphical application, allowing users to navigate and interact with a map interface.\n\nExternal Imports:\n- std\n- geom\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n\nClasses:\n- {'name': 'Minimap', 'description': 'Represents a minimap that provides navigation and zooming functionalities.'}\n- {'name': 'MinimapControls', 'description': 'Defines a trait for customizing the appearance and behavior of a minimap.'}\n\nRelationships:\n- Minimap -> AppLike\n- MinimapControls -> AppLike\n- Minimap <- MinimapControls\n\nFunctionalities:\n- Display a minimap interface\n- Handle zooming and panning actions\n- Customize minimap controls and appearance\n- Respond to user interactions with the minimap\n- Draw the minimap and its elements\n\n# map_gui/src/tools/camera.rs [457 tokens]:\n\nDescription:\nThis file manages the camera state for a widgetry Canvas and tracks the last used map configuration.\n\nExternal Imports:\n- serde\n- abstio\n- abstutil\n- widgetry\n\nClasses:\n- {'name': 'CameraState', 'description': 'Represents the state of a widgetry Canvas including position and zoom.'}\n- {'name': 'DefaultMap', 'description': 'Tracks the last map used to resume the next session.'}\n\nFunctionalities:\n- Saving camera configuration for a map\n- Loading camera configuration for a map\n- Tracking last used map\n\n# map_gui/src/lib.rs [726 tokens]:\n\nDescription:\nThis crate contains common code for applications that draw and interact with a `Map`.\n\nExternal Imports:\n- anyhow\n- log\n- abstutil\n- geom\n- map_model\n- widgetry\n- colors\n\nInternal Imports:\n- colors\n- load\n- options\n- render\n- simple_app\n- tools\n\nClasses:\n- {'name': 'AppLike', 'description': 'A trait that defines the necessary methods for applications to interact with the map and its rendering.'}\n- {'name': 'ID', 'description': 'An enumeration representing different types of identifiers related to map elements.'}\n\nRelationships:\n- AppLike -> Map\n- AppLike -> ColorScheme\n- AppLike -> DrawMap\n- AppLike -> Options\n- AppLike -> EventCtx\n- ID -> RoadID\n- ID -> LaneID\n- ID -> IntersectionID\n- ID -> BuildingID\n- ID -> ParkingLotID\n- ID -> TransitStopID\n- ID -> AreaID\n\nFunctionalities:\n- Map interaction\n- Color scheme management\n- Rendering management\n- State management for widgets\n- Traffic signal rendering support\n\n# map_gui/src/render/traffic_signal.rs [2180 tokens]:\n\nDescription:\nThis file handles the rendering of traffic signal stages and associated graphics in a map application.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::options\n- crate::render::intersection\n- crate::render\n\nFunctionalities:\n- Rendering traffic signal stages\n- Drawing movement arrows\n- Displaying walk and don't walk icons\n- Showing remaining time for traffic signals\n- Drawing stage numbers on intersections\n\n# map_gui/src/render/building.rs [2222 tokens]:\n\nDescription:\nThis file handles the rendering of buildings in a graphical map interface.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- colors\n- options\n- render\n- AppLike\n\nClasses:\n- {'name': 'DrawBuilding', 'description': 'Responsible for creating and managing the graphical representation of a building.'}\n\nRelationships:\n- DrawBuilding -> Map\n- DrawBuilding -> ColorScheme\n- DrawBuilding -> Options\n- DrawBuilding -> GeomBatch\n- DrawBuilding -> AppLike\n\nFunctionalities:\n- Rendering buildings with different styles based on their properties\n- Displaying building labels\n- Calculating building distances for rendering order\n- Handling building outlines and parking icons\n\n# map_gui/src/render/transit_stop.rs [680 tokens]:\n\nDescription:\nThis file defines a structure for rendering transit stops on a map with associated graphical properties.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- colors\n- render\n- AppLike\n\nClasses:\n- {'name': 'DrawTransitStop', 'description': 'Handles the rendering of transit stops on the map.'}\n\nRelationships:\n- DrawTransitStop -> TransitStop\n- DrawTransitStop -> Map\n- DrawTransitStop -> ColorScheme\n- DrawTransitStop -> AppLike\n- DrawTransitStop <- Renderable\n\nFunctionalities:\n- Rendering transit stops\n- Calculating bounds and outlines for transit stops\n- Checking point containment for transit stops\n- Managing graphical properties for transit stops\n\n# map_gui/src/render/turn.rs [1852 tokens]:\n\nDescription:\nThis file handles the rendering of turn movements at traffic signals in a map application.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::colors\n- crate::render\n- crate::AppLike\n\nClasses:\n- {'name': 'DrawMovement', 'description': 'Represents a movement at an intersection with its associated graphical representation.'}\n\nRelationships:\n- DrawMovement -> map_model::MovementID\n- DrawMovement -> widgetry::GeomBatch\n- DrawMovement -> crate::colors::ColorScheme\n- DrawMovement -> crate::render::traffic_signal\n- DrawMovement -> crate::AppLike\n\nFunctionalities:\n- Rendering traffic signal movements\n- Creating graphical representations for different types of movements\n- Handling user interactions with movements\n- Managing visual properties based on movement types\n\n# map_gui/src/render/area.rs [503 tokens]:\n\nDescription:\nThis file defines the DrawArea struct for rendering areas on a map with specific visual properties based on their type.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- colors\n- render\n\nClasses:\n- {'name': 'DrawArea', 'description': 'Represents an area on the map that can be drawn with specific fill colors and properties.'}\n\nRelationships:\n- DrawArea -> Area\n- DrawArea -> ColorScheme\n- DrawArea -> GeomBatch\n- DrawArea -> Map\n- DrawArea -> Tessellation\n- DrawArea <- Renderable\n- Renderable -> AppLike\n\nFunctionalities:\n- Rendering areas on a map\n- Determining area properties based on type\n- Calculating bounds and containment of points within areas\n\n# map_gui/src/render/lane.rs [5232 tokens]:\n\nDescription:\nThis file contains the implementation for rendering lanes on a map in a graphical user interface.\n\nExternal Imports:\n- lyon\n- widgetry\n\nInternal Imports:\n- geom\n- map_model\n- crate::render\n- crate\n\nClasses:\n- {'name': 'DrawLane', 'description': 'Handles the rendering of a lane on the map.'}\n\nRelationships:\n- DrawLane -> Lane\n- DrawLane -> Road\n- DrawLane -> Map\n- DrawLane -> AppLike\n- DrawLane -> GeomBatch\n- DrawLane -> Tessellation\n- DrawLane -> Color\n\nFunctionalities:\n- Rendering lanes with various styles based on their type\n- Calculating markings for parking, driving, and turn lanes\n- Handling different lane types such as sidewalks, bike lanes, and buffers\n- Managing lane outlines and bounds\n- Optimizing rendering with lazy calculations.\n\n# map_gui/src/render/intersection.rs [5875 tokens]:\n\nDescription:\nThis file handles the rendering of intersections in a graphical user interface for a mapping application.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- colors\n- render\n- AppLike\n\nClasses:\n- {'name': 'DrawIntersection', 'description': 'Handles the drawing and rendering of intersections on the map.'}\n\nRelationships:\n- DrawIntersection -> colors\n- DrawIntersection -> render\n- DrawIntersection -> AppLike\n- colors <- DrawIntersection\n- render <- DrawIntersection\n- AppLike <- DrawIntersection\n\nFunctionalities:\n- Rendering intersections\n- Drawing traffic signals\n- Calculating intersection outlines\n- Managing intersection visual properties\n- Handling crosswalks and road markings\n\n# map_gui/src/render/road.rs [1870 tokens]:\n\nDescription:\nThis file defines the rendering logic for roads in a map visualization application.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- colors\n- options\n- render\n\nClasses:\n- {'name': 'DrawRoad', 'description': 'Handles the rendering of a road, including its lanes and labels.'}\n\nRelationships:\n- DrawRoad -> Road\n- DrawRoad -> AppLike\n- DrawRoad -> ColorSchemeChoice\n- DrawRoad -> CameraAngle\n- DrawRoad -> DrawLane\n- DrawRoad -> DrawOptions\n- DrawRoad -> Renderable\n- DrawRoad <- colors\n- DrawRoad <- options\n- DrawRoad <- render\n\nFunctionalities:\n- Render roads and their labels on the map\n- Draw center lines for roads\n- Handle rendering of building driveways\n- Manage lane rendering for roads\n\n# map_gui/src/render/map.rs [4384 tokens]:\n\nDescription:\nThis file defines the DrawMap class, which is responsible for rendering various map components such as roads, intersections, buildings, and parking lots in a graphical user interface.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- colors\n- options\n- render\n- AppLike\n\nClasses:\n- {'name': 'DrawMap', 'description': 'Handles the rendering of map elements and manages their graphical representation.'}\n\nRelationships:\n- DrawMap -> DrawRoad\n- DrawMap -> DrawIntersection\n- DrawMap -> DrawBuilding\n- DrawMap -> DrawParkingLot\n- DrawMap -> DrawTransitStop\n- DrawMap -> DrawArea\n- DrawMap -> ColorScheme\n- DrawMap -> Options\n- DrawMap -> AppLike\n- DrawRoad <- DrawMap\n- DrawIntersection <- DrawMap\n- DrawBuilding <- DrawMap\n- DrawParkingLot <- DrawMap\n- DrawTransitStop <- DrawMap\n- DrawArea <- DrawMap\n- ColorScheme <- DrawMap\n- Options <- DrawMap\n- AppLike <- DrawMap\n\nFunctionalities:\n- Rendering map components\n- Managing graphical representations\n- Handling zoom levels\n- Querying spatial data\n- Updating map elements\n\n# map_gui/src/render/parking_lot.rs [1139 tokens]:\n\nDescription:\nThis file defines the rendering logic for parking lots in a map visualization application.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- colors\n- options\n- render\n\nClasses:\n- {'name': 'DrawParkingLot', 'description': 'Handles the drawing and rendering of parking lots on the map.'}\n\nRelationships:\n- DrawParkingLot -> Options\n- DrawParkingLot -> ColorScheme\n- DrawParkingLot -> Renderable\n- DrawParkingLot -> AppLike\n- DrawParkingLot <- Map\n- DrawParkingLot <- ParkingLot\n\nFunctionalities:\n- Rendering parking lots on a map\n- Managing visual representation of parking lot features\n- Handling drawing operations for parking lot elements\n\n# map_gui/src/options.rs [3128 tokens]:\n\nDescription:\nThis file defines the options and settings for the UI of a map-based application, including rendering styles and user preferences.\n\nExternal Imports:\n- serde\n- abstutil\n- geom\n- widgetry\n\nInternal Imports:\n- colors\n- render\n- tools\n- AppLike\n\nClasses:\n- {'name': 'Options', 'description': \"Holds configuration options for the application's UI and rendering.\"}\n- {'name': 'OptionsPanel', 'description': 'Manages the UI panel for adjusting application settings.'}\n\nRelationships:\n- Options -> colors\n- Options -> render\n- OptionsPanel -> AppLike\n- OptionsPanel -> Options\n- OptionsPanel -> tools\n\nFunctionalities:\n- Load and restore application settings from a file\n- Provide a user interface for modifying application options\n- Render traffic signals and buildings based on user-defined settings\n- Handle user input for toggling various UI features\n\n# map_gui/src/colors.rs [4636 tokens]:\n\nDescription:\nThis file defines a color scheme for map elements, allowing for different visual styles and color configurations in a mapping application.\n\nExternal Imports:\n- std\n- anyhow\n- fs_err\n- serde\n- widgetry\n- map_model\n\nInternal Imports:\n- crate::tools\n\nClasses:\n- {'name': 'ColorSchemeChoice', 'description': 'Enum representing different color scheme options.'}\n- {'name': 'ColorScheme', 'description': 'Struct that holds color definitions for various map and UI elements.'}\n\nRelationships:\n- ColorSchemeChoice -> ColorScheme\n- ColorScheme <- ColorSchemeChoice\n- ColorScheme -> crate::tools\n\nFunctionalities:\n- Defines color schemes for different modes\n- Allows switching between color schemes\n- Exports and imports color configurations\n- Provides color definitions for map elements and UI components\n\n# map_gui/src/load.rs [766 tokens]:\n\nDescription:\nThis file defines a MapLoader struct that manages the loading of map data and associated fonts in a graphical application.\n\nExternal Imports:\n- abstio\n- widgetry\n\nInternal Imports:\n- crate::AppLike\n- map_model\n\nClasses:\n- {'name': 'MapLoader', 'description': 'Handles the loading and reloading of map data.'}\n- {'name': 'MapAlreadyLoaded', 'description': 'Represents the state when a map is already loaded.'}\n\nRelationships:\n- MapLoader -> AppLike\n- MapLoader -> map_model\n- MapAlreadyLoaded -> AppLike\n\nFunctionalities:\n- Loading map data\n- Reloading existing maps\n- Handling font loading errors\n- Displaying error messages\n\n# map_gui/src/simple_app.rs [3045 tokens]:\n\nDescription:\nThis file defines a simple application state that renders a static map with various functionalities for user interaction and visualization.\n\nExternal Imports:\n- structopt\n- abstio\n- abstutil\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- colors\n- load\n- options\n- render\n- tools\n\nClasses:\n- {'name': 'SimpleApp', 'description': 'Represents the state of a simple application that displays a static map.'}\n- {'name': 'SimpleAppArgs', 'description': 'Handles command-line arguments and options for configuring the SimpleApp.'}\n- {'name': 'SimpleWarper', 'description': 'Facilitates camera warping functionality within the SimpleApp.'}\n\nRelationships:\n- SimpleApp -> colors\n- SimpleApp -> load\n- SimpleApp -> options\n- SimpleApp -> render\n- SimpleApp -> tools\n- SimpleAppArgs -> options\n- SimpleWarper -> SimpleApp\n\nFunctionalities:\n- Rendering a static map\n- Handling user input for map interaction\n- Managing application state and settings\n- Configuring application options via command-line arguments\n- Implementing camera controls and warping functionality\n\n# apps/map_editor/src/edit.rs [1993 tokens]:\n\nDescription:\nThis file defines the EditRoad class for editing road attributes in a map editor application.\n\nExternal Imports:\n- abstutil\n- geom\n- osm2streets\n- widgetry\n\nInternal Imports:\n- crate::App\n\nClasses:\n- {'name': 'EditRoad', 'description': 'Handles the state and UI for editing road attributes.'}\n\nRelationships:\n- EditRoad -> App\n\nFunctionalities:\n- Display road information\n- Edit road attributes\n- Apply changes to the road\n- Handle user input for road editing\n- Draw road representation\n\n# apps/map_editor/src/lib.rs [598 tokens]:\n\nDescription:\nThe map_editor renders and allows editing of RawMaps, facilitating debugging and synthetic map creation.\n\nExternal Imports:\n- log\n- structopt\n- widgetry\n\nInternal Imports:\n- app\n- camera\n- edit\n- load\n- model\n\nClasses:\n- {'name': 'Args', 'description': 'Handles command-line arguments for loading and configuring the RawMap editor.'}\n- {'name': 'App', 'description': 'Main application structure that manages the state and model of the map editor.'}\n\nRelationships:\n- App -> model::Model\n- Args -> App\n- load::load_map -> App\n- app::MainState -> App\n\nFunctionalities:\n- Render RawMaps\n- Edit RawMaps\n- Load RawMaps from a file\n- Include buildings in the map\n- Manage camera state\n- Setup application settings\n\n# apps/map_editor/src/load.rs [724 tokens]:\n\nDescription:\nThis file provides functionality for selecting and loading maps in a map editor application.\n\nExternal Imports:\n- abstio\n- raw_map\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::camera\n- crate::model\n\nClasses:\n- {'name': 'PickMap', 'description': 'Handles the user interface for selecting a map.'}\n\nRelationships:\n- PickMap -> App\n- PickMap -> CameraState\n- PickMap -> Model\n- load_map -> App\n- load_map -> RawMap\n\nFunctionalities:\n- Map selection interface\n- Map loading process\n- Error handling during map loading\n\n# apps/map_editor/src/app.rs [2984 tokens]:\n\nDescription:\nThis file implements a map editor application with functionalities for creating and editing intersections, buildings, and roads.\n\nExternal Imports:\n- geom\n- osm2streets\n- widgetry\n\nInternal Imports:\n- camera\n- model\n\nClasses:\n- {'name': 'App', 'description': 'Represents the main application state for the map editor.'}\n- {'name': 'MainState', 'description': 'Handles the main interactive state of the map editor, including user inputs and UI updates.'}\n\nRelationships:\n- App -> Model\n- MainState -> App\n- MainState -> Model\n- MainState -> CameraState\n\nFunctionalities:\n- Drawing the map and UI elements\n- Handling user interactions for creating and editing map features\n- Updating the application state based on user inputs\n- Managing the display of instructions and tooltips\n\n# apps/map_editor/src/model.rs [5223 tokens]:\n\nDescription:\nThis file defines a model for a map editor, handling the representation and manipulation of roads, intersections, and buildings.\n\nExternal Imports:\n- std\n- abstio\n- abstutil\n- geom\n- osm2streets\n- raw_map\n- widgetry\n\nInternal Imports:\n- osm\n- IntersectionControl\n- IntersectionID\n- Road\n- RoadID\n- RawBuilding\n- RawMap\n- World\n- Color\n- EventCtx\n- GeomBatch\n- Key\n\nClasses:\n- {'name': 'Model', 'description': 'Represents the state and behavior of the map editor, managing roads, intersections, and buildings.'}\n- {'name': 'ID', 'description': 'An enumeration representing different types of objects in the map editor.'}\n\nRelationships:\n- Model -> RawMap\n- Model -> World\n- Model -> ID\n- ID <- Model\n\nFunctionalities:\n- Map manipulation\n- Intersection management\n- Road management\n- Building management\n- OSM export functionality\n- Boundary setting\n- Visualization of map elements\n\n# apps/fifteen_min/src/isochrone.rs [1728 tokens]:\n\nDescription:\nThis file defines the Isochrone and BorderIsochrone classes for calculating and visualizing reachable areas from buildings and intersections based on movement options.\n\nExternal Imports:\n- std\n- abstutil\n- connectivity\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::App\n\nClasses:\n- {'name': 'Isochrone', 'description': 'Represents the area reachable from a single building.'}\n- {'name': 'BorderIsochrone', 'description': 'Represents the area reachable from all intersections on the map border.'}\n\nRelationships:\n- Isochrone -> Options\n- Isochrone -> MovementOptions\n- Isochrone -> App\n- BorderIsochrone -> Options\n- BorderIsochrone -> MovementOptions\n- BorderIsochrone -> App\n\nFunctionalities:\n- Calculate reachable areas based on movement options\n- Visualize isochrones on a map\n- Estimate population and amenities in reachable areas\n- Determine paths to buildings from starting points\n\n# apps/fifteen_min/src/score_homes.rs [2246 tokens]:\n\nDescription:\nThis file calculates accessibility scores for homes based on nearby amenities within a 15-minute walkshed.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::App\n- crate::isochrone::Options\n- crate::common\n- crate::render\n\nClasses:\n- {'name': 'ScoreHomes', 'description': 'Handles the user interface for selecting amenities and calculating accessibility scores.'}\n- {'name': 'Results', 'description': 'Displays the results of the accessibility score calculation and related information.'}\n\nRelationships:\n- ScoreHomes -> App\n- ScoreHomes -> Options\n- ScoreHomes -> common\n- ScoreHomes -> render\n- Results -> App\n- Results -> common\n- Results -> render\n\nFunctionalities:\n- User interface for selecting amenities\n- Calculation of accessibility scores\n- Display of results and statistics\n- Interaction handling for user inputs\n- Visualization of amenities and houses on the map\n\n# apps/fifteen_min/src/single_start.rs [1952 tokens]:\n\nDescription:\nThis file implements a UI tool for exploring isochrones and walksheds from a single building in the context of 15-minute neighborhoods.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::common\n- crate::isochrone\n- crate::render\n- crate::App\n\nClasses:\n- {'name': 'SingleStart', 'description': 'Manages the UI state for exploring isochrones from a single building.'}\n\nRelationships:\n- SingleStart -> Isochrone\n- SingleStart -> common\n- SingleStart -> render\n- SingleStart -> App\n- Isochrone <- SingleStart\n- common <- SingleStart\n- render <- SingleStart\n- App <- SingleStart\n\nFunctionalities:\n- Display isochrones and reachable amenities from a selected building\n- Handle user interactions for changing the starting building\n- Render UI components and update based on user input\n- Manage the state of the application related to isochrones and buildings\n\n# apps/fifteen_min/src/render.rs [321 tokens]:\n\nDescription:\nThis file handles the rendering of buildings and unwalkable roads in a graphical application.\n\nExternal Imports:\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::isochrone\n- crate::App\n\nClasses:\n- {'name': 'Building', 'description': 'Represents a building structure in the map.'}\n- {'name': 'LaneType', 'description': 'Enumerates different types of lanes in the road system.'}\n- {'name': 'MovementOptions', 'description': 'Defines movement options for users, such as walking or biking.'}\n- {'name': 'App', 'description': 'Main application structure that holds the state and logic.'}\n\nRelationships:\n- draw_star -> Building\n- draw_unwalkable_roads -> App\n- draw_unwalkable_roads -> MovementOptions\n- MovementOptions -> draw_unwalkable_roads\n\nFunctionalities:\n- Render graphical elements for buildings\n- Display unwalkable road segments\n- Handle user movement options for rendering\n\n# apps/fifteen_min/src/lib.rs [414 tokens]:\n\nDescription:\nThis file sets up and runs a graphical application for exploring 15-minute neighborhoods using the widgetry library.\n\nExternal Imports:\n- structopt\n- widgetry\n- log\n\nInternal Imports:\n- amenities_details\n- bus\n- common\n- from_amenity\n- isochrone\n- render\n- score_homes\n- single_start\n\nClasses:\n- {'name': 'SingleStart', 'description': 'Handles the initialization of a random starting point in the application.'}\n\nRelationships:\n- App -> Options\n- App -> MovementOptions\n- Options -> WalkingOptions\n- Options -> default_thresholds\n- SingleStart -> App\n\nFunctionalities:\n- Initialize application settings\n- Load or override application options\n- Run the main application loop\n- Handle WASM-specific initialization\n\n# apps/fifteen_min/src/amenities_details.rs [1166 tokens]:\n\nDescription:\nThis file defines the ExploreAmenitiesDetails state for displaying and interacting with amenity details within a specified isochrone area.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::isochrone\n- crate::render\n- crate::App\n\nClasses:\n- {'name': 'ExploreAmenitiesDetails', 'description': 'Handles the display and interaction of amenity details in a user interface.'}\n- {'name': 'Entry', 'description': 'Represents a single entry in the amenities table with relevant details.'}\n\nRelationships:\n- ExploreAmenitiesDetails -> crate::isochrone\n- ExploreAmenitiesDetails -> crate::render\n- ExploreAmenitiesDetails -> crate::App\n- Entry -> map_model::BuildingID\n- Entry -> geom::Duration\n\nFunctionalities:\n- Display a table of amenities within a specified isochrone area\n- Handle user interactions with the amenities table\n- Draw the isochrone and highlight relevant buildings\n- Open a browser to show details of a selected building\n\n# apps/fifteen_min/src/from_amenity.rs [1646 tokens]:\n\nDescription:\nThis file defines a state for exploring amenities within a specified distance from a selected amenity type on a map.\n\nExternal Imports:\n- abstutil\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- common\n- isochrone\n- render\n- App\n\nClasses:\n- {'name': 'FromAmenity', 'description': 'Manages the state and visualization of amenities within a certain distance from a selected amenity type.'}\n\nRelationships:\n- FromAmenity -> common\n- FromAmenity -> isochrone\n- FromAmenity -> render\n- FromAmenity -> App\n- common <- FromAmenity\n- isochrone <- FromAmenity\n- render <- FromAmenity\n- App <- FromAmenity\n\nFunctionalities:\n- Display amenities within a specified distance\n- Handle user interactions for changing amenity types\n- Render isochrones on the map\n- Update and display information about amenities and population estimates\n\n# apps/fifteen_min/src/common.rs [2172 tokens]:\n\nDescription:\nThis file implements a panel for a 15-minute neighborhood explorer application, allowing users to interact with and visualize accessibility to amenities.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- widgetry\n- map_model\n\nInternal Imports:\n- crate::isochrone\n- crate::App\n- crate::bus\n- crate::single_start\n- crate::from_amenity\n- crate::score_homes\n\nClasses:\n- {'name': 'HoverOnBuilding', 'description': 'Handles the display of tooltips and drawn routes for buildings based on user interaction.'}\n- {'name': 'HoverOnCategory', 'description': 'Manages the hover state and drawing of amenity categories based on user interaction.'}\n\nRelationships:\n- HoverOnBuilding -> crate::isochrone\n- HoverOnBuilding -> crate::App\n- HoverOnCategory -> crate::App\n- HoverOnCategory -> crate::isochrone\n- HoverOnCategory -> crate::from_amenity\n- HoverOnCategory -> crate::score_homes\n\nFunctionalities:\n- Build and display a user interface panel\n- Handle user interactions and transitions between different modes\n- Display tooltips and routes for buildings\n- Manage hover states for amenity categories\n\n# apps/fifteen_min/src/bus.rs [1228 tokens]:\n\nDescription:\nThis file implements a bus planning experiment that allows users to input waypoints and visualize bus routes and isochrones on a map.\n\nExternal Imports:\n- abstutil\n- geom\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::isochrone\n- crate::App\n\nClasses:\n- {'name': 'BusExperiment', 'description': 'Handles the state and functionality of the bus planning experiment, including waypoint input and route visualization.'}\n\nRelationships:\n- BusExperiment -> InputWaypoints\n- BusExperiment -> Isochrone\n- BusExperiment -> App\n- InputWaypoints <- BusExperiment\n- Isochrone <- BusExperiment\n- App <- BusExperiment\n\nFunctionalities:\n- Input and manage waypoints for bus routes\n- Calculate and visualize bus routes on a map\n- Generate isochrones based on waypoint locations\n- Display population and amenities reachable within a specified walking distance\n\n# apps/game/Cargo.toml [494 tokens]:\n\nDescription:\nA traffic simulation game based on OpenStreetMap.\n\nExternal Imports:\n- anyhow\n- downcast-rs\n- enumset\n- fs-err\n- futures-channel\n- lazy_static\n- log\n- lttb\n- maplit\n- petname\n- rand\n- rand_xorshift\n- serde\n- serde_json\n- svg_face\n- wasm-bindgen\n\nInternal Imports:\n- abstio\n- abstutil\n- blockfinding\n- collisions\n- colorous\n- contour\n- csv\n- geo\n- geojson\n- geom\n- getrandom\n- instant\n- kml\n- map_gui\n- map_model\n- popdat\n- sim\n- synthpop\n- structopt\n- widgetry\n\nFunctionalities:\n- traffic simulation\n- map visualization\n- data handling\n- user interaction\n- game logic\n\n# apps/game/src/pregame/mod.rs [341 tokens]:\n\nDescription:\nThis file manages the title screen and state transitions for a game application.\n\nExternal Imports:\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::challenges\n- crate::sandbox\n- crate::ungap\n- crate::devtools\n- map_gui::tools\n\nClasses:\n- {'name': 'TitleScreen', 'description': 'Handles the creation of the title screen state.'}\n\nRelationships:\n- TitleScreen -> map_gui::tools\n- TitleScreen -> crate::app\n- TitleScreen -> crate::challenges\n- TitleScreen -> crate::sandbox\n- TitleScreen -> crate::ungap\n- TitleScreen -> crate::devtools\n\nFunctionalities:\n- Manage title screen state\n- Handle state transitions based on command line arguments\n- Integrate various gameplay modes and tools\n\n# apps/game/src/pregame/proposals.rs [1296 tokens]:\n\nDescription:\nThis file manages community proposals for map edits in a game, allowing users to view, select, and apply these proposals.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::edit\n- crate::sandbox\n\nClasses:\n- {'name': 'Proposals', 'description': 'Handles the display and management of community proposals for map edits.'}\n\nRelationships:\n- Proposals -> App\n- Proposals -> PermanentMapEdits\n- Proposals -> MapLoader\n- Proposals -> SandboxMode\n- Proposals -> GameplayMode\n- Proposals -> Scenario\n- Proposals -> PopupMsg\n- Proposals -> SimpleState\n- Proposals -> EventCtx\n- Proposals -> Text\n- Proposals -> Widget\n- Proposals -> Line\n\nFunctionalities:\n- Display community proposals\n- Load and apply map edits\n- Open detailed proposal links\n- Handle user interactions with proposals\n- Manage state transitions based on user actions\n\n# apps/game/src/ungap/quick_sketch.rs [2356 tokens]:\n\nDescription:\nThis file implements a quick sketching tool for adding bike lanes to a road network in a mapping application.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- common\n- edit\n- sandbox\n- ungap\n\nClasses:\n- {'name': 'QuickSketch', 'description': 'Manages the state and UI for quickly adding bike lanes to roads.'}\n\nRelationships:\n- QuickSketch -> RouteSketcher\n- QuickSketch -> RoadEditor\n- QuickSketch -> Layers\n- QuickSketch -> GameplayMode\n- QuickSketch -> share\n- QuickSketch -> apply_map_edits\n- QuickSketch -> can_edit_lane\n\nFunctionalities:\n- Manage user interactions for sketching bike lanes\n- Update UI based on user actions\n- Handle road selection and editing\n- Apply changes to the road network\n- Manage proposals for edits\n\n# apps/game/src/ungap/bike_network.rs [712 tokens]:\n\nDescription:\nThis file defines a layer for drawing the bike network on a map, including different types of bike lanes and intersections.\n\nExternal Imports:\n- std\n- map_model\n- widgetry\n- lazy_static\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'DrawNetworkLayer', 'description': 'Handles the drawing of the bike network and intersections on the map.'}\n\nRelationships:\n- DrawNetworkLayer -> crate::app\n\nFunctionalities:\n- Draws the bike network\n- Handles color coding for different types of bike lanes\n- Thickens roads at low zoom levels\n- Draws intersections with appropriate colors\n\n# apps/game/src/ungap/predict.rs [3646 tokens]:\n\nDescription:\nThis file implements a state management system for predicting the impact of mode shifts in transportation, particularly focusing on biking versus driving.\n\nExternal Imports:\n- abstio\n- abstutil\n- geom\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n- crate::ungap\n\nClasses:\n- {'name': 'ShowGaps', 'description': 'Manages the display and interaction of the gap prediction state.'}\n- {'name': 'ModeShiftData', 'description': 'Holds and processes data related to mode shifts in transportation.'}\n- {'name': 'CandidateTrip', 'description': 'Represents a trip that could potentially shift from driving to biking.'}\n- {'name': 'Filters', 'description': 'Defines filtering criteria for candidate trips.'}\n- {'name': 'NetworkGaps', 'description': 'Stores information about gaps in the network based on filtered trips.'}\n- {'name': 'Results', 'description': 'Aggregates results from the analysis of candidate trips.'}\n\nRelationships:\n- ShowGaps -> app::App\n- ShowGaps -> ungap::Layers\n- ShowGaps -> ungap::Tab\n- ModeShiftData -> app::App\n- ModeShiftData -> Filters\n- ModeShiftData -> NetworkGaps\n- ModeShiftData -> Results\n- CandidateTrip -> PathRequest\n- Filters -> CandidateTrip\n- NetworkGaps -> RoadID\n- Results -> Distance\n\nFunctionalities:\n- Display and manage the state of gap predictions\n- Calculate potential mode shifts from driving to biking\n- Filter candidate trips based on user-defined criteria\n- Visualize gaps in the transportation network\n- Aggregate and present results of the analysis\n\n# apps/game/src/ungap/mod.rs [1416 tokens]:\n\nDescription:\nThis file defines the user interface and functionality for managing different tabs related to bike network exploration and planning.\n\nExternal Imports:\n- geom\n- map_gui\n- widgetry\n\nInternal Imports:\n- bike_network\n- explore\n- layers\n- predict\n- quick_sketch\n- trip\n- app\n\nClasses:\n- {'name': 'Tab', 'description': 'Represents different states of the user interface for bike network management.'}\n- {'name': 'TakeLayers', 'description': 'Trait for extracting layers from the current state.'}\n\nRelationships:\n- Tab -> ExploreMap\n- Tab -> Layers\n- Tab -> ModeShiftData\n- Tab -> RoutingPreferences\n- Tab -> quick_sketch::QuickSketch\n- Tab -> predict::ShowGaps\n- Tab -> trip::TripPlanner\n- TakeLayers -> Layers\n- App -> Tab\n\nFunctionalities:\n- Manage tabbed interface for exploring bike networks\n- Handle user actions and transitions between different states\n- Provide a mechanism to change maps and manage layers\n\n# apps/game/src/ungap/trip/results.rs [3767 tokens]:\n\nDescription:\nThis file implements route building and visualization functionalities for a biking trip application, including details about the route and statistics.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- super\n- crate::app\n\nClasses:\n- {'name': 'BuiltRoute', 'description': 'Holds the details and visual representation of a built route.'}\n- {'name': 'RouteDetails', 'description': 'Manages the routing details and statistics for a trip.'}\n- {'name': 'RouteStats', 'description': 'Stores statistical information about the route.'}\n\nRelationships:\n- BuiltRoute -> RouteDetails\n- RouteDetails -> RouteStats\n- RouteDetails -> super\n- RouteDetails -> crate::app\n\nFunctionalities:\n- Building routes based on waypoints\n- Calculating route statistics\n- Rendering route visualizations\n- Handling user interactions with route details\n- Displaying elevation profiles\n\n# apps/game/src/ungap/trip/mod.rs [2495 tokens]:\n\nDescription:\nThis file implements a trip planning feature for a mapping application, allowing users to manage waypoints and calculate routes based on preferences.\n\nExternal Imports:\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- ungap\n\nClasses:\n- {'name': 'TripPlanner', 'description': 'Manages the trip planning state, including waypoints and route calculations.'}\n- {'name': 'RoutingPreferences', 'description': 'Holds user preferences for routing options.'}\n\nRelationships:\n- TripPlanner -> TripManagement\n- TripPlanner -> RouteDetails\n- TripPlanner -> InputWaypoints\n- TripPlanner -> Layers\n- RoutingPreferences -> RoutingParams\n\nFunctionalities:\n- Manage waypoints and routes\n- Calculate main and alternate routes\n- Handle user input for routing preferences\n- Update UI components based on routing changes\n- Synchronize trip data with file management\n\n# apps/game/src/ungap/layers.rs [3921 tokens]:\n\nDescription:\nThis file implements a panel for managing toggleable layers in a mapping application focused on biking infrastructure.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::ungap::bike_network\n\nClasses:\n- {'name': 'Layers', 'description': 'Manages the display and interaction of various map layers related to biking.'}\n\nRelationships:\n- Layers -> DrawNetworkLayer\n- Layers -> DrawRoadLabels\n- DrawNetworkLayer <- Layers\n- DrawRoadLabels <- Layers\n\nFunctionalities:\n- Manage toggleable layers\n- Display road types and elevation data\n- Handle user interactions with the map\n- Update visual elements based on user input\n\n# apps/game/src/ungap/explore.rs [591 tokens]:\n\nDescription:\nThis file defines the ExploreMap state for exploring a map with layers and detailed lane information.\n\nExternal Imports:\n- geom\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::ungap\n\nClasses:\n- {'name': 'ExploreMap', 'description': 'Manages the state and UI for exploring the map with layers.'}\n\nRelationships:\n- ExploreMap -> Layers\n- ExploreMap -> Tab\n- ExploreMap <- TakeLayers\n- Tab -> ExploreMap\n- Layers -> ExploreMap\n\nFunctionalities:\n- Manage map exploration state\n- Display UI panels\n- Handle user interactions\n- Update URL based on canvas movement\n- Draw map layers and UI elements\n\n# apps/game/src/lib.rs [4805 tokens]:\n\nDescription:\nThis file serves as the main entry point for the A/B Street traffic simulator application, handling command-line arguments and initializing the application state.\n\nExternal Imports:\n- anyhow\n- log\n- structopt\n- abstio\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- app\n- challenges\n- common\n- debug\n- devtools\n- edit\n- id\n- info\n- layer\n- pregame\n- render\n- sandbox\n- ungap\n\nClasses:\n- {'name': 'Args', 'description': 'Handles command-line arguments for configuring the simulator.'}\n- {'name': 'Setup', 'description': 'Stores the configuration and state for initializing the application.'}\n- {'name': 'Mode', 'description': 'Enumerates different modes of operation for the application.'}\n\nRelationships:\n- Setup -> Args\n- Setup -> Mode\n- Mode -> GameplayMode\n- Setup -> Options\n- Setup -> Flags\n- Args -> Flags\n- Args -> Duration\n- Args -> ColorSchemeChoice\n- Args -> MapName\n- Args -> GameplayMode\n- Args -> SandboxMode\n- Args -> TitleScreen\n- Args -> Sim\n\nFunctionalities:\n- Initialize application settings\n- Parse command-line arguments\n- Configure application modes\n- Load maps and scenarios\n- Handle application state transitions\n- Manage user interface settings\n\n# apps/game/src/challenges/cutscene.rs [2002 tokens]:\n\nDescription:\nThis file implements a cutscene builder and player for a game, allowing for scripted dialogues and interactions between characters.\n\nExternal Imports:\n- map_gui\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'CutsceneBuilder', 'description': 'Constructs a cutscene with various scenes and dialogue.'}\n- {'name': 'CutscenePlayer', 'description': 'Handles the display and progression of the cutscene.'}\n- {'name': 'ShowMessage', 'description': 'Displays a message panel with an OK button.'}\n\nRelationships:\n- CutsceneBuilder -> Scene\n- CutscenePlayer -> Scene\n- CutscenePlayer -> CutsceneBuilder\n- ShowMessage -> Panel\n- ShowMessage <- Panel\n\nFunctionalities:\n- Build cutscenes with different character dialogues\n- Display cutscenes with navigation options\n- Show messages to the player with an OK confirmation\n\n# apps/game/src/challenges/mod.rs [2038 tokens]:\n\nDescription:\nThis file defines challenges and high scores for a gameplay module in a game application.\n\nExternal Imports:\n- std\n- geom\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::sandbox\n- crate::sandbox::gameplay\n\nClasses:\n- {'name': 'Challenge', 'description': 'Represents a gameplay challenge with its title, description, alias, gameplay mode, and optional cutscene.'}\n- {'name': 'HighScore', 'description': 'Stores high score information related to a gameplay challenge.'}\n- {'name': 'ChallengesPicker', 'description': 'Manages the selection and display of challenges and their stages.'}\n\nRelationships:\n- Challenge -> GameplayMode\n- Challenge -> crate::sandbox::gameplay\n- HighScore -> GameplayMode\n- ChallengesPicker -> Challenge\n- ChallengesPicker -> App\n\nFunctionalities:\n- Define gameplay challenges and stages\n- Record high scores for challenges\n- Display a picker for selecting challenges and their stages\n- Manage the transition between different gameplay states\n\n# apps/game/src/render/agents.rs [1763 tokens]:\n\nDescription:\nThis file manages the rendering and caching of agents in a simulation, including vehicles and pedestrians, based on the current simulation state and map.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::render\n\nClasses:\n- {'name': 'AgentCache', 'description': 'Handles caching and rendering of agents in the simulation.'}\n- {'name': 'UnzoomedAgents', 'description': 'Manages visibility settings for different types of unzoomed agents.'}\n\nRelationships:\n- AgentCache -> UnzoomedAgents\n- UnzoomedAgents <- AgentCache\n- AgentCache -> crate::render\n- crate::render <- AgentCache\n\nFunctionalities:\n- Caching of agents\n- Rendering of vehicles and pedestrians\n- Updating visibility settings for agents\n- Calculating drawable representations for unzoomed agents\n\n# apps/game/src/render/mod.rs [813 tokens]:\n\nDescription:\nThis file handles the rendering of game elements such as vehicles and pedestrians in a simulation environment.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- agents\n- bike\n- car\n- pedestrian\n\nClasses:\n- {'name': 'GameRenderable', 'description': 'A trait for rendering game objects with specific functionalities.'}\n- {'name': 'DrawBike', 'description': 'Handles the rendering of bike objects.'}\n- {'name': 'DrawCar', 'description': 'Handles the rendering of car objects.'}\n- {'name': 'DrawPedCrowd', 'description': 'Handles the rendering of a crowd of pedestrians.'}\n- {'name': 'DrawPedestrian', 'description': 'Handles the rendering of individual pedestrian objects.'}\n\nRelationships:\n- GameRenderable -> map_gui::render::Renderable\n- DrawBike -> DrawCar\n- DrawCar -> DrawBike\n- DrawPedCrowd -> DrawPedestrian\n\nFunctionalities:\n- Rendering game objects\n- Determining object outlines\n- Checking point containment within objects\n- Highlighting selected objects\n- Fading out unhighlighted entities\n\n# apps/game/src/render/car.rs [2180 tokens]:\n\nDescription:\nThis file defines the rendering logic for cars in a game simulation, including their appearance and behavior on the map.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- render\n\nClasses:\n- {'name': 'DrawCar', 'description': 'Handles the drawing and rendering of a car object in the simulation.'}\n\nRelationships:\n- DrawCar -> DrawCarInput\n- DrawCar -> Map\n- DrawCar -> Sim\n- DrawCar -> ColorScheme\n- DrawCar <- GameRenderable\n- DrawCar -> Tessellation\n- DrawCar -> Polygon\n- DrawCar -> PolyLine\n- DrawCar -> Distance\n\nFunctionalities:\n- Render car graphics\n- Handle car status and intent\n- Draw wheels and body of the car\n- Display labels and indicators for the car\n- Manage z-order for rendering\n\n# apps/game/src/render/pedestrian.rs [2312 tokens]:\n\nDescription:\nThis file handles the rendering of pedestrians and pedestrian crowds in a simulation environment.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::render\n\nClasses:\n- {'name': 'DrawPedestrian', 'description': 'Responsible for rendering individual pedestrians.'}\n- {'name': 'DrawPedCrowd', 'description': 'Responsible for rendering a group of pedestrians as a crowd.'}\n\nRelationships:\n- DrawPedestrian -> DrawPedestrianInput\n- DrawPedestrian -> Sim\n- DrawPedestrian -> ColorScheme\n- DrawPedCrowd -> DrawPedCrowdInput\n- DrawPedCrowd -> Map\n- DrawPedCrowd -> ColorScheme\n- DrawPedCrowd <- DrawPedestrian\n\nFunctionalities:\n- Rendering of individual pedestrians\n- Rendering of pedestrian crowds\n- Handling pedestrian attributes and states\n- Managing graphical representations of pedestrians and crowds\n\n# apps/game/src/info/building.rs [2384 tokens]:\n\nDescription:\nThis file provides functionality to display information about buildings and their occupants in a simulation environment.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- app\n- info\n- render\n\nClasses:\n- {'name': 'Widget', 'description': 'Represents a UI component used for displaying building information and occupants.'}\n\nRelationships:\n- info -> app\n- info -> info\n- info -> render\n- app -> sim\n- map_model -> sim\n\nFunctionalities:\n- Display building information\n- Display occupants in a building\n- Manage parking information\n- Show amenities related to buildings\n- Visualize pedestrian movements\n\n# apps/game/src/info/trip.rs [7291 tokens]:\n\nDescription:\nThis file manages the display and interaction of trip information within a simulation application.\n\nExternal Imports:\n- std\n- maplit\n- geom\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- app\n- common\n- info\n\nClasses:\n- {'name': 'OpenTrip', 'description': 'Represents the state of a trip, including whether to show details after changes and cached route information.'}\n\nRelationships:\n- OpenTrip -> app\n- OpenTrip -> sim\n- OpenTrip -> widgetry\n- app -> info\n- sim -> map_model\n- sim -> synthpop\n- widgetry -> geom\n\nFunctionalities:\n- Display ongoing trip details\n- Show future trip information\n- Render finished trip summaries\n- Handle cancelled trip notifications\n- Visualize trip problems and risks\n- Generate trip timelines and details\n\n# apps/game/src/info/person.rs [5556 tokens]:\n\nDescription:\nThis file manages the display and interaction of person-related information in a simulation, including trips, bio, schedule, and crowd details.\n\nExternal Imports:\n- std\n- rand\n- rand_xorshift\n- geom\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::info::building\n- crate::info::header_btns\n- crate::info::make_table\n- crate::info::make_tabs\n- crate::info::trip\n- crate::info::Details\n- crate::info::OpenTrip\n- crate::info::Tab\n\nFunctionalities:\n- Display person trips\n- Show person bio\n- Manage person schedule\n- Present crowd information\n- Handle parked car details\n- Render headers and tabs for person information\n\n# apps/game/src/info/transit.rs [3076 tokens]:\n\nDescription:\nThis file manages the display and interaction of transit stop and route information in a graphical user interface for a transportation simulation application.\n\nExternal Imports:\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- app\n- info\n\nClasses:\n- {'name': 'TransitStop', 'description': 'Represents a bus or transit stop in the simulation.'}\n- {'name': 'TransitRoute', 'description': 'Represents a route taken by transit vehicles.'}\n- {'name': 'Car', 'description': 'Represents a bus or transit vehicle in the simulation.'}\n\nRelationships:\n- TransitStop -> app\n- TransitRoute -> app\n- Car -> app\n- TransitStop -> map_model\n- TransitRoute -> map_model\n- Car -> sim\n\nFunctionalities:\n- Display transit stop details\n- Display transit route details\n- Show bus status\n- Manage interactions with transit vehicles\n- Visualize bus locations and routes\n\n# apps/game/src/info/mod.rs [7879 tokens]:\n\nDescription:\nThis file implements the InfoPanel for displaying various information about simulation entities in a traffic simulation application.\n\nExternal Imports:\n- std\n- widgetry\n- geom\n- map_model\n- sim\n- trip\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::debug\n- crate::edit\n- crate::layer\n- crate::sandbox\n- crate::ID\n- crate::trip\n- crate::building\n- crate::intersection\n- crate::lane\n- crate::parking_lot\n- crate::person\n- crate::transit\n\nClasses:\n- {'name': 'InfoPanel', 'description': 'Manages the display and interaction of the information panel in the simulation.'}\n- {'name': 'Tab', 'description': 'Represents different tabs in the InfoPanel, each corresponding to a specific type of information.'}\n- {'name': 'Details', 'description': 'Holds additional information and settings for the InfoPanel.'}\n- {'name': 'DataOptions', 'description': 'Encapsulates options for displaying data in the InfoPanel.'}\n- {'name': 'ProblemOptions', 'description': 'Encapsulates options for displaying problem data in the InfoPanel.'}\n\nRelationships:\n- InfoPanel -> Tab\n- InfoPanel -> Details\n- InfoPanel -> DataOptions\n- InfoPanel -> ProblemOptions\n- Tab -> App\n- Tab -> PersonID\n- Tab -> CarID\n- Tab -> BuildingID\n- Tab -> LaneID\n- Tab -> IntersectionID\n- Tab -> TransitStopID\n- Tab -> ParkingLotID\n- Tab -> TripID\n- Tab -> PedestrianID\n- Details -> ToggleZoomedBuilder\n- DataOptions -> Panel\n- ProblemOptions -> Panel\n\nFunctionalities:\n- Display information about simulation entities\n- Manage user interactions with the information panel\n- Provide options for filtering and displaying data\n- Handle transitions between different tabs of information\n- Draw tooltips and additional information on the map\n\n# apps/game/src/info/lane.rs [2288 tokens]:\n\nDescription:\nThis file provides functionality to display information, debug details, traffic data, and problems related to lanes in a traffic simulation application.\n\nExternal Imports:\n- abstutil\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- info\n\nClasses:\n- {'name': 'Widget', 'description': 'Represents a UI component for displaying lane information.'}\n- {'name': 'EventCtx', 'description': 'Context for handling events in the UI.'}\n- {'name': 'App', 'description': 'Main application structure that holds the simulation state.'}\n- {'name': 'Details', 'description': 'Holds detailed information for displaying in the UI.'}\n- {'name': 'LaneID', 'description': 'Identifier for a lane in the traffic simulation.'}\n\nRelationships:\n- Widget -> app\n- Widget -> info\n- EventCtx -> widgetry\n- App -> map_model\n- Details -> app\n- LaneID -> map_model\n\nFunctionalities:\n- Display lane information\n- Show debug details for lanes\n- Visualize traffic data\n- Identify and display lane problems\n\n# apps/game/src/info/intersection.rs [3454 tokens]:\n\nDescription:\nThis file provides functionality to display and manage information related to intersections in a traffic simulation application.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::info\n\nClasses:\n- {'name': 'App', 'description': 'Main application structure managing the traffic simulation.'}\n- {'name': 'Details', 'description': 'Structure holding details for the intersection view.'}\n- {'name': 'DataOptions', 'description': 'Options for displaying data related to intersections.'}\n- {'name': 'ProblemOptions', 'description': 'Options for displaying problems related to intersections.'}\n- {'name': 'Tab', 'description': 'Enumeration representing different tabs in the intersection view.'}\n\nRelationships:\n- App -> Details\n- Details -> Tab\n- DataOptions -> Tab\n- ProblemOptions -> Tab\n- Tab -> App\n\nFunctionalities:\n- Display intersection information\n- Manage traffic data\n- Visualize delays and demands\n- Handle user interactions for traffic signals\n- Show problems related to intersections\n\n# apps/game/src/info/debug.rs [267 tokens]:\n\nDescription:\nThis file provides a user interface for displaying information about a specific area in a map application.\n\nExternal Imports:\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::info\n\nClasses:\n- {'name': 'Widget', 'description': 'Represents a UI component for displaying information.'}\n- {'name': 'EventCtx', 'description': 'Context for handling events in the UI.'}\n- {'name': 'App', 'description': 'Main application structure that holds the state and data.'}\n- {'name': 'Details', 'description': 'Structure for holding detailed information about an area.'}\n\nRelationships:\n- Widget -> EventCtx\n- App -> Widget\n- Details -> Widget\n- App -> Details\n\nFunctionalities:\n- Display area information\n- Open area in OSM\n- Generate a table of OSM tags\n\n# apps/game/src/info/parking_lot.rs [643 tokens]:\n\nDescription:\nThis file provides functionality to display information about a parking lot, including its availability and capacity, within a graphical user interface.\n\nExternal Imports:\n- abstutil\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- info\n\nClasses:\n- {'name': 'ParkingLotID', 'description': 'Represents a unique identifier for a parking lot.'}\n- {'name': 'App', 'description': 'Main application structure that holds state and configuration.'}\n- {'name': 'Details', 'description': 'Holds details for the UI components.'}\n- {'name': 'Tab', 'description': 'Represents different tabs in the UI.'}\n\nRelationships:\n- info -> App\n- info -> Details\n- info -> ParkingLotID\n- info_body -> App\n- info_body -> ParkingLotID\n- header -> Details\n- header -> ParkingLotID\n- make_tabs -> Details\n\nFunctionalities:\n- Display parking lot information\n- Visualize parking spot availability\n- Manage UI components for parking lot details\n- Handle user interactions with the parking lot information\n\n# apps/game/src/edit/stop_signs.rs [1745 tokens]:\n\nDescription:\nThis file implements a stop sign editor for managing stop signs at intersections in a map application.\n\nExternal Imports:\n- std\n- maplit\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::edit\n- crate::sandbox\n\nClasses:\n- {'name': 'StopSignEditor', 'description': 'Handles the editing of stop signs at intersections.'}\n\nRelationships:\n- StopSignEditor -> App\n- StopSignEditor -> CommonState\n- StopSignEditor -> TrafficSignalEditor\n- StopSignEditor -> GameplayMode\n- StopSignEditor <- EditIntersectionControl\n- StopSignEditor <- ControlStopSign\n- StopSignEditor <- ControlTrafficSignal\n\nFunctionalities:\n- Create a new stop sign editor state\n- Handle user interactions for stop sign management\n- Draw stop signs and their states on the map\n- Apply map edits related to stop signs\n- Manage transitions between different states in the application.\n\n# apps/game/src/edit/traffic_signals/preview.rs [848 tokens]:\n\nDescription:\nThis file handles the preview functionality for traffic signals in a simulation environment.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::sandbox\n\nClasses:\n- {'name': 'PreviewTrafficSignal', 'description': 'Manages the state and UI for previewing traffic signals.'}\n\nRelationships:\n- PreviewTrafficSignal -> App\n- PreviewTrafficSignal -> TimePanel\n- PreviewTrafficSignal <- ChooseSomething\n- PreviewTrafficSignal -> Timer\n- PreviewTrafficSignal -> Duration\n- PreviewTrafficSignal -> IntersectionID\n- PreviewTrafficSignal -> GfxCtx\n- PreviewTrafficSignal -> EventCtx\n- PreviewTrafficSignal -> Panel\n\nFunctionalities:\n- Preview traffic signals\n- Manage simulation time\n- Handle user interactions\n- Display UI components\n\n# apps/game/src/edit/traffic_signals/picker.rs [810 tokens]:\n\nDescription:\nThis file implements a traffic signal picker interface for selecting and editing multiple traffic signals in a map application.\n\nExternal Imports:\n- std\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::edit\n- crate::sandbox\n\nClasses:\n- {'name': 'SignalPicker', 'description': 'Manages the state and UI for selecting and editing traffic signals.'}\n\nRelationships:\n- SignalPicker -> App\n- SignalPicker -> CommonState\n- SignalPicker -> TrafficSignalEditor\n- SignalPicker -> GameplayMode\n- App <- SignalPicker\n- CommonState <- SignalPicker\n- TrafficSignalEditor <- SignalPicker\n- GameplayMode <- SignalPicker\n\nFunctionalities:\n- Select multiple traffic signals\n- Add or remove intersections from selection\n- Display a panel with editing options\n- Draw selected intersections on the map\n\n# apps/game/src/edit/traffic_signals/mod.rs [7193 tokens]:\n\nDescription:\nThis file implements a traffic signal editor for a mapping application, allowing users to modify traffic signal stages and configurations.\n\nExternal Imports:\n- std\n- anyhow\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::edit\n- crate::sandbox\n- crate::edit::edits\n- crate::edit::gmns\n- crate::edit::offsets\n- crate::edit::picker\n- crate::edit::preview\n\nClasses:\n- {'name': 'TrafficSignalEditor', 'description': 'Manages the state and UI for editing traffic signals.'}\n- {'name': 'BundleEdits', 'description': 'Holds and manages edits for multiple traffic signals.'}\n\nRelationships:\n- TrafficSignalEditor -> BundleEdits\n- BundleEdits -> TrafficSignalEditor\n- TrafficSignalEditor -> App\n- TrafficSignalEditor -> CommonState\n- TrafficSignalEditor -> GameplayMode\n- TrafficSignalEditor -> TrafficSignalStyle\n- BundleEdits -> ControlTrafficSignal\n- BundleEdits -> Stage\n\nFunctionalities:\n- Edit traffic signal stages\n- Validate traffic signal configurations\n- Handle user interactions for traffic signal modifications\n- Manage undo and redo actions for signal edits\n- Display traffic signal information and tooltips\n\n# apps/game/src/edit/traffic_signals/offsets.rs [2296 tokens]:\n\nDescription:\nThis file manages the display and adjustment of traffic signal offsets in a graphical user interface.\n\nExternal Imports:\n- std\n- maplit\n- geom\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::edit::traffic_signals\n\nClasses:\n- {'name': 'ShowAbsolute', 'description': 'Handles the display and adjustment of absolute traffic signal offsets.'}\n- {'name': 'ShowRelative', 'description': 'Manages the display and adjustment of traffic signal offsets relative to a selected base signal.'}\n- {'name': 'TuneRelative', 'description': 'Facilitates the tuning of offsets between two selected traffic signals.'}\n\nRelationships:\n- ShowAbsolute -> fade_irrelevant\n- ShowRelative -> fade_irrelevant\n- TuneRelative -> fade_irrelevant\n- ShowAbsolute -> App\n- ShowRelative -> App\n- TuneRelative -> App\n- ShowAbsolute -> CommonState\n- ShowRelative -> CommonState\n- TuneRelative -> CommonState\n\nFunctionalities:\n- Display traffic signal offsets\n- Adjust traffic signal offsets\n- Select intersections for offset tuning\n- Update traffic signal offsets\n\n# apps/game/src/edit/traffic_signals/edits.rs [3172 tokens]:\n\nDescription:\nThis file manages the editing of traffic signal durations and configurations within a map application.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::edit::traffic_signals\n- crate::edit\n- crate::sandbox\n\nClasses:\n- {'name': 'ChangeDuration', 'description': 'Handles the user interface and logic for changing the duration of traffic signal stages.'}\n- {'name': 'TrafficSignalEditor', 'description': 'Facilitates the editing of traffic signal properties.'}\n- {'name': 'BundleEdits', 'description': 'Encapsulates a collection of edits to be applied to the traffic signal.'}\n\nRelationships:\n- ChangeDuration -> TrafficSignalEditor\n- ChangeDuration -> BundleEdits\n- TrafficSignalEditor -> BundleEdits\n- TrafficSignalEditor -> crate::app\n- BundleEdits -> crate::edit::traffic_signals\n\nFunctionalities:\n- Change traffic signal stage durations\n- Apply edits to traffic signals\n- Import traffic signal timing configurations\n- Convert traffic signals to stop signs\n- Manage traffic signal timing templates\n\n# apps/game/src/edit/roads.rs [8699 tokens]:\n\nDescription:\nThis file implements a road editor for modifying road attributes and lane configurations in a map application.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- common\n- edit\n- edit::zones\n\nClasses:\n- {'name': 'RoadEditor', 'description': 'Manages the editing of a specific road and its lanes.'}\n\nRelationships:\n- RoadEditor -> app\n- RoadEditor -> common\n- RoadEditor -> edit\n- RoadEditor -> edit::zones\n- app <- RoadEditor\n- common <- RoadEditor\n- edit <- RoadEditor\n- edit::zones <- RoadEditor\n\nFunctionalities:\n- Editing road attributes\n- Managing lane configurations\n- Handling user interactions for road editing\n- Implementing undo/redo functionality\n- Displaying road and lane information\n\n# apps/game/src/edit/mod.rs [7372 tokens]:\n\nDescription:\nThis file implements the editing mode for a map in a game, allowing users to modify various aspects of the map and manage proposals for changes.\n\nExternal Imports:\n- maplit\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n- crate::common\n- crate::debug\n- crate::sandbox\n- self::crosswalks\n- self::multiple_roads\n- self::roads\n- self::routes\n- self::stop_signs\n- self::traffic_signals\n- self::validate\n- self::zones\n\nClasses:\n- {'name': 'EditMode', 'description': 'Handles the state and functionalities of the map editing interface.'}\n- {'name': 'SaveEdits', 'description': 'Manages the saving of edits made to the map.'}\n- {'name': 'LoadEdits', 'description': 'Handles loading of previously saved map edits.'}\n- {'name': 'ConfirmDiscard', 'description': 'Prompts the user to confirm discarding unsaved changes.'}\n\nRelationships:\n- EditMode -> crate::app\n- EditMode -> crate::common\n- EditMode -> self::roads\n- EditMode -> self::routes\n- EditMode -> self::stop_signs\n- EditMode -> self::traffic_signals\n- EditMode -> self::validate\n- EditMode -> self::crosswalks\n- EditMode -> self::multiple_roads\n- SaveEdits -> crate::app\n- LoadEdits -> crate::app\n- ConfirmDiscard -> crate::app\n- SaveEdits -> EditMode\n- LoadEdits -> EditMode\n- ConfirmDiscard -> EditMode\n\nFunctionalities:\n- Editing map elements\n- Managing proposals for map changes\n- Saving and loading map edits\n- Confirming discard of unsaved changes\n\n# apps/game/src/edit/routes.rs [615 tokens]:\n\nDescription:\nThis file defines a RouteEditor state for editing transit route schedules in a graphical user interface.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::edit\n\nClasses:\n- {'name': 'RouteEditor', 'description': \"Manages the user interface and logic for editing a transit route's schedule.\"}\n\nRelationships:\n- RouteEditor -> App\n- RouteEditor -> EditCmd\n- RouteEditor -> TransitRouteID\n- RouteEditor -> apply_map_edits\n- App <- RouteEditor\n- EditCmd <- RouteEditor\n- TransitRouteID <- RouteEditor\n- apply_map_edits <- RouteEditor\n\nFunctionalities:\n- Create a user interface for editing transit route schedules\n- Handle user input for applying schedule changes\n- Update the transit route schedule based on user input\n\n# apps/game/src/edit/crosswalks.rs [737 tokens]:\n\nDescription:\nThis file implements a crosswalk editor for modifying pedestrian crossings at intersections in a map application.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::edit\n\nClasses:\n- {'name': 'CrosswalkEditor', 'description': 'Handles the state and UI for editing crosswalks at a specific intersection.'}\n\nRelationships:\n- CrosswalkEditor -> App\n- CrosswalkEditor -> apply_map_edits\n- app -> CrosswalkEditor\n- apply_map_edits -> CrosswalkEditor\n\nFunctionalities:\n- Create a new crosswalk editing state\n- Toggle crosswalk types between marked and unmarked\n- Render the crosswalk editor UI\n- Handle user interactions with the crosswalks\n\n# apps/game/src/edit/multiple_roads.rs [1905 tokens]:\n\nDescription:\nThis file manages the selection and editing of multiple road segments in a map editing application.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- common\n- edit\n\nClasses:\n- {'name': 'SelectSegments', 'description': 'Handles the selection of road segments to apply edits from a base road.'}\n\nRelationships:\n- SelectSegments -> App\n- SelectSegments -> Warping\n- SelectSegments -> apply_map_edits\n- SelectSegments -> MapEdits\n- SelectSegments -> EditRoad\n\nFunctionalities:\n- Select similar road segments\n- Apply lane configuration changes\n- Display selection panel\n- Handle user interactions for selecting/unselecting roads\n- Draw visual representation of selected roads\n\n# apps/game/src/edit/zones.rs [1605 tokens]:\n\nDescription:\nThis file implements a zone editor for managing restricted access zones in a map application.\n\nExternal Imports:\n- std\n- enumset\n- maplit\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::edit\n\nClasses:\n- {'name': 'ZoneEditor', 'description': 'Handles the state and UI for editing restricted access zones.'}\n\nRelationships:\n- ZoneEditor -> RoadSelector\n- ZoneEditor -> CommonState\n- ZoneEditor -> apply_map_edits\n- RoadSelector <- ZoneEditor\n- CommonState <- ZoneEditor\n- apply_map_edits <- ZoneEditor\n\nFunctionalities:\n- Editing restricted access zones\n- Managing road selections\n- Applying access restrictions\n- Displaying UI components for zone editing\n\n# apps/game/src/common/mod.rs [3408 tokens]:\n\nDescription:\nThis file manages the common state and interactions for a game simulation, including event handling, drawing on-screen displays, and managing information panels.\n\nExternal Imports:\n- std\n- geom\n- sim\n- widgetry\n\nInternal Imports:\n- app\n- info\n- sandbox\n- route_sketcher\n- select\n- warp\n- share\n\nClasses:\n- {'name': 'CommonState', 'description': 'Handles the common state, event processing, and drawing for the simulation.'}\n\nRelationships:\n- CommonState -> App\n- CommonState -> InfoPanel\n- CommonState -> ContextualActions\n- CommonState -> TimeWarpScreen\n- CommonState -> DebugWarp\n- CommonState -> route_sketcher\n- CommonState -> select\n- CommonState -> warp\n- CommonState -> share\n\nFunctionalities:\n- Event handling for user interactions\n- Drawing on-screen displays\n- Managing information panels\n- Debugging actions and state transitions\n- Launching and managing contextual actions\n\n# apps/game/src/common/route_sketcher.rs [2524 tokens]:\n\nDescription:\nThis file implements a route sketching tool for a map application, allowing users to create and modify routes by interacting with intersections.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'RouteSketcher', 'description': 'Handles the logic for sketching routes on a map, including adding waypoints and managing user interactions.'}\n- {'name': 'Route', 'description': 'Represents a route consisting of waypoints and the full path between them.'}\n- {'name': 'Mode', 'description': 'Defines the different states of the RouteSketcher during user interaction.'}\n\nRelationships:\n- RouteSketcher -> Route\n- RouteSketcher -> Mode\n- Route <- RouteSketcher\n- Mode <- RouteSketcher\n- RouteSketcher <- crate::app\n\nFunctionalities:\n- Sketching routes on a map\n- Adding waypoints to a route\n- Dragging waypoints to adjust routes\n- Displaying route previews\n- Handling user interactions for route management\n\n# apps/game/src/common/select.rs [2016 tokens]:\n\nDescription:\nThis file implements a tool for selecting multiple roads in a map interface.\n\nExternal Imports:\n- std\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n\nClasses:\n- {'name': 'RoadSelector', 'description': 'Handles the selection of roads and intersections on a map.'}\n- {'name': 'Mode', 'description': 'Defines the different modes of operation for the RoadSelector.'}\n\nRelationships:\n- RoadSelector -> app::App\n- RoadSelector -> common::CommonState\n- RoadSelector -> map_gui::tools\n- RoadSelector -> map_model::IntersectionID\n- RoadSelector -> map_model::RoadID\n\nFunctionalities:\n- Select multiple roads\n- Preview selected routes\n- Change selection modes\n- Draw selected elements on the map\n\n# apps/game/src/common/share.rs [1503 tokens]:\n\nDescription:\nThis file manages the sharing of proposals in a map application, allowing users to upload and share map edits via a URL.\n\nExternal Imports:\n- serde\n- std\n\nInternal Imports:\n- abstutil\n- map_gui\n- widgetry\n- crate::app\n\nClasses:\n- {'name': 'ShareProposal', 'description': 'Handles the creation and management of a shareable proposal URL.'}\n- {'name': 'UploadedProposals', 'description': 'Manages the loading and storing of uploaded proposal checksums.'}\n\nRelationships:\n- ShareProposal -> App\n- ShareProposal -> FutureLoader\n- ShareProposal -> PopupMsg\n- UploadedProposals -> abstio\n\nFunctionalities:\n- Creating a shareable URL for proposals\n- Uploading proposals to a server\n- Copying URLs to clipboard\n- Opening URLs in a browser\n- Loading and storing uploaded proposal checksums\n\n# apps/game/src/common/warp.rs [1972 tokens]:\n\nDescription:\nThis file implements functionality for warping to specific locations or objects in a game environment.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n- crate::info\n- crate::sandbox\n\nClasses:\n- {'name': 'Warping', 'description': 'Handles the state and logic for warping to a specific point in the game.'}\n- {'name': 'DebugWarp', 'description': 'Provides a debug interface for warping to objects by their IDs.'}\n\nRelationships:\n- Warping -> Warper\n- Warping -> PerMap\n- Warping -> SandboxMode\n- DebugWarp -> EventCtx\n- DebugWarp -> App\n- DebugWarp -> PopupMsg\n- DebugWarp -> SandboxMode\n- warp_to_id -> App\n- inner_warp_to_id -> App\n\nFunctionalities:\n- Warping to specific locations\n- Debugging warp functionality\n- User input handling for warping\n- Displaying information panels for game objects\n\n# apps/game/src/layer/parking.rs [2785 tokens]:\n\nDescription:\nThis file manages the parking occupancy and efficiency layers in a simulation application.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::layer\n- crate::render\n\nClasses:\n- {'name': 'Occupancy', 'description': 'Handles the display and management of parking occupancy data.'}\n- {'name': 'Efficiency', 'description': 'Manages the display and calculation of parking efficiency.'}\n- {'name': 'Loc', 'description': 'Represents the location of parking spots.'}\n\nRelationships:\n- Occupancy -> App\n- Occupancy -> EventCtx\n- Occupancy -> ToggleZoomed\n- Occupancy -> Panel\n- Occupancy -> ColorNetwork\n- Occupancy -> Counter\n- Occupancy -> Loc\n- Efficiency -> App\n- Efficiency -> EventCtx\n- Efficiency -> ToggleZoomed\n- Efficiency -> Panel\n- Efficiency -> ColorLegend\n- Efficiency -> PathRequest\n- Efficiency -> Duration\n- Loc -> ParkingSpot\n\nFunctionalities:\n- Display parking occupancy statistics\n- Toggle visibility of different parking types\n- Calculate and display parking efficiency\n- Manage user interactions with the parking layers\n- Draw visual representations of parking data\n\n# apps/game/src/layer/elevation.rs [2659 tokens]:\n\nDescription:\nThis file defines layers for visualizing steep streets and elevation contours on a map.\n\nExternal Imports:\n- geom\n- map_gui\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::layer\n\nClasses:\n- {'name': 'SteepStreets', 'description': 'Represents a layer that visualizes steep streets on a map.'}\n- {'name': 'ElevationContours', 'description': 'Represents a layer that visualizes elevation contours on a map.'}\n\nRelationships:\n- SteepStreets -> crate::app\n- SteepStreets -> crate::layer\n- ElevationContours -> crate::app\n- ElevationContours -> crate::layer\n\nFunctionalities:\n- Display steep streets with incline percentages\n- Show elevation contours based on intersection data\n- Provide tooltips for user interaction\n- Render panels with information and legends\n\n# apps/game/src/layer/population.rs [1282 tokens]:\n\nDescription:\nThis file defines a population map layer for visualizing agent locations and states in a simulation.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- sim\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::layer\n\nClasses:\n- {'name': 'PopulationMap', 'description': 'Represents a map layer that visualizes the population and their states.'}\n- {'name': 'Options', 'description': 'Holds configuration options for displaying the population map.'}\n\nRelationships:\n- PopulationMap -> App\n- PopulationMap -> Options\n- PopulationMap -> Layer\n- Options -> Panel\n\nFunctionalities:\n- Visualizing agent locations\n- Displaying population statistics\n- Handling user interactions for map options\n- Creating heatmaps based on agent density\n\n# apps/game/src/layer/pandemic.rs [1662 tokens]:\n\nDescription:\nThis file implements a pandemic simulation layer for a map application, allowing visualization of different states of individuals during a pandemic.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- sim\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::layer\n\nClasses:\n- {'name': 'Pandemic', 'description': 'Represents the pandemic simulation layer, handling the visualization and interaction of pandemic-related data.'}\n- {'name': 'Seir', 'description': 'An enumeration representing the different states of individuals in the pandemic simulation.'}\n- {'name': 'Options', 'description': 'A struct that holds configuration options for the pandemic visualization.'}\n\nRelationships:\n- Pandemic -> App\n- Pandemic -> Layer\n- Pandemic -> Options\n- Pandemic -> Seir\n- Options -> Seir\n- Options <- Pandemic\n\nFunctionalities:\n- Visualizes pandemic states on a map\n- Handles user interactions for filtering and displaying data\n- Generates heatmaps based on pandemic data\n- Updates visualization based on simulation time changes\n- Creates control panels for user settings\n\n# apps/game/src/layer/transit.rs [822 tokens]:\n\nDescription:\nThis file defines a TransitNetwork layer for visualizing transit routes and stops on a map.\n\nExternal Imports:\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::layer\n\nClasses:\n- {'name': 'TransitNetwork', 'description': 'Represents a layer for displaying the transit network on a map.'}\n\nRelationships:\n- TransitNetwork -> App\n- TransitNetwork -> Layer\n- TransitNetwork <- Layer\n\nFunctionalities:\n- Display transit routes\n- Toggle visibility of transit elements\n- Handle user interactions with the transit layer\n- Draw the transit network on the map\n\n# apps/game/src/layer/mod.rs [2179 tokens]:\n\nDescription:\nThis file defines a layer management system for a map-based application, allowing users to select and interact with various data layers.\n\nExternal Imports:\n- map_gui\n- sim\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::sandbox::dashboards\n- crate::sandbox::elevation\n- crate::sandbox::favorites\n- crate::sandbox::map\n- crate::sandbox::pandemic\n- crate::sandbox::parking\n- crate::sandbox::population\n- crate::sandbox::problems\n- crate::sandbox::problems_diff\n- crate::sandbox::traffic\n- crate::sandbox::transit\n\nClasses:\n- {'name': 'Layer', 'description': 'A trait that defines the interface for different map layers.'}\n- {'name': 'PickLayer', 'description': 'A struct that manages the selection and interaction of map layers.'}\n- {'name': 'LayerOutcome', 'description': 'An enum representing the possible outcomes of layer interactions.'}\n\nRelationships:\n- PickLayer -> Layer\n- LayerOutcome -> PickLayer\n- PickLayer -> crate::app::App\n- PickLayer -> crate::sandbox::dashboards\n- PickLayer -> crate::sandbox::elevation\n- PickLayer -> crate::sandbox::favorites\n- PickLayer -> crate::sandbox::map\n- PickLayer -> crate::sandbox::pandemic\n- PickLayer -> crate::sandbox::parking\n- PickLayer -> crate::sandbox::population\n- PickLayer -> crate::sandbox::problems\n- PickLayer -> crate::sandbox::problems_diff\n- PickLayer -> crate::sandbox::traffic\n- PickLayer -> crate::sandbox::transit\n\nFunctionalities:\n- Layer selection\n- Layer interaction handling\n- Dynamic layer updates\n- Panel management for layer options\n- Rendering of map layers\n\n# apps/game/src/layer/problems_diff.rs [1768 tokens]:\n\nDescription:\nThis file implements a relative problem map layer for visualizing changes in traffic problems before and after a proposal in a simulation environment.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n- crate::layer\n\nClasses:\n- {'name': 'RelativeProblemMap', 'description': 'Represents a map layer that visualizes the relative changes in traffic problems.'}\n- {'name': 'ProblemTypes', 'description': 'Manages the visibility of different types of problems in the map.'}\n\nRelationships:\n- RelativeProblemMap -> Options\n- RelativeProblemMap -> ProblemTypes\n- ProblemTypes -> Problem\n\nFunctionalities:\n- Visualizing changes in traffic problems\n- Managing problem visibility options\n- Handling user interactions with the map layer\n- Displaying tooltips with problem statistics\n- Drawing the map layer and its controls\n\n# apps/game/src/layer/favorites.rs [727 tokens]:\n\nDescription:\nThis file manages a set of favorite buildings for a player, allowing them to add, remove, and check favorites, and displays them on a map layer.\n\nExternal Imports:\n- serde\n- abstutil\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::layer\n\nClasses:\n- {'name': 'Favorites', 'description': 'Handles the storage and management of favorite buildings.'}\n- {'name': 'ShowFavorites', 'description': 'Displays the favorite buildings on the map.'}\n\nRelationships:\n- Favorites -> crate::app\n- Favorites -> crate::layer\n- ShowFavorites -> crate::app\n- ShowFavorites -> crate::layer\n\nFunctionalities:\n- Load and persist favorite buildings\n- Check if a building is a favorite\n- Add a building to favorites\n- Remove a building from favorites\n- Display favorite buildings on a map layer\n\n# apps/game/src/layer/traffic.rs [5826 tokens]:\n\nDescription:\nThis file implements various layers for visualizing traffic-related data in a simulation environment.\n\nExternal Imports:\n- std\n- anyhow\n- maplit\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n- crate::layer\n- crate::render\n\nClasses:\n- {'name': 'Backpressure', 'description': 'Represents a layer that visualizes backpressure on roads based on active trips.'}\n- {'name': 'Throughput', 'description': 'Represents a layer that visualizes the throughput of agents on roads and intersections.'}\n- {'name': 'CompareThroughput', 'description': 'Represents a layer that compares throughput before and after a proposal.'}\n- {'name': 'TrafficJams', 'description': 'Represents a layer that visualizes traffic jams based on intersection delays.'}\n- {'name': 'Delay', 'description': 'Represents a layer that shows how long each agent has been waiting.'}\n- {'name': 'PedestrianCrowding', 'description': 'Represents a layer that visualizes pedestrian crowding based on density.'}\n\nRelationships:\n- Backpressure -> crate::app\n- Backpressure -> crate::layer\n- Throughput -> crate::app\n- Throughput -> crate::layer\n- Throughput -> crate::render\n- CompareThroughput -> crate::app\n- CompareThroughput -> crate::layer\n- TrafficJams -> crate::app\n- TrafficJams -> crate::layer\n- Delay -> crate::app\n- Delay -> crate::layer\n- PedestrianCrowding -> crate::app\n- PedestrianCrowding -> crate::layer\n\nFunctionalities:\n- Visualizing traffic data\n- Displaying agent throughput\n- Comparing traffic conditions\n- Identifying traffic jams\n- Showing delays for agents\n- Visualizing pedestrian density\n\n# apps/game/src/layer/map.rs [2635 tokens]:\n\nDescription:\nThis file implements layers for visualizing cycling activity and other related map features in a simulation application.\n\nExternal Imports:\n- maplit\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n- crate::layer\n\nClasses:\n- {'name': 'BikeActivity', 'description': 'Handles the cycling activity layer, including drawing and event management.'}\n- {'name': 'Static', 'description': 'Represents static layers for displaying various map features like edits and amenities.'}\n\nRelationships:\n- BikeActivity -> crate::app\n- BikeActivity -> crate::layer\n- Static -> crate::app\n- Static -> crate::layer\n\nFunctionalities:\n- Display cycling activity statistics\n- Show tooltips for cycling throughput\n- Draw static map features\n- Manage events for layers\n- Visualize amenities and road conditions\n\n# apps/game/src/layer/problems.rs [2148 tokens]:\n\nDescription:\nThis file implements a problem map layer for visualizing and analyzing trip-related problems in a simulation environment.\n\nExternal Imports:\n- std\n- anyhow\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- problems_diff\n- app\n- layer\n\nClasses:\n- {'name': 'ProblemMap', 'description': 'Represents a map layer that visualizes problems encountered during trips.'}\n- {'name': 'Options', 'description': 'Holds configuration options for displaying problems on the map.'}\n\nRelationships:\n- ProblemMap -> Options\n- Options <- ProblemMap\n- ProblemMap -> app\n- ProblemMap -> problems_diff\n- Options -> problems_diff\n\nFunctionalities:\n- Display problems on a map\n- Export problem data to CSV\n- Handle user interactions for filtering and visualizing problems\n- Manage visualization options including heatmaps and time ranges\n\n# apps/game/src/devtools/collisions.rs [2142 tokens]:\n\nDescription:\nThis file implements a viewer for collision data in a game, allowing users to filter and visualize collisions on a map.\n\nExternal Imports:\n- abstutil\n- collisions\n- geom\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n\nClasses:\n- {'name': 'CollisionsViewer', 'description': 'Manages the state and UI for displaying collision data.'}\n- {'name': 'Filters', 'description': 'Handles filtering logic for collision data based on user input.'}\n\nRelationships:\n- CollisionsViewer -> Filters\n- Filters <- CollisionsViewer\n- CollisionsViewer -> ID\n- CollisionsViewer -> App\n- Filters -> CollisionDataset\n\nFunctionalities:\n- Load collision data\n- Filter collisions based on criteria\n- Visualize collisions on a map\n- Manage user interface for collision viewer\n\n# apps/game/src/devtools/compare_counts.rs [575 tokens]:\n\nDescription:\nThis file implements a state for comparing traffic counts from two different sources using a graphical interface.\n\nExternal Imports:\n- abstutil\n- map_gui\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'GenericCompareCounts', 'description': 'Manages the state for comparing traffic counts.'}\n\nRelationships:\n- GenericCompareCounts -> CompareCounts\n- GenericCompareCounts -> App\n- GenericCompareCounts -> TrafficCounts\n- GenericCompareCounts -> PopupMsg\n\nFunctionalities:\n- Load traffic count data from files\n- Display a comparison interface\n- Handle user interactions for traffic count comparison\n- Render the comparison results\n\n# apps/game/src/devtools/polygon.rs [525 tokens]:\n\nDescription:\nThis file implements a polygon editor for creating and exporting geographical boundaries in GeoJSON format.\n\nExternal Imports:\n- geom\n- map_gui\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'PolygonEditor', 'description': 'Handles the creation and management of a polygon editing interface.'}\n\nRelationships:\n- PolygonEditor -> EditPolygon\n- PolygonEditor -> App\n- PolygonEditor -> LonLat\n\nFunctionalities:\n- Create a polygon editing interface\n- Export polygon data as GeoJSON\n- Handle user interactions for polygon editing\n\n# apps/game/src/devtools/kml.rs [3374 tokens]:\n\nDescription:\nThis file implements a KML viewer for visualizing geographical data in various formats.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- kml\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'ViewKML', 'description': 'Handles the state and rendering of KML objects.'}\n- {'name': 'Object', 'description': 'Represents a geographical object with a polygon, color, and attributes.'}\n\nRelationships:\n- ViewKML -> crate::app\n- Object -> geom\n- ViewKML -> kml\n- ViewKML -> map_gui\n- ViewKML -> map_model\n\nFunctionalities:\n- Load and display KML, CSV, and GeoJSON data\n- Query and filter geographical objects\n- Handle user interactions and mouse events\n- Render selected objects and their attributes\n\n# apps/game/src/devtools/destinations.rs [1241 tokens]:\n\nDescription:\nThis file implements a state for visualizing popular destinations based on trip data in a map application.\n\nExternal Imports:\n- abstutil\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n\nClasses:\n- {'name': 'PopularDestinations', 'description': 'Manages the state and visualization of popular destinations on a map.'}\n\nRelationships:\n- PopularDestinations -> crate::ID\n- PopularDestinations -> crate::app\n\nFunctionalities:\n- Count trips to buildings\n- Generate heatmap visualization\n- Display breakdown of destination types\n- Handle user interactions with the UI\n- Render building information on selection\n\n# apps/game/src/devtools/story.rs [2929 tokens]:\n\nDescription:\nThis file implements a story map editor tool that allows users to place markers and free-hand shapes on a map and label them.\n\nExternal Imports:\n- serde\n- geom\n- map_gui\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'StoryMapEditor', 'description': 'Manages the state and UI for editing a story map.'}\n- {'name': 'RecordedStoryMap', 'description': 'Struct for serializing and deserializing story maps.'}\n- {'name': 'StoryMap', 'description': 'Represents a story map with markers and their labels.'}\n- {'name': 'Marker', 'description': 'Represents a single marker with points and a label.'}\n- {'name': 'EditingMarker', 'description': 'Handles the editing state of a specific marker.'}\n- {'name': 'DrawFreehand', 'description': 'Handles the drawing of freehand shapes on the map.'}\n\nRelationships:\n- StoryMapEditor -> crate::app\n- EditingMarker -> StoryMapEditor\n- DrawFreehand -> StoryMapEditor\n- StoryMap -> RecordedStoryMap\n- Marker -> StoryMap\n\nFunctionalities:\n- Creating and managing story maps\n- Loading and saving story maps\n- Adding and editing markers\n- Drawing freehand shapes on the map\n- Displaying and updating the UI for the editor\n\n# apps/game/src/devtools/mod.rs [1364 tokens]:\n\nDescription:\nThis file contains the implementation of a development tools mode for the A/B Street game, providing various experimental tools and functionalities.\n\nExternal Imports:\n- abstutil\n- geom\n- map_gui\n- widgetry\n\nInternal Imports:\n- app\n- collisions\n- compare_counts\n- destinations\n- kml\n- polygon\n- scenario\n- story\n\nClasses:\n- {'name': 'DevToolsMode', 'description': 'Manages the state and UI for the development tools in the A/B Street game.'}\n\nRelationships:\n- DevToolsMode -> App\n- DevToolsMode -> CityPicker\n- DevToolsMode -> PolygonEditor\n- DevToolsMode -> ScenarioManager\n- DevToolsMode -> ViewKML\n- DevToolsMode -> StoryMapEditor\n- DevToolsMode -> CollisionsViewer\n- DevToolsMode -> Executable\n- App <- DevToolsMode\n- CityPicker <- DevToolsMode\n- PolygonEditor <- DevToolsMode\n- ScenarioManager <- DevToolsMode\n- ViewKML <- DevToolsMode\n- StoryMapEditor <- DevToolsMode\n- CollisionsViewer <- DevToolsMode\n- Executable <- DevToolsMode\n\nFunctionalities:\n- Change color scheme\n- Display advanced tools panel\n- Handle user interactions for various tools\n- Open external applications\n- Load and manage scenarios\n- Edit and draw polygons\n- View KML files\n- Manage story maps\n- View collision data\n\n# apps/game/src/devtools/scenario.rs [802 tokens]:\n\nDescription:\nThis file manages the scenario state and visualization in a game application, including displaying parked cars per building and popular destinations.\n\nExternal Imports:\n- abstutil\n- map_gui\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::devtools::destinations\n\nClasses:\n- {'name': 'ScenarioManager', 'description': 'Manages the scenario state and UI for displaying scenario details and interactions.'}\n\nRelationships:\n- ScenarioManager -> Scenario\n- ScenarioManager -> ColorDiscrete\n- ScenarioManager -> PopularDestinations\n- Scenario -> count_parked_cars_per_bldg\n\nFunctionalities:\n- Manage scenario state\n- Display parked cars per building\n- Handle user interactions\n- Visualize scenario details\n- Navigate to popular destinations\n\n# apps/game/src/sandbox/speed.rs [4195 tokens]:\n\nDescription:\nThis file defines a TimePanel class that manages the simulation time controls and displays related information in a game sandbox environment.\n\nExternal Imports:\n- abstutil\n- geom\n- sim\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::sandbox\n- crate::sandbox::time_warp\n\nClasses:\n- {'name': 'TimePanel', 'description': 'Manages the simulation time controls and displays related information.'}\n- {'name': 'SpeedSetting', 'description': 'Defines different speed settings for the simulation.'}\n\nRelationships:\n- TimePanel -> App\n- TimePanel -> GameplayMode\n- TimePanel -> SandboxMode\n- TimePanel -> JumpToTime\n- TimePanel -> Warping\n- TimePanel -> TimeWarpScreen\n- SpeedSetting -> TimePanel\n\nFunctionalities:\n- Manage simulation time settings\n- Display time-related information\n- Handle user input for time control\n- Update simulation state based on time settings\n- Visualize trips completion progress\n\n# apps/game/src/sandbox/turn_explorer.rs [1589 tokens]:\n\nDescription:\nThis file implements a tool to explore all of the turns from a single lane in a traffic simulation application.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'TurnExplorer', 'description': 'A tool to explore and visualize turns from a specific lane.'}\n\nRelationships:\n- TurnExplorer -> App\n- TurnExplorer -> LaneID\n- TurnExplorer -> PathConstraints\n- TurnExplorer -> TurnType\n\nFunctionalities:\n- Explore turns from a lane\n- Visualize current and conflicting turns\n- Display penalties for turns\n- Navigate between turns\n\n# apps/game/src/sandbox/time_warp.rs [3341 tokens]:\n\nDescription:\nThis file implements a time-warping feature in a simulation game, allowing users to jump to specific times or delays.\n\nExternal Imports:\n- anyhow\n- instant\n- abstutil\n- geom\n- map_gui\n- widgetry\n\nInternal Imports:\n- app\n- common\n- sandbox\n\nClasses:\n- {'name': 'JumpToTime', 'description': 'Handles the user interface and logic for jumping to a specific time in the simulation.'}\n- {'name': 'TimeWarpScreen', 'description': 'Displays a screen for the time-warping process, showing progress and allowing cancellation.'}\n\nRelationships:\n- JumpToTime -> App\n- JumpToTime -> GameplayMode\n- JumpToTime -> SandboxMode\n- TimeWarpScreen -> App\n- TimeWarpScreen -> FindDelayedIntersections\n- TimeWarpScreen -> SandboxMode\n- TimeWarpScreen -> JumpToTime\n\nFunctionalities:\n- User interface for selecting a time to jump to\n- Time manipulation in a simulation\n- Displaying progress during time warp\n- Handling user inputs for time adjustments\n\n# apps/game/src/sandbox/mod.rs [5592 tokens]:\n\nDescription:\nThis file implements the sandbox mode for a simulation game, allowing users to interact with and manipulate the game environment.\n\nExternal Imports:\n- anyhow\n- maplit\n- geom\n- map_gui\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- app\n- common\n- debug\n- edit\n- info\n- layer\n- pregame\n- render\n- gameplay\n- minimap\n- misc_tools\n- speed\n- time_warp\n- turn_explorer\n- dashboards\n\nClasses:\n- {'name': 'SandboxMode', 'description': 'Manages the state and controls of the sandbox mode in the game.'}\n- {'name': 'SandboxControls', 'description': 'Handles the various control panels and UI elements in the sandbox mode.'}\n- {'name': 'SandboxLoader', 'description': 'Loads maps and scenarios asynchronously for the sandbox mode.'}\n- {'name': 'BackToTitleScreen', 'description': 'Handles the transition back to the title screen from the sandbox mode.'}\n- {'name': 'Actions', 'description': 'Manages contextual actions available to the user in the sandbox mode.'}\n\nRelationships:\n- SandboxMode -> gameplay::GameplayState\n- SandboxMode -> SandboxControls\n- SandboxMode -> SandboxLoader\n- SandboxMode -> Actions\n- SandboxControls -> CommonState\n- SandboxControls -> RoutePreview\n- SandboxControls -> TimePanel\n- SandboxControls -> Minimap\n- SandboxLoader -> GameplayMode\n- Actions -> GameplayMode\n- Actions -> Favorites\n- Actions -> EditMode\n- Actions -> TrafficSignalEditor\n- Actions -> StopSignEditor\n- Actions -> RoadEditor\n- Actions -> TurnExplorer\n\nFunctionalities:\n- Initialize and manage the sandbox mode\n- Load maps and scenarios\n- Handle user interactions and events\n- Manage UI components and controls\n- Provide contextual actions based on game state\n\n# apps/game/src/sandbox/dashboards/trip_problems.rs [4302 tokens]:\n\nDescription:\nThe test file covers the functionality of the trip problem filtering and bucketization logic.\n\nExternal Imports:\n- abstutil\n- geom\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- App\n- EventCtx\n\nTest Cases:\n- Bucketization of isizes\n- Handling of empty isizes\n- Bucketization with small isizes\n\n# apps/game/src/sandbox/dashboards/mode_shift.rs [2483 tokens]:\n\nDescription:\nThis file implements a dashboard for analyzing and visualizing the transformation of driving trips into cycling trips.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::sandbox::dashboards::generic_trip_table\n- crate::sandbox::dashboards::DashTab\n\nClasses:\n- {'name': 'ModeShift', 'description': 'Manages the state and UI for the mode shift dashboard.'}\n- {'name': 'Entry', 'description': 'Represents a trip entry with estimated times and distances.'}\n- {'name': 'Filters', 'description': 'Holds filtering criteria for trip entries.'}\n\nRelationships:\n- ModeShift -> DashTab\n- ModeShift -> Table\n- ModeShift -> Entry\n- ModeShift -> Filters\n- Table -> Entry\n- Table -> Filters\n- Entry -> TripID\n- Filters -> Duration\n- Filters -> Distance\n\nFunctionalities:\n- Display a table of trip entries\n- Filter trip entries based on user-defined criteria\n- Show gaps in cycling infrastructure\n- Visualize estimated times and distances for trips\n- Handle user interactions with the dashboard\n\n# apps/game/src/sandbox/dashboards/selector.rs [785 tokens]:\n\nDescription:\nThis file implements a rectangular region selector for a graphical user interface.\n\nExternal Imports:\n- std\n- geom\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'RectangularSelector', 'description': 'Handles the state and behavior of a rectangular selection tool in the UI.'}\n\nRelationships:\n- RectangularSelector -> App\n- RectangularSelector <- Panel\n- RectangularSelector -> Polygon\n- RectangularSelector -> Pt2D\n- RectangularSelector -> EventCtx\n- RectangularSelector -> GfxCtx\n\nFunctionalities:\n- Create a rectangular selection area\n- Handle mouse events for selection\n- Draw the selection area on the canvas\n- Provide options to apply or clear the selection\n\n# apps/game/src/sandbox/dashboards/misc.rs [1814 tokens]:\n\nDescription:\nThis file implements dashboard functionalities for visualizing active traffic and transit routes in a simulation application.\n\nExternal Imports:\n- abstutil\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- info\n- sandbox\n\nClasses:\n- {'name': 'ActiveTraffic', 'description': 'Manages the active traffic dashboard and visualizations.'}\n- {'name': 'TransitRoutes', 'description': 'Handles the transit routes dashboard and displays boarding, alighting, and waiting statistics.'}\n\nRelationships:\n- ActiveTraffic -> app\n- ActiveTraffic -> sandbox\n- TransitRoutes -> app\n- TransitRoutes -> sandbox\n- TransitRoutes -> info\n- TransitRoutes <- ActiveTraffic\n\nFunctionalities:\n- Display active traffic statistics\n- Visualize transit route data\n- Provide user interaction for selecting routes\n- Search functionality for transit routes\n\n# apps/game/src/sandbox/dashboards/mod.rs [808 tokens]:\n\nDescription:\nThis file defines the dashboard tabs for a game application, allowing users to switch between different data visualizations and functionalities.\n\nExternal Imports:\n- widgetry\n\nInternal Imports:\n- app\n- commuter\n- generic_trip_table\n- misc\n- mode_shift\n- parking_overhead\n- risks\n- selector\n- traffic_signals\n- travel_times\n- trip_problems\n- trip_table\n\nClasses:\n- {'name': 'DashTab', 'description': 'An enumeration representing different tabs in the dashboard.'}\n\nRelationships:\n- DashTab -> commuter::CommuterPatterns\n- DashTab -> traffic_signals::TrafficSignalDemand\n- DashTab -> trip_table::TripTable\n- DashTab -> travel_times::TravelTimes\n- DashTab -> risks::RiskSummaries\n- DashTab -> parking_overhead::ParkingOverhead\n- DashTab -> misc::ActiveTraffic\n- DashTab -> misc::TransitRoutes\n- DashTab -> mode_shift::ModeShift\n- app -> DashTab\n\nFunctionalities:\n- Display dashboard tabs\n- Switch between different data visualizations\n- Manage user interactions with dashboard\n- Handle state transitions for different dashboard views\n\n# apps/game/src/sandbox/dashboards/travel_times.rs [4742 tokens]:\n\nDescription:\nThis file implements a dashboard for analyzing travel times of trips in a simulation, allowing users to filter and visualize trip data.\n\nExternal Imports:\n- std\n- anyhow\n- abstutil\n- geom\n- map_gui\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- super::trip_problems\n- crate::app\n- crate::sandbox::dashboards::generic_trip_table\n- crate::sandbox::dashboards::DashTab\n\nClasses:\n- {'name': 'TravelTimes', 'description': 'Manages the state and UI for the travel times dashboard.'}\n- {'name': 'Filter', 'description': 'Encapsulates filtering criteria for trip data.'}\n\nRelationships:\n- TravelTimes -> Filter\n- Filter -> TripProblemFilter\n- TravelTimes -> DashTab\n- TravelTimes -> generic_trip_table\n\nFunctionalities:\n- Display travel time analytics\n- Filter trip data based on user criteria\n- Export trip data to CSV\n- Visualize trip time changes with summary boxes and plots\n- Manage user interactions with the dashboard\n\n# apps/game/src/sandbox/dashboards/parking_overhead.rs [1760 tokens]:\n\nDescription:\nThis file implements a dashboard for analyzing parking overhead in trips within a simulation application.\n\nExternal Imports:\n- geom\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::sandbox::dashboards::generic_trip_table\n- crate::sandbox::dashboards::DashTab\n\nClasses:\n- {'name': 'ParkingOverhead', 'description': 'Manages the state and rendering of the parking overhead dashboard.'}\n- {'name': 'Entry', 'description': \"Represents a single trip's data including durations and overhead percentage.\"}\n- {'name': 'Filters', 'description': 'Holds filter options for the trip data displayed in the table.'}\n\nRelationships:\n- ParkingOverhead -> DashTab\n- ParkingOverhead -> Table\n- ParkingOverhead -> Entry\n- ParkingOverhead -> Filters\n- Entry -> Duration\n- Filters -> Table\n- produce_raw_data -> Entry\n- make_table -> Table\n- make_table -> Filters\n\nFunctionalities:\n- Display trip data in a table format\n- Filter trips based on starting and ending locations\n- Calculate and display overhead percentage for trips\n- Render a dashboard panel for user interaction\n- Handle user events and interactions with the dashboard\n\n# apps/game/src/sandbox/dashboards/risks.rs [1580 tokens]:\n\nDescription:\nThis file implements a user interface for displaying and exporting risk summaries related to trips in a simulation application.\n\nExternal Imports:\n- anyhow\n- abstutil\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- app\n- sandbox::dashboards::generic_trip_table\n- sandbox::dashboards::trip_problems\n\nClasses:\n- {'name': 'RiskSummaries', 'description': 'Manages the state and UI for displaying risk summaries of trips.'}\n- {'name': 'Filter', 'description': 'Filters trip problems based on mode and inclusion of trips without changes.'}\n\nRelationships:\n- RiskSummaries -> Panel\n- RiskSummaries -> Filter\n- Filter -> TripProblemFilter\n- RiskSummaries -> DashTab\n- RiskSummaries -> PopupMsg\n- RiskSummaries -> export_problems\n- app -> RiskSummaries\n- sandbox::dashboards::trip_problems -> Filter\n\nFunctionalities:\n- Display risk summaries for pedestrian and cyclist trips\n- Filter trip problems based on user selections\n- Export trip problem data to CSV format\n- Handle user interactions and state transitions in the UI\n\n# apps/game/src/sandbox/dashboards/traffic_signals.rs [1711 tokens]:\n\nDescription:\nThis file manages the traffic signal demand visualization and interaction in a simulation environment.\n\nExternal Imports:\n- abstutil\n- geom\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::sandbox::dashboards\n\nClasses:\n- {'name': 'TrafficSignalDemand', 'description': 'Handles the state and visualization of traffic signal demand.'}\n- {'name': 'Demand', 'description': 'Stores and processes demand data for traffic movements.'}\n\nRelationships:\n- TrafficSignalDemand -> Demand\n- Demand <- TrafficSignalDemand\n- TrafficSignalDemand -> App\n- TrafficSignalDemand -> DashTab\n- Demand -> App\n\nFunctionalities:\n- Visualizing traffic signal demand\n- Adjusting time for demand analysis\n- Handling user input for interaction\n- Computing demand from simulation data\n\n# apps/game/src/sandbox/dashboards/trip_table.rs [5237 tokens]:\n\nDescription:\nThis file implements a trip table for managing and displaying trip data in a dashboard interface.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- super::generic_trip_table\n- super::selector\n- super::DashTab\n- crate::app\n- crate::common\n\nClasses:\n- {'name': 'TripTable', 'description': 'Manages the trip dashboard interface and handles user interactions.'}\n- {'name': 'FinishedTrip', 'description': 'Represents data for a finished trip.'}\n- {'name': 'CancelledTrip', 'description': 'Represents data for a cancelled trip.'}\n- {'name': 'UnfinishedTrip', 'description': 'Represents data for an unfinished trip.'}\n- {'name': 'Filters', 'description': 'Holds filter criteria for displaying trips.'}\n\nRelationships:\n- TripTable -> DashTab\n- TripTable -> FinishedTrip\n- TripTable -> CancelledTrip\n- TripTable -> UnfinishedTrip\n- TripTable -> Filters\n- FinishedTrip <- TripTable\n- CancelledTrip <- TripTable\n- UnfinishedTrip <- TripTable\n- Filters <- TripTable\n- super::generic_trip_table -> TripTable\n- super::selector -> TripTable\n- super::DashTab -> TripTable\n- crate::app -> TripTable\n- crate::common -> TripTable\n\nFunctionalities:\n- Display trip data in a tabular format\n- Filter trips based on user-defined criteria\n- Handle user interactions with the trip table\n- Manage different states of trip data (finished, cancelled, unfinished)\n\n# apps/game/src/sandbox/dashboards/commuter.rs [5766 tokens]:\n\nDescription:\nThis file implements a dashboard for visualizing commuter patterns based on trips between blocks in a city map.\n\nExternal Imports:\n- std\n- anyhow\n- maplit\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::sandbox::dashboards\n\nClasses:\n- {'name': 'CommuterPatterns', 'description': 'Manages the state and visualization of commuter patterns between blocks.'}\n- {'name': 'Block', 'description': 'Represents a geographical block containing buildings and borders.'}\n- {'name': 'Filter', 'description': 'Defines criteria for filtering trips based on various parameters.'}\n- {'name': 'PanelState', 'description': 'Holds the state of the panel displaying trip statistics.'}\n- {'name': 'Loop', 'description': 'Represents a collection of buildings and roads forming a neighborhood block.'}\n\nRelationships:\n- CommuterPatterns -> Block\n- CommuterPatterns -> Filter\n- CommuterPatterns -> PanelState\n- CommuterPatterns -> Loop\n- Block <- CommuterPatterns\n- Filter <- CommuterPatterns\n- PanelState <- CommuterPatterns\n- Loop <- CommuterPatterns\n- crate::app -> CommuterPatterns\n- crate::common -> CommuterPatterns\n- crate::sandbox::dashboards -> CommuterPatterns\n\nFunctionalities:\n- Grouping buildings into blocks\n- Calculating trip statistics between blocks\n- Rendering visual representations of blocks and trips\n- Filtering trips based on user-defined criteria\n- Handling user interactions with the dashboard panel\n\n# apps/game/src/sandbox/dashboards/generic_trip_table.rs [812 tokens]:\n\nDescription:\nThis file handles the visualization and interaction of trip data within a sandbox environment in a simulation application.\n\nExternal Imports:\n- geom\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- app\n- common\n- info\n- sandbox\n\nClasses:\n- {'name': 'Transition', 'description': 'Manages state transitions within the application.'}\n- {'name': 'GfxCtx', 'description': 'Handles graphics context for rendering.'}\n- {'name': 'GeomBatch', 'description': 'Batch processing for geometric shapes.'}\n- {'name': 'Panel', 'description': 'Represents a UI panel for displaying information.'}\n\nRelationships:\n- Transition -> app\n- GfxCtx -> widgetry\n- GeomBatch -> widgetry\n- Panel -> widgetry\n- app -> common\n- app -> info\n- app -> sandbox\n\nFunctionalities:\n- Open trip transition handling\n- Trip preview rendering\n- Route previewing\n- Marker placement for trip start and end\n\n# apps/game/src/sandbox/gameplay/tutorial.rs [10912 tokens]:\n\nDescription:\nThis file implements a tutorial mode for a gameplay sandbox, guiding users through various tasks and interactions within a simulated environment.\n\nExternal Imports:\n- std\n- abstio\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::challenges::cutscene\n- crate::common\n- crate::edit\n- crate::sandbox::gameplay\n- crate::sandbox\n\nClasses:\n- {'name': 'Tutorial', 'description': 'Manages the tutorial gameplay and user interactions.'}\n- {'name': 'TutorialPointer', 'description': 'Tracks the current stage and part of the tutorial.'}\n- {'name': 'TutorialState', 'description': 'Holds the state and progress of the tutorial.'}\n- {'name': 'Stage', 'description': 'Represents a stage in the tutorial with associated messages and tasks.'}\n- {'name': 'Message', 'description': 'Defines a message to be displayed during the tutorial.'}\n- {'name': 'PopupMsg', 'description': 'Handles displaying popup messages to the user.'}\n\nRelationships:\n- Tutorial -> TutorialState\n- TutorialState -> Stage\n- Stage -> Message\n- Tutorial -> PopupMsg\n- TutorialPointer -> TutorialState\n- TutorialState -> TutorialPointer\n\nFunctionalities:\n- Launches and manages tutorial gameplay\n- Handles user interactions and task progression\n- Displays instructional messages and popups\n- Tracks user progress through tutorial stages\n- Provides scenario generation for gameplay challenges\n\n# apps/game/src/sandbox/gameplay/play_scenario.rs [5011 tokens]:\n\nDescription:\nThis file implements the gameplay mechanics for a sandbox scenario in a simulation game.\n\nExternal Imports:\n- std\n- maplit\n- abstutil\n- geom\n- map_gui\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::edit\n- crate::sandbox\n\nClasses:\n- {'name': 'PlayScenario', 'description': 'Manages the state and UI for playing a scenario in the sandbox.'}\n- {'name': 'EditScenarioModifiers', 'description': 'Handles the editing of traffic pattern modifiers for a scenario.'}\n- {'name': 'ChangeMode', 'description': 'Allows the user to change trip modes within a scenario.'}\n- {'name': 'DepartureSummary', 'description': 'Displays a summary of trip departure times.'}\n- {'name': 'CountTrips', 'description': 'Counts the number of trips based on departure times and modes.'}\n\nRelationships:\n- PlayScenario -> GameplayState\n- PlayScenario -> CityPicker\n- PlayScenario -> ChangeScenario\n- PlayScenario -> EditMode\n- PlayScenario -> EditScenarioModifiers\n- PlayScenario -> PopupMsg\n- PlayScenario -> DepartureSummary\n- EditScenarioModifiers -> ScenarioModifier\n- ChangeMode -> CountTrips\n- DepartureSummary -> App\n- CountTrips -> App\n\nFunctionalities:\n- Manage scenario states\n- Edit traffic patterns\n- Change trip modes\n- Display trip departure summaries\n- Count trips based on filters\n\n# apps/game/src/sandbox/gameplay/mod.rs [2789 tokens]:\n\nDescription:\nThis file defines the gameplay mechanics and modes for a sandbox game, including state management and scenario loading.\n\nExternal Imports:\n- anyhow\n- rand_xorshift\n- abstio\n- abstutil\n- geom\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- actdev\n- commute\n- fix_traffic_signals\n- freeform\n- play_scenario\n- tutorial\n- app\n- challenges\n- edit\n- pregame\n- sandbox\n\nClasses:\n- {'name': 'GameplayMode', 'description': 'Enumerates different gameplay modes and provides methods for scenario management.'}\n- {'name': 'GameplayState', 'description': 'Defines the interface for different gameplay states, handling events and rendering.'}\n- {'name': 'LoadScenario', 'description': 'Handles the loading of different scenarios based on the gameplay mode.'}\n- {'name': 'FinalScore', 'description': 'Manages the final score display and transitions after gameplay.'}\n\nRelationships:\n- GameplayMode -> GameplayState\n- GameplayState <- GameplayMode\n- GameplayMode -> LoadScenario\n- LoadScenario <- GameplayMode\n- FinalScore -> GameplayMode\n- GameplayMode <- FinalScore\n\nFunctionalities:\n- Manage different gameplay modes\n- Handle events and rendering for gameplay states\n- Load scenarios based on gameplay mode\n- Display final scores and manage transitions after gameplay\n\n# apps/game/src/sandbox/gameplay/commute.rs [2620 tokens]:\n\nDescription:\nThis file implements the gameplay mechanics for optimizing a person's commute in a simulation game.\n\nExternal Imports:\n- std\n- geom\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- app\n- challenges\n- common\n- edit\n- info\n- sandbox\n\nClasses:\n- {'name': 'OptimizeCommute', 'description': \"Handles the logic and state for optimizing a person's commute in the game.\"}\n\nRelationships:\n- OptimizeCommute -> App\n- OptimizeCommute -> GameplayState\n- OptimizeCommute -> SandboxControls\n- OptimizeCommute -> Actions\n- OptimizeCommute -> Challenge\n- OptimizeCommute -> HighScore\n- OptimizeCommute -> FinalScore\n- OptimizeCommute -> Tab\n- OptimizeCommute -> CutsceneBuilder\n- OptimizeCommute -> ShowMessage\n- OptimizeCommute -> cmp_duration_shorter\n- OptimizeCommute -> EditMode\n\nFunctionalities:\n- Manage the state of the commute optimization challenge\n- Display cutscenes related to the challenge\n- Handle user interactions and events during gameplay\n- Calculate scores based on trip durations\n- Recreate UI panels to reflect current state\n- Provide hints and instructions to the player\n\n# apps/game/src/sandbox/gameplay/fix_traffic_signals.rs [2855 tokens]:\n\nDescription:\nThis file implements the gameplay mechanics for fixing traffic signals in a sandbox game environment.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app::Transition\n- crate::app::App\n- crate::app::FindDelayedIntersections\n- crate::challenges::cutscene\n- crate::challenges::HighScore\n- crate::common::Warping\n- crate::edit::EditMode\n- crate::sandbox::gameplay\n- crate::sandbox\n\nClasses:\n- {'name': 'FixTrafficSignals', 'description': 'Handles the state and logic for fixing traffic signals during gameplay.'}\n\nRelationships:\n- FixTrafficSignals -> App\n- FixTrafficSignals -> FindDelayedIntersections\n- FixTrafficSignals -> HighScore\n- FixTrafficSignals -> EditMode\n- FixTrafficSignals -> SandboxMode\n- FixTrafficSignals -> GameplayMode\n- FixTrafficSignals -> CutsceneBuilder\n- FixTrafficSignals -> Warping\n- GameplayMode <- FixTrafficSignals\n\nFunctionalities:\n- Manage game state for fixing traffic signals\n- Display cutscenes and instructions\n- Handle user interactions and events\n- Track and display delays at intersections\n- Calculate and display scores based on performance\n\n# apps/game/src/sandbox/gameplay/freeform/importers.rs [843 tokens]:\n\nDescription:\nThis file provides functionality to import scenarios from grid2 demand and JSON files into a game sandbox.\n\nExternal Imports:\n- anyhow\n- serde\n- abstutil\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::sandbox::gameplay\n- crate::sandbox::SandboxMode\n\nClasses:\n- {'name': 'Input', 'description': 'Represents the structure of the input data for importing scenarios.'}\n\nRelationships:\n- import_grid2demand -> FilePicker\n- import_json -> FilePicker\n- import_json_scenario -> Map\n- import_json_scenario -> ExternalPerson\n- Input -> ExternalPerson\n- GameplayMode -> SandboxMode\n- SandboxMode -> GameplayMode\n\nFunctionalities:\n- Import scenarios from grid2 demand files\n- Import scenarios from JSON files\n- Handle file selection and loading\n- Manage scenario state transitions\n\n# apps/game/src/sandbox/gameplay/freeform/mod.rs [3213 tokens]:\n\nDescription:\nThis file implements the freeform gameplay mode for a traffic simulation game, allowing users to manipulate scenarios and spawn agents in a map.\n\nExternal Imports:\n- rand\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- area_spawner\n- importers\n- spawner\n- app\n- common\n- edit\n- sandbox\n\nClasses:\n- {'name': 'Freeform', 'description': 'Represents the freeform gameplay state, managing user interactions and UI.'}\n- {'name': 'ChangeScenario', 'description': 'Handles the scenario selection and management for the gameplay.'}\n\nRelationships:\n- Freeform -> app\n- Freeform -> sandbox\n- Freeform -> area_spawner\n- Freeform -> spawner\n- ChangeScenario -> app\n- ChangeScenario -> importers\n- ChangeScenario -> sandbox\n\nFunctionalities:\n- Manage gameplay state transitions\n- Handle user input and events\n- Spawn agents and traffic scenarios\n- Change maps and scenarios\n- Edit map configurations\n\n# apps/game/src/sandbox/gameplay/freeform/area_spawner.rs [1583 tokens]:\n\nDescription:\nThis file implements an area spawner for a game, allowing users to define areas on a map and manage traffic patterns.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'AreaSpawner', 'description': 'Manages the state and UI for defining areas on the map.'}\n- {'name': 'SelectRectangle', 'description': 'Handles the selection of rectangular areas on the map.'}\n- {'name': 'Area', 'description': 'Represents a defined area with its polygon, borders, and buildings.'}\n\nRelationships:\n- AreaSpawner -> SelectRectangle\n- AreaSpawner -> Area\n- Area -> map_model\n- AreaSpawner <- crate::app\n- SelectRectangle <- AreaSpawner\n\nFunctionalities:\n- Create and manage areas on the map\n- Draw and select areas using a rectangle\n- Handle user interactions for area management\n- Display information about selected areas\n\n# apps/game/src/sandbox/gameplay/freeform/spawner.rs [2121 tokens]:\n\nDescription:\nThis file defines the AgentSpawner class that manages the spawning of agents for trips in a game environment.\n\nExternal Imports:\n- abstutil\n- geom\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::debug\n\nClasses:\n- {'name': 'AgentSpawner', 'description': 'Manages the creation and configuration of agents for trips in the game.'}\n\nRelationships:\n- AgentSpawner -> App\n- AgentSpawner -> CommonState\n- AgentSpawner -> PathCostDebugger\n- App <- AgentSpawner\n- CommonState <- AgentSpawner\n- PathCostDebugger <- AgentSpawner\n\nFunctionalities:\n- Create a new trip agent\n- Select start and end points for trips\n- Configure trip parameters\n- Confirm trip settings\n- Debug path costs\n\n# apps/game/src/sandbox/gameplay/actdev.rs [2101 tokens]:\n\nDescription:\nThis file implements a gameplay mode for a traffic simulation game with specific controls for scenario management and interaction.\n\nExternal Imports:\n- std\n- maplit\n- rand\n- rand_xorshift\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n- crate::edit\n- crate::info\n- crate::sandbox\n\nClasses:\n- {'name': 'Actdev', 'description': 'Represents a gameplay mode with controls for scenario management.'}\n- {'name': 'About', 'description': 'Displays information about the A/B Street simulation game.'}\n\nRelationships:\n- Actdev -> GameplayState\n- Actdev -> SandboxControls\n- Actdev -> Actions\n- Actdev -> App\n- About -> SimpleState\n- About -> App\n- About -> Panel\n- find_active_trip -> App\n\nFunctionalities:\n- Manage gameplay scenarios\n- Handle user interactions\n- Display information panels\n- Highlight active trips\n- Toggle background traffic\n- Edit map functionality\n\n# apps/game/src/sandbox/minimap.rs [2415 tokens]:\n\nDescription:\nThis file implements a minimap controller for a game, providing functionalities for displaying and interacting with a minimap interface.\n\nExternal Imports:\n- abstutil\n- map_gui\n- widgetry\n\nInternal Imports:\n- app\n- common\n- layer\n\nClasses:\n- {'name': 'MinimapController', 'description': 'Controls the minimap interface and its interactions.'}\n\nRelationships:\n- MinimapController -> App\n- MinimapController -> Warping\n- MinimapController -> PickLayer\n- App <- MinimapController\n- Warping <- MinimapController\n- PickLayer <- MinimapController\n\nFunctionalities:\n- Display minimap\n- Handle user interactions with the minimap\n- Toggle visibility of different agent types\n- Zoom in and out on the map\n- Change map layers\n- Provide a legend for agents\n\n# apps/game/src/sandbox/misc_tools.rs [1154 tokens]:\n\nDescription:\nThis file implements tools for visualizing route previews and recording traffic at intersections in a simulation environment.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n- crate::common\n\nClasses:\n- {'name': 'RoutePreview', 'description': \"Handles the visualization of the agent's route preview.\"}\n- {'name': 'TrafficRecorder', 'description': 'Manages the selection and recording of traffic data at specified intersections.'}\n\nRelationships:\n- RoutePreview -> crate::app\n- TrafficRecorder -> crate::app\n- TrafficRecorder -> crate::common\n- TrafficRecorder <- crate::app\n\nFunctionalities:\n- Previewing routes for agents under the mouse cursor\n- Recording traffic data for selected intersections\n- Updating visual elements based on user interactions\n\n# apps/game/src/app.rs [7411 tokens]:\n\nDescription:\nThis file defines the main application structure and functionalities for a simulation game involving maps and agents.\n\nExternal Imports:\n- anyhow\n- maplit\n- structopt\n- abstio\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::challenges\n- crate::common\n- crate::edit\n- crate::layer\n- crate::render\n- crate::sandbox\n\nClasses:\n- {'name': 'App', 'description': 'The main application state that manages the simulation and rendering of the map.'}\n- {'name': 'PerMap', 'description': 'Contains state specific to a single map, including the map data and simulation.'}\n- {'name': 'ShowLayers', 'description': 'Defines which layers of the map are visible.'}\n- {'name': 'ShowEverything', 'description': 'A struct that allows all objects to be shown on the map.'}\n- {'name': 'Flags', 'description': 'Configuration flags for the application.'}\n- {'name': 'SessionState', 'description': 'Holds session-specific data such as tutorial state and high scores.'}\n- {'name': 'PerObjectActions', 'description': 'Manages actions related to individual objects on the map.'}\n- {'name': 'FindDelayedIntersections', 'description': 'A callback for finding intersections that are delayed.'}\n\nRelationships:\n- App -> PerMap\n- App -> ShowLayers\n- App -> ShowEverything\n- App -> Flags\n- App -> SessionState\n- App -> PerObjectActions\n- PerMap -> Map\n- PerMap -> Sim\n- PerMap -> DrawMap\n- PerMap -> Flags\n- SessionState -> GameplayMode\n- SessionState -> HighScore\n- PerObjectActions -> EventCtx\n- FindDelayedIntersections -> Sim\n\nFunctionalities:\n- Manage application state and transitions\n- Render the map and its objects\n- Handle user interactions and selections\n- Store and manage simulation data\n- Load and manage map data\n- Provide visual representation options for map layers\n- Handle application configuration and flags\n- Manage session-specific data and high scores\n\n# apps/game/src/debug/uber_turns.rs [1778 tokens]:\n\nDescription:\nThis file implements a user interface for selecting and viewing 'uber-turns' at intersections in a map application.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::ID\n- crate::app\n- crate::common\n\nClasses:\n- {'name': 'UberTurnPicker', 'description': 'Handles the selection of multiple intersections for viewing uber-turns.'}\n- {'name': 'UberTurnViewer', 'description': 'Displays the details of selected uber-turns between intersections.'}\n\nRelationships:\n- UberTurnPicker -> IntersectionCluster\n- UberTurnPicker -> PopupMsg\n- UberTurnViewer -> IntersectionCluster\n- UberTurnViewer -> App\n- UberTurnViewer -> CommonState\n- UberTurnViewer -> DrawOptions\n- UberTurnViewer -> ShowEverything\n- UberTurnViewer -> GeomBatch\n\nFunctionalities:\n- Select multiple intersections\n- View uber-turns\n- Detect intersection clusters\n- Display selected uber-turn details\n- Navigate through uber-turns\n- Toggle between legal and illegal movements\n\n# apps/game/src/debug/polygons.rs [966 tokens]:\n\nDescription:\nThis file implements a polygon debugging tool that allows users to navigate and visualize geometric shapes in a graphical interface.\n\nExternal Imports:\n- geom\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'PolygonDebugger', 'description': 'Handles the state and UI for debugging geometric shapes.'}\n- {'name': 'Item', 'description': 'Enum representing different geometric items (Point, Triangle, Polygon) to be debugged.'}\n\nRelationships:\n- PolygonDebugger -> crate::app\n- Item -> PolygonDebugger\n\nFunctionalities:\n- Display geometric items\n- Navigate through items\n- Render graphical representations of shapes\n- Handle user input for navigation\n\n# apps/game/src/debug/blocked_by.rs [1996 tokens]:\n\nDescription:\nVisualizes the graph of what agents are blocked by others in a simulation.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- sim\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n\nClasses:\n- {'name': 'Viewer', 'description': 'Handles the visualization of blocked agents and their root causes.'}\n\nRelationships:\n- Viewer -> App\n- Viewer -> CommonState\n- App <- Viewer\n- CommonState <- Viewer\n\nFunctionalities:\n- Visualizing blocked agents\n- Displaying root causes of blockage\n- Tracing dependency chains\n- Highlighting common sources of blockage\n\n# apps/game/src/debug/mod.rs [7811 tokens]:\n\nDescription:\nThis file implements a debug mode for a simulation application, providing tools for visualizing and interacting with the simulation's map and agents.\n\nExternal Imports:\n- std\n- abstio\n- abstutil\n- blockfinding\n- geom\n- map_gui\n- map_model\n- sim\n- synthpop\n- widgetry\n\nInternal Imports:\n- app\n- common\n- info\n- sandbox\n- routes\n- blocked_by\n- blockfinder\n- floodfill\n- objects\n- path_counter\n- polygons\n- select_roads\n- uber_turns\n\nClasses:\n- {'name': 'DebugMode', 'description': 'Handles the debug interface and interactions for the simulation.'}\n\nRelationships:\n- DebugMode -> CommonState\n- DebugMode -> ShowLayers\n- DebugMode -> ObjectDebugger\n- DebugMode -> PopupMsg\n- DebugMode -> Blockfinder\n- DebugMode -> Floodfiller\n- DebugMode -> PolygonDebugger\n- DebugMode -> RouteExplorer\n- DebugMode -> UberTurnPicker\n- DebugMode -> ScreenshotTest\n- DebugMode -> SearchResults\n- DebugMode -> Sim\n- DebugMode -> App\n- CommonState <- DebugMode\n- ShowLayers <- DebugMode\n- ObjectDebugger <- DebugMode\n- PopupMsg <- DebugMode\n- Blockfinder <- DebugMode\n- Floodfiller <- DebugMode\n- PolygonDebugger <- DebugMode\n- RouteExplorer <- DebugMode\n- UberTurnPicker <- DebugMode\n- ScreenshotTest <- DebugMode\n- SearchResults <- DebugMode\n- Sim <- DebugMode\n- App <- DebugMode\n\nFunctionalities:\n- Display debug information\n- Manage simulation state\n- Visualize map elements\n- Interact with simulation agents\n- Search and filter map data\n- Export simulation data\n- Handle user inputs for debugging tools\n\n# apps/game/src/debug/routes.rs [4489 tokens]:\n\nDescription:\nThis file implements a route explorer and demand analysis tool for a transportation simulation application.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::common\n\nClasses:\n- {'name': 'RouteExplorer', 'description': 'Manages the route exploration interface and path recalculation.'}\n- {'name': 'AllRoutesExplorer', 'description': 'Analyzes and displays routing demand for all requests.'}\n- {'name': 'PathCostDebugger', 'description': 'Evaluates and visualizes the cost of alternative paths.'}\n\nRelationships:\n- RouteExplorer -> crate::app::App\n- RouteExplorer -> crate::common::CommonState\n- AllRoutesExplorer -> crate::app::App\n- AllRoutesExplorer -> crate::common::CommonState\n- PathCostDebugger -> crate::app::App\n\nFunctionalities:\n- Route exploration and pathfinding\n- Demand calculation for routes\n- Visualization of path costs and alternatives\n- Dynamic parameter adjustment for routing\n\n# apps/game/src/debug/select_roads.rs [435 tokens]:\n\nDescription:\nThis file implements a bulk road selection interface for a map application.\n\nExternal Imports:\n- maplit\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- common\n\nClasses:\n- {'name': 'BulkSelect', 'description': 'Manages the state and UI for selecting multiple roads.'}\n\nRelationships:\n- BulkSelect -> RoadSelector\n- BulkSelect -> App\n- BulkSelect <- Panel\n- BulkSelect <- EventCtx\n- BulkSelect <- GfxCtx\n\nFunctionalities:\n- Create a new bulk selection state\n- Handle user events for road selection\n- Draw the selection panel and roads on the screen\n\n# apps/game/src/debug/floodfill.rs [1080 tokens]:\n\nDescription:\nThis file implements a flood fill algorithm and strongly connected component analysis for lane connectivity visualization in a map application.\n\nExternal Imports:\n- std\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n\nClasses:\n- {'name': 'Floodfiller', 'description': 'Handles the flood fill and strongly connected component visualization and interaction.'}\n- {'name': 'Source', 'description': 'Represents the source type for the flood fill operation.'}\n\nRelationships:\n- Floodfiller -> crate::app\n- Source -> map_model\n- Floodfiller <- Source\n- Floodfiller <> map_gui\n- Floodfiller <> widgetry\n\nFunctionalities:\n- Visualizing lane connectivity\n- Calculating reachable and unreachable lanes\n- Handling user interactions for lane selection\n- Displaying connectivity type options\n\n# apps/game/src/debug/path_counter.rs [881 tokens]:\n\nDescription:\nThis file defines a state for counting the number of trips that cross different roads at an intersection in a simulation.\n\nExternal Imports:\n- abstutil\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- common\n\nClasses:\n- {'name': 'PathCounter', 'description': 'A state that counts and displays the number of paths crossing a specified intersection.'}\n\nRelationships:\n- PathCounter -> App\n- PathCounter -> CommonState\n- PathCounter -> Counter\n- PathCounter -> ColorNetwork\n- PathCounter -> ColorLegend\n- PathCounter -> ToggleZoomed\n- PathCounter -> IntersectionID\n- PathCounter -> PathStep\n- PathCounter -> RoadID\n- PathCounter -> Traversable\n\nFunctionalities:\n- Count paths crossing an intersection\n- Display a tooltip with path counts\n- Render a visual representation of paths and intersections\n- Handle user interactions with the panel\n\n# apps/game/src/debug/blockfinder.rs [3650 tokens]:\n\nDescription:\nThis file implements a Blockfinder tool for visualizing and manipulating blocks in a map application.\n\nExternal Imports:\n- std\n- abstutil\n- blockfinding\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::app\n- crate::debug::polygons\n\nClasses:\n- {'name': 'Blockfinder', 'description': 'Manages the state and visualization of blocks in the map.'}\n- {'name': 'OneBlock', 'description': 'Displays details of a single block and provides options for debugging.'}\n\nRelationships:\n- Blockfinder -> crate::app\n- Blockfinder -> crate::debug::polygons\n- OneBlock -> crate::app\n- OneBlock -> crate::debug::polygons\n\nFunctionalities:\n- Visualizing blocks on a map\n- Merging blocks\n- Classifying neighborhoods\n- Collapsing dead-ends\n- Debugging polygon shapes\n\n# apps/santa/src/game.rs [5273 tokens]:\n\nDescription:\nThis file implements the game logic and UI for a Santa-themed delivery game.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- after_level\n- animation\n- buildings\n- levels\n- meters\n- player\n- vehicles\n- App\n\nClasses:\n- {'name': 'Game', 'description': 'Manages the game state, UI panels, and game mechanics.'}\n- {'name': 'GameState', 'description': 'Holds the current state of the game including score, energy, and building information.'}\n- {'name': 'EnergylessArrow', 'description': 'Displays an arrow guiding the player to the nearest store when low on energy.'}\n- {'name': 'MinimapController', 'description': 'Handles minimap controls and legends.'}\n\nRelationships:\n- Game -> GameState\n- GameState -> Buildings\n- GameState -> Vehicle\n- GameState -> Level\n- Game -> Player\n- Game -> Animator\n- Game -> SnowEffect\n- Game -> Minimap\n- EnergylessArrow -> GameState\n- MinimapController -> App\n\nFunctionalities:\n- Game state management\n- UI panel updates\n- Player movement and interaction\n- Score and energy tracking\n- Animation handling\n- Minimap functionality\n\n# apps/santa/src/meters.rs [333 tokens]:\n\nDescription:\nThis file provides functionality to create custom progress bars with text labels in a graphical user interface.\n\nExternal Imports:\n- abstutil\n- geom\n- widgetry\n\nFunctionalities:\n- Create custom progress bars\n- Render text labels on progress bars\n\n# apps/santa/src/lib.rs [553 tokens]:\n\nDescription:\nThis file initializes and runs a game application called '15-minute Santa' using the widgetry framework.\n\nExternal Imports:\n- anyhow\n- log\n- widgetry\n- map_gui\n- abstio\n- wasm_bindgen\n\nInternal Imports:\n- after_level\n- animation\n- before_level\n- buildings\n- controls\n- game\n- levels\n- meters\n- music\n- player\n- session\n- title\n- vehicles\n\nClasses:\n- {'name': 'App', 'description': 'A type alias for a SimpleApp instance using session data.'}\n- {'name': 'Transition', 'description': 'A type alias for the transition type used in the widgetry framework.'}\n\nRelationships:\n- App -> session::Session\n- Transition -> widgetry::Transition\n- session::Session <- App\n- session::Session -> music::Music\n- music::Music <- session::Session\n- title::TitleScreen -> App\n\nFunctionalities:\n- Initialize application settings\n- Load session data\n- Manage game state transitions\n- Handle music playback\n- Render the title screen\n\n# apps/santa/src/before_level.rs [2844 tokens]:\n\nDescription:\nThis file implements the Picker state for a game level where players can select buildings to upzone and manage their vehicle.\n\nExternal Imports:\n- std\n- rand\n- rand_xorshift\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- buildings\n- game\n- levels\n- meters\n- vehicles\n- App\n- Transition\n\nClasses:\n- {'name': 'Picker', 'description': 'Manages the state for selecting buildings to upzone and vehicle selection.'}\n\nRelationships:\n- Picker -> Buildings\n- Picker -> Game\n- Picker -> Level\n- Picker -> Vehicle\n- Picker <- App\n- Picker <- Transition\n\nFunctionalities:\n- Manage upzoning selections\n- Display vehicle options\n- Handle user input for building selection\n- Show instructions and game status\n- Randomly pick upzones\n- Clear upzone selections\n- Transition to the game state\n\n# apps/santa/src/controls.rs [493 tokens]:\n\nDescription:\nThis file implements an instant movement controller for a character based on keyboard input.\n\nExternal Imports:\n- geom\n- widgetry\n\nClasses:\n- {'name': 'InstantController', 'description': 'Controls the facing direction and displacement of a character based on keyboard input.'}\n\nFunctionalities:\n- Handles keyboard input for movement direction\n- Calculates displacement based on speed and time\n- Adjusts facing direction based on input\n\n# apps/santa/src/title.rs [1912 tokens]:\n\nDescription:\nThis file implements the title screen and credits screen for the 15-minute Santa game, managing level selection and navigation.\n\nExternal Imports:\n- geom\n- widgetry\n\nInternal Imports:\n- levels\n- App\n\nClasses:\n- {'name': 'TitleScreen', 'description': 'Manages the title screen, including level selection and navigation.'}\n- {'name': 'Credits', 'description': 'Displays the credits screen with information about the game and its contributors.'}\n\nRelationships:\n- TitleScreen -> App\n- Credits -> App\n- TitleScreen -> levels\n- Credits -> levels\n\nFunctionalities:\n- Display title and description of the game\n- Manage level selection and navigation\n- Show credits and contributors information\n- Handle user interactions and events\n\n# apps/santa/src/buildings.rs [938 tokens]:\n\nDescription:\nThis file defines the Buildings struct and its associated functionality for managing and rendering building data in a map application.\n\nExternal Imports:\n- std\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::App\n\nClasses:\n- {'name': 'Buildings', 'description': 'Manages the state and rendering of buildings in the map.'}\n- {'name': 'BldgState', 'description': 'Represents the state of a building, such as whether it is delivered, a store, or ignored.'}\n\nRelationships:\n- Buildings -> App\n- BldgState -> AmenityType\n- BldgState -> BuildingType\n\nFunctionalities:\n- Manage building states\n- Render building visuals\n- Calculate total housing units\n- Identify all store buildings\n\n# apps/santa/src/after_level.rs [1839 tokens]:\n\nDescription:\nThis file implements the game state for Santa's delivery strategy and results display.\n\nExternal Imports:\n- abstutil\n- geom\n- widgetry\n\nInternal Imports:\n- buildings\n- levels\n- title\n- app\n\nClasses:\n- {'name': 'Strategize', 'description': 'Handles the game state for strategizing delivery results.'}\n- {'name': 'Results', 'description': 'Displays the results of the delivery attempt.'}\n- {'name': 'RecordPath', 'description': 'Records and manages the delivery path taken.'}\n\nRelationships:\n- Strategize -> App\n- Strategize -> Level\n- Strategize -> Buildings\n- Results -> App\n- Results -> Level\n- RecordPath -> Pt2D\n- RecordPath -> PolyLine\n\nFunctionalities:\n- Display delivery results\n- Manage delivery path\n- Handle user interactions for navigation\n- Render graphical elements related to delivery and buildings\n- Maintain game state transitions\n\n# apps/santa/src/vehicles.rs [525 tokens]:\n\nDescription:\nThis file defines a Vehicle struct with various types of vehicles and their properties, along with methods for animation and calculating maximum stats.\n\nExternal Imports:\n- geom\n- widgetry\n\nClasses:\n- {'name': 'Vehicle', 'description': 'Represents a vehicle with properties such as name, speed, max energy, and methods for animation and stats calculation.'}\n\nFunctionalities:\n- Define vehicle properties\n- Animate vehicle graphics\n- Calculate maximum speed and energy of vehicles\n\n# apps/santa/src/animation.rs [1687 tokens]:\n\nDescription:\nThis file implements an animation system for rendering effects such as scaling, following paths, and flashing, along with a snow effect simulation.\n\nExternal Imports:\n- rand\n- rand_xorshift\n- geom\n- widgetry\n\nClasses:\n- {'name': 'Animator', 'description': 'Manages a collection of animations and handles their rendering.'}\n- {'name': 'Animation', 'description': 'Represents a single animation with its timing and effect.'}\n- {'name': 'Effect', 'description': 'Defines various visual effects that can be applied in animations.'}\n- {'name': 'SnowEffect', 'description': 'Simulates falling snowflakes with random properties.'}\n- {'name': 'Snowflake', 'description': 'Represents an individual snowflake with its position and movement.'}\n\nFunctionalities:\n- Manage and render animations\n- Schedule animations with timing\n- Render various visual effects\n- Simulate falling snowflakes\n- Update snowflake positions based on time\n\n# apps/santa/src/music.rs [1093 tokens]:\n\nDescription:\nThis file manages background music playback in a game, allowing for volume control and song changes.\n\nExternal Imports:\n- std\n- anyhow\n- rodio\n- widgetry\n\nInternal Imports:\n- abstio\n\nClasses:\n- {'name': 'Music', 'description': 'Handles the overall music playback functionality.'}\n- {'name': 'Inner', 'description': 'Manages the audio stream and controls for music playback.'}\n\nRelationships:\n- Music -> Inner\n- Inner <- Music\n- Inner -> abstio\n- abstio <- Inner\n\nFunctionalities:\n- Play and pause music\n- Change the current song\n- Control volume levels\n- Display a music control panel\n\n# apps/ltn/src/lib.rs [2002 tokens]:\n\nDescription:\nThis file implements the main application logic for a low traffic neighbourhood simulation tool.\n\nExternal Imports:\n- structopt\n- abstio\n- map_model\n- widgetry\n\nInternal Imports:\n- app\n- components\n- export\n- logic\n- neighbourhood\n- pages\n- render\n- save\n\nClasses:\n- {'name': 'Args', 'description': 'Handles command line arguments for the application.'}\n- {'name': 'App', 'description': 'Main application state managing the neighbourhood simulation.'}\n\nRelationships:\n- App -> logic::NeighbourhoodID\n- App -> neighbourhood::Neighbourhood\n- App -> pages\n- App -> save\n- Args -> map_gui::SimpleAppArgs\n\nFunctionalities:\n- Initialize application settings\n- Load and manage neighbourhood proposals\n- Handle user input and command line arguments\n- Render graphical elements for the simulation\n- Manage application states and transitions\n\n# apps/ltn/src/render/mod.rs [1733 tokens]:\n\nDescription:\nThis file handles the rendering of various map elements such as points of interest, bus routes, and turn restrictions in a graphical interface.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- cells\n- colors\n- filters\n\nClasses:\n- {'name': 'Toggle3Zoomed', 'description': 'Handles drawing elements based on the zoom level of the canvas.'}\n\nRelationships:\n- Toggle3Zoomed -> colors\n- Toggle3Zoomed -> filters\n- render_poi_icons -> colors\n- render_bus_routes -> colors\n- render_turn_restrictions -> map_model\n- draw_turn_restriction_icon -> map_model\n\nFunctionalities:\n- Rendering points of interest on a map\n- Rendering bus routes on a map\n- Rendering turn restrictions on roads\n- Handling zoom-dependent rendering\n- Managing filter styles and colors\n\n# apps/ltn/src/render/colors.rs [636 tokens]:\n\nDescription:\nThis file defines a set of color constants used for rendering in a graphical application.\n\nExternal Imports:\n- widgetry\n- lazy_static\n\nFunctionalities:\n- Define color constants\n- Group colors into palettes\n- Specify color codes for different routes and road types\n\n# apps/ltn/src/render/filters.rs [781 tokens]:\n\nDescription:\nThis file renders modal filters on a map using custom shapes and icons based on various filter types.\n\nExternal Imports:\n- std\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::render\n\nClasses:\n- {'name': 'Toggle3Zoomed', 'description': 'Handles rendering of shapes at different zoom levels.'}\n\nRelationships:\n- render -> Toggle3Zoomed\n- Toggle3Zoomed <- render\n\nFunctionalities:\n- Rendering modal filters on a map\n- Loading and scaling SVG icons\n- Applying color changes based on filter modifications\n- Custom drawing for different zoom levels\n\n# apps/ltn/src/components/mod.rs [97 tokens]:\n\nDescription:\nThis file defines the main components of the application, including various panels and a mode enumeration for functionality.\n\nInternal Imports:\n- appwide_panel\n- layers\n- left_panel\n\nClasses:\n- {'name': 'AppwidePanel', 'description': 'A component representing the application-wide panel.'}\n- {'name': 'Layers', 'description': 'A component managing different layers in the application.'}\n- {'name': 'BottomPanel', 'description': 'A component representing the bottom panel of the application.'}\n- {'name': 'LeftPanel', 'description': 'A component representing the left panel of the application.'}\n\nRelationships:\n- AppwidePanel -> layers\n- Layers -> legend_entry\n- BottomPanel -> left_panel\n- LeftPanel -> left_panel\n\nFunctionalities:\n- Define application-wide components\n- Manage layers\n- Provide user interface panels\n- Handle different operational modes\n\n# apps/ltn/src/components/layers.rs [3449 tokens]:\n\nDescription:\nThis file defines a Layers component for a map application, managing the display of various map layers and user interactions with them.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- components\n- render\n- pages\n\nClasses:\n- {'name': 'Layers', 'description': 'Manages the display and interaction of map layers in the application.'}\n\nRelationships:\n- Layers -> Mode\n- Layers -> colors\n- Layers -> filter_svg_path\n- Layers -> pages\n\nFunctionalities:\n- Manage map layer visibility\n- Handle user input for layer options\n- Update and draw the layers on the map\n- Provide zoom controls for the map\n- Generate a legend for different modes and features.\n\n# apps/ltn/src/components/appwide_panel.rs [2244 tokens]:\n\nDescription:\nThis file defines the AppwidePanel struct, which manages the top and left panels of the application interface.\n\nExternal Imports:\n- widgetry\n\nInternal Imports:\n- components\n- pages\n- save\n- map_gui\n\nClasses:\n- {'name': 'AppwidePanel', 'description': 'Manages the top and left panels of the application, handling events and drawing the UI.'}\n\nRelationships:\n- AppwidePanel -> components::Mode\n- AppwidePanel -> pages\n- AppwidePanel -> save::PreserveState\n- AppwidePanel -> map_gui\n\nFunctionalities:\n- Manage application panels\n- Handle user events\n- Draw UI components\n- Transition between application states\n\n# apps/ltn/src/components/left_panel.rs [397 tokens]:\n\nDescription:\nThis file defines the LeftPanel and BottomPanel structures for a user interface in a widget-based application.\n\nExternal Imports:\n- widgetry\n\nInternal Imports:\n- AppwidePanel\n\nClasses:\n- {'name': 'LeftPanel', 'description': 'Handles the construction of the left panel in the user interface.'}\n- {'name': 'BottomPanel', 'description': 'Constructs the bottom panel in the user interface.'}\n\nRelationships:\n- LeftPanel -> AppwidePanel\n- BottomPanel -> AppwidePanel\n\nFunctionalities:\n- Panel construction\n- Panel alignment\n- Panel dimensioning\n\n# apps/ltn/src/app.rs [2418 tokens]:\n\nDescription:\nThis file implements the main application logic for a map-based user interface, handling map rendering, user interactions, and session management.\n\nExternal Imports:\n- abstio\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- crate::logic\n- crate::pages\n- crate::render\n- crate::save\n- crate::components\n\nClasses:\n- {'name': 'App', 'description': 'Main application structure managing the map and user sessions.'}\n- {'name': 'PerMap', 'description': 'Holds data and rendering logic specific to a single map.'}\n- {'name': 'Session', 'description': 'Manages the current user session state and settings.'}\n- {'name': 'SimpleWarper', 'description': 'Handles camera warping functionality.'}\n\nRelationships:\n- App -> PerMap\n- App -> Session\n- PerMap -> Map\n- PerMap -> DrawMap\n- Session -> Layers\n- Session -> FilterType\n- Session -> CrossingType\n- SimpleWarper -> Warper\n- PerMap -> logic\n- PerMap -> render\n- PerMap -> crate::save\n- Session -> pages\n\nFunctionalities:\n- Map rendering and display\n- User interaction handling\n- Session state management\n- Map editing and proposal management\n- Camera control and warping\n\n# apps/ltn/src/save/proposals_ui.rs [1634 tokens]:\n\nDescription:\nThis file manages the user interface for saving and loading proposals in a mapping application.\n\nExternal Imports:\n- abstutil\n- map_gui\n- widgetry\n\nInternal Imports:\n- save_dialog\n- share\n- PreserveState\n- Proposal\n- Proposals\n- crate\n\nClasses:\n- {'name': 'Proposals', 'description': 'Handles the collection and management of proposals in the application.'}\n\nRelationships:\n- Proposals -> SaveDialog\n- Proposals -> ShareProposal\n- Proposals -> PreserveState\n- Proposals -> Proposal\n- Proposals -> Proposals\n- Proposals -> crate\n\nFunctionalities:\n- Display proposal options in a widget\n- Handle user actions for proposals\n- Load and save proposals\n- Share proposals\n- Export proposals to GeoJSON format\n\n# apps/ltn/src/save/mod.rs [1670 tokens]:\n\nDescription:\nThis file manages proposals for map edits in the LTN tool, allowing users to load, save, and manipulate proposals while maintaining state and partitioning information.\n\nExternal Imports:\n- anyhow\n- abstutil\n- map_model\n- widgetry\n- flate2\n- serde_json\n- md5\n- home\n\nInternal Imports:\n- perma\n- proposals_ui\n- save_dialog\n- share\n- logic\n- pages\n\nClasses:\n- {'name': 'Proposals', 'description': 'Handles a list of proposals and manages the current proposal state.'}\n- {'name': 'Proposal', 'description': 'Represents a single proposal containing map edits and partitioning information.'}\n- {'name': 'PreserveState', 'description': 'Defines various states to preserve when switching proposals.'}\n\nRelationships:\n- Proposals -> Proposal\n- Proposal -> perma\n- Proposal -> logic\n- Proposal -> pages\n- PreserveState -> pages\n- Proposals -> pages\n- Proposals -> logic\n\nFunctionalities:\n- Loading proposals from files\n- Saving proposals to files\n- Managing current proposal state\n- Applying map edits based on proposals\n- Preserving application state during proposal changes\n\n# apps/ltn/src/save/save_dialog.rs [1350 tokens]:\n\nDescription:\nThis file implements a save dialog for proposals in the application, allowing users to save their work either locally or in the browser's local storage.\n\nExternal Imports:\n- anyhow\n- map_gui\n- widgetry\n\nInternal Imports:\n- PreserveState\n- App\n- Transition\n\nClasses:\n- {'name': 'SaveDialog', 'description': 'Handles the user interface and logic for saving proposals.'}\n\nRelationships:\n- SaveDialog -> PreserveState\n- SaveDialog -> App\n- SaveDialog -> Transition\n- PreserveState <- SaveDialog\n- App <- SaveDialog\n- Transition <- SaveDialog\n\nFunctionalities:\n- Display save options to the user\n- Handle user input for saving proposals\n- Manage overwriting existing proposals\n- Provide feedback on save operations\n- Integrate with file saving mechanisms\n\n# apps/ltn/src/save/share.rs [1550 tokens]:\n\nDescription:\nThis file handles the sharing of proposals in the application, allowing users to upload and share their proposals via a generated URL.\n\nExternal Imports:\n- std\n- serde\n- abstutil\n- map_gui\n- widgetry\n\nInternal Imports:\n- crate::App\n- crate::Transition\n\nClasses:\n- {'name': 'ShareProposal', 'description': 'Manages the state and UI for sharing proposals.'}\n- {'name': 'UploadedProposals', 'description': 'Handles the loading and storage of uploaded proposal checksums.'}\n\nRelationships:\n- ShareProposal -> App\n- ShareProposal -> Transition\n- UploadedProposals -> abstio\n\nFunctionalities:\n- Upload proposals to a remote server\n- Generate shareable URLs for proposals\n- Manage user interactions for sharing proposals\n- Handle success and failure responses for uploads\n- Store and retrieve uploaded proposal checksums\n\n# apps/ltn/src/pages/design_ltn/page.rs [5953 tokens]:\n\nDescription:\nThis file defines the DesignLTN state for a neighborhood editing interface in a mapping application.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- osm2streets\n- widgetry\n\nInternal Imports:\n- super\n- crate::components\n- crate::logic\n- crate::render\n- crate::save\n- crate::pages\n- crate::App\n- crate::Neighbourhood\n\nClasses:\n- {'name': 'DesignLTN', 'description': 'Handles the state and user interactions for designing a local transport network.'}\n\nRelationships:\n- DesignLTN -> App\n- DesignLTN -> Neighbourhood\n- DesignLTN -> EditNeighbourhood\n- DesignLTN -> AppwidePanel\n- DesignLTN -> BottomPanel\n- DesignLTN -> DrawSimpleRoadLabels\n- DesignLTN -> PreserveState\n- DesignLTN -> RenderCells\n- DesignLTN -> PopupMsg\n- DesignLTN -> ChooseSomething\n- DesignLTN -> AutoFilterHeuristic\n- DesignLTN -> colors\n- DesignLTN -> Transition\n- App -> DesignLTN\n- Neighbourhood -> DesignLTN\n- EditNeighbourhood -> DesignLTN\n- AppwidePanel -> DesignLTN\n- BottomPanel -> DesignLTN\n- DrawSimpleRoadLabels -> DesignLTN\n- PreserveState -> DesignLTN\n- RenderCells -> DesignLTN\n- PopupMsg -> DesignLTN\n- ChooseSomething -> DesignLTN\n- AutoFilterHeuristic -> DesignLTN\n- colors -> DesignLTN\n- Transition -> DesignLTN\n\nFunctionalities:\n- User interface for neighborhood design\n- Rendering of neighborhood elements\n- Handling user interactions and events\n- Displaying warnings and messages\n- Managing editing states and transitions\n\n# apps/ltn/src/pages/design_ltn/one_ways.rs [459 tokens]:\n\nDescription:\nThis file manages the interaction with one-way roads in a neighbourhood within a map application.\n\nExternal Imports:\n- osm2streets\n- widgetry\n\nInternal Imports:\n- super\n- crate::render\n- crate\n\nClasses:\n- {'name': 'Obj', 'description': 'Represents different objects in the map, such as roads.'}\n- {'name': 'App', 'description': 'Main application structure managing the state and data.'}\n- {'name': 'Neighbourhood', 'description': 'Represents a collection of roads and their attributes in a specific area.'}\n\nRelationships:\n- Obj -> super\n- App -> crate\n- Neighbourhood -> crate\n\nFunctionalities:\n- Manage one-way road interactions\n- Handle user clicks on roads\n- Toggle road direction\n- Validate road properties before editing\n\n# apps/ltn/src/pages/design_ltn/shortcuts.rs [1029 tokens]:\n\nDescription:\nThis file manages the visualization and interaction of road shortcuts in a neighborhood map application.\n\nExternal Imports:\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- super\n- crate::render::colors\n- crate::App\n- crate::Neighbourhood\n\nClasses:\n- {'name': 'FocusedRoad', 'description': 'Represents a road with its associated shortcuts and the current index of the selected shortcut.'}\n\nRelationships:\n- FocusedRoad -> crate::App\n- FocusedRoad -> crate::Neighbourhood\n- widget -> crate::App\n- make_world -> crate::App\n- make_world -> crate::Neighbourhood\n- handle_world_outcome -> crate::App\n- handle_world_outcome -> crate::Neighbourhood\n\nFunctionalities:\n- Display road shortcuts and their details\n- Navigate through shortcuts\n- Render road and shortcut visualizations\n- Handle user interactions with the map\n\n# apps/ltn/src/pages/design_ltn/mod.rs [1686 tokens]:\n\nDescription:\nThis file defines the editing functionalities for a Local Transport Network (LTN) design interface, including various editing modes and their interactions with the neighbourhood data.\n\nExternal Imports:\n- map_model\n- widgetry\n\nInternal Imports:\n- filters\n- freehand_filters\n- modals\n- one_ways\n- page\n- shortcuts\n- speed_limits\n- turn_restrictions\n- logic\n\nClasses:\n- {'name': 'EditNeighbourhood', 'description': 'Manages the editing state and world representation for a neighbourhood.'}\n- {'name': 'EditMode', 'description': 'Enumerates the different modes available for editing the neighbourhood.'}\n- {'name': 'EditOutcome', 'description': 'Represents the possible outcomes of an edit operation.'}\n- {'name': 'Obj', 'description': 'Defines the types of objects that can be edited, such as roads and intersections.'}\n\nRelationships:\n- EditNeighbourhood -> filters\n- EditNeighbourhood -> freehand_filters\n- EditNeighbourhood -> one_ways\n- EditNeighbourhood -> shortcuts\n- EditNeighbourhood -> speed_limits\n- EditNeighbourhood -> turn_restrictions\n- EditMode -> PolyLineLasso\n- EditOutcome -> PopupMsg\n- Obj -> ObjectID\n\nFunctionalities:\n- Manage different editing modes for the neighbourhood\n- Handle events related to editing\n- Update the panel and world based on user actions\n- Transition between different editing states\n- Create and manipulate a world representation of the neighbourhood\n\n# apps/ltn/src/pages/design_ltn/speed_limits.rs [594 tokens]:\n\nDescription:\nThis file manages the visualization and interaction of speed limits on roads within a neighbourhood in a mapping application.\n\nExternal Imports:\n- geom\n- widgetry\n\nInternal Imports:\n- super\n- crate::render\n- crate\n\nClasses:\n- {'name': 'Obj', 'description': 'Represents different objects in the world, specifically roads in this context.'}\n- {'name': 'App', 'description': 'Main application structure that holds the state and logic of the mapping application.'}\n- {'name': 'Neighbourhood', 'description': 'Represents a geographical area containing roads and other features.'}\n\nRelationships:\n- Obj -> super\n- App -> crate\n- Neighbourhood -> crate\n\nFunctionalities:\n- Display speed limits on roads\n- Handle user interactions with speed limit objects\n- Update speed limits based on user actions\n\n# apps/ltn/src/pages/design_ltn/filters.rs [1159 tokens]:\n\nDescription:\nThis file manages the creation and interaction of filters on roads and intersections in a map application.\n\nExternal Imports:\n- map_model\n- widgetry\n\nInternal Imports:\n- modals\n- road_name\n- EditOutcome\n- Obj\n- render\n- redraw_all_icons\n- App\n- Neighbourhood\n\nClasses:\n- {'name': 'World', 'description': 'Handles the creation and management of clickable objects in the map.'}\n- {'name': 'Obj', 'description': 'Represents different types of objects (roads and intersections) in the map.'}\n- {'name': 'EditOutcome', 'description': 'Encapsulates the outcome of editing operations in the map.'}\n- {'name': 'Neighbourhood', 'description': 'Contains information about the neighbourhood, including roads and intersections.'}\n\nRelationships:\n- World -> Obj\n- EditOutcome -> Obj\n- Neighbourhood -> Obj\n- Neighbourhood -> EditOutcome\n- App -> EditOutcome\n- App -> Neighbourhood\n\nFunctionalities:\n- Create clickable objects for roads and intersections\n- Handle user interactions with map objects\n- Apply filters to roads and intersections\n- Manage the state of the map and its edits\n\n# apps/ltn/src/pages/design_ltn/turn_restrictions.rs [2872 tokens]:\n\nDescription:\nThis file manages the visualization and editing of turn restrictions at intersections in a map application.\n\nExternal Imports:\n- geom\n- map_model\n- osm2streets\n- widgetry\n\nInternal Imports:\n- super\n- crate::logic::turn_restrictions\n- crate::render::colors\n- crate::App\n- crate::Neighbourhood\n\nClasses:\n- {'name': 'FocusedTurns', 'description': 'Represents the currently focused turns and their restrictions at an intersection.'}\n\nRelationships:\n- FocusedTurns -> crate::logic::turn_restrictions\n- crate::logic::turn_restrictions -> FocusedTurns\n- crate::App -> FocusedTurns\n- crate::Neighbourhood -> FocusedTurns\n\nFunctionalities:\n- Display turn restrictions\n- Edit turn restrictions\n- Visualize road connections\n- Handle user interactions for editing\n- Manage hover effects for roads\n\n# apps/ltn/src/pages/design_ltn/modals.rs [2282 tokens]:\n\nDescription:\nThis file defines modal dialogs for resolving one-way street issues and bus gate warnings in a mapping application.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- osm2streets\n- widgetry\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'ResolveOneWayAndFilter', 'description': 'Handles the modal dialog for resolving one-way street issues.'}\n- {'name': 'ResolveBusGate', 'description': 'Handles the modal dialog for resolving bus gate warnings.'}\n- {'name': 'ChangeFilterType', 'description': 'Manages the modal dialog for changing the type of modal filter applied to streets.'}\n\nRelationships:\n- ResolveOneWayAndFilter -> crate\n- ResolveBusGate -> crate\n- ChangeFilterType -> crate\n- crate -> ResolveOneWayAndFilter\n- crate -> ResolveBusGate\n- crate -> ChangeFilterType\n\nFunctionalities:\n- Display warning messages for one-way streets and bus gates\n- Allow users to change filter types\n- Apply edits to road configurations based on user input\n\n# apps/ltn/src/pages/about.rs [423 tokens]:\n\nDescription:\nThis file defines the About page for the LTN tool, providing information about its creators and development.\n\nExternal Imports:\n- map_gui\n- widgetry\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'About', 'description': 'Represents the About state of the application, displaying information about the tool and its creators.'}\n\nRelationships:\n- About -> crate\n\nFunctionalities:\n- Display information about the tool and its creators\n- Open a web browser to a specified URL\n- Handle user interactions on the About page\n- Render the About page visually\n\n# apps/ltn/src/pages/predict_impact.rs [3878 tokens]:\n\nDescription:\nThis file implements the functionality for predicting and displaying the impact of changes in a transportation scenario.\n\nExternal Imports:\n- anyhow\n- geo\n- rand\n- rand_xorshift\n- serde\n- widgetry\n- map_gui\n- map_model\n- synthpop\n\nInternal Imports:\n- components\n- logic\n- render\n- App\n- Transition\n\nClasses:\n- {'name': 'ShowImpactResults', 'description': 'Handles the display and interaction of impact prediction results.'}\n- {'name': 'ChangedRoutes', 'description': 'Manages the display of routes that have changed due to impact predictions.'}\n- {'name': 'Filters', 'description': 'Represents and manages filtering criteria for trip data.'}\n- {'name': 'ExportRow', 'description': 'Struct for exporting road data in various formats.'}\n\nRelationships:\n- ShowImpactResults -> Filters\n- ShowImpactResults -> Impact\n- ShowImpactResults -> ScenarioGenerator\n- ShowImpactResults -> PopupMsg\n- ShowImpactResults -> AppwidePanel\n- ShowImpactResults -> LeftPanel\n- ChangedRoutes -> Impact\n- ChangedRoutes -> App\n- Filters -> Panel\n- ExportRow -> Road\n- ExportRow -> App\n- ShowImpactResults <> App\n\nFunctionalities:\n- Loading and displaying impact prediction results\n- Filtering trip data based on user-defined criteria\n- Exporting impact data to various file formats\n- Displaying changed routes visually\n- Managing user interactions with the UI components\n\n# apps/ltn/src/pages/census.rs [1607 tokens]:\n\nDescription:\nThis file implements a state for displaying census data related to vehicle ownership in a geographical area.\n\nExternal Imports:\n- geom\n- widgetry\n\nInternal Imports:\n- components\n- render\n- App\n\nClasses:\n- {'name': 'Census', 'description': 'Manages the state and UI for displaying census vehicle data.'}\n\nRelationships:\n- Census -> App\n- Census -> components\n- Census -> render\n\nFunctionalities:\n- Display census data\n- Manage user interactions\n- Render graphical elements\n- Provide tooltips with detailed information\n- Open external links for more information\n\n# apps/ltn/src/pages/customize_boundary.rs [483 tokens]:\n\nDescription:\nThis file defines a state for customizing the boundary of a neighbourhood in a graphical user interface.\n\nExternal Imports:\n- map_gui\n- widgetry\n\nInternal Imports:\n- mut_partitioning\n- App\n- Neighbourhood\n- NeighbourhoodID\n- Transition\n\nClasses:\n- {'name': 'CustomizeBoundary', 'description': \"Handles the customization of a neighbourhood's boundary in the application.\"}\n\nRelationships:\n- CustomizeBoundary -> Neighbourhood\n- CustomizeBoundary -> mut_partitioning\n- CustomizeBoundary <- App\n- CustomizeBoundary -> Transition\n\nFunctionalities:\n- Display a panel for boundary customization\n- Edit a polygon representing the boundary\n- Handle user events for saving or closing the customization state\n- Draw the current state and the editing interface.\n\n# apps/ltn/src/pages/select_boundary.rs [3656 tokens]:\n\nDescription:\nThis file implements the functionality for selecting and adjusting neighbourhood boundaries in a mapping application.\n\nExternal Imports:\n- anyhow\n- std\n\nInternal Imports:\n- components\n- logic\n- render\n- mut_partitioning\n- pages\n\nClasses:\n- {'name': 'SelectBoundary', 'description': 'Handles the selection and modification of neighbourhood boundaries.'}\n\nRelationships:\n- SelectBoundary -> App\n- SelectBoundary -> Partitioning\n- SelectBoundary -> NeighbourhoodID\n- SelectBoundary -> BlockID\n- SelectBoundary -> World\n- SelectBoundary -> Lasso\n- SelectBoundary -> Drawable\n- SelectBoundary -> GeomBatch\n- SelectBoundary -> Panel\n- SelectBoundary -> State\n- SelectBoundary -> Transition\n- SelectBoundary -> PopupMsg\n- SelectBoundary -> Mode\n- SelectBoundary -> colors\n\nFunctionalities:\n- Manage neighbourhood boundary selection\n- Handle user interactions for adding/removing blocks\n- Display and update the UI for boundary adjustments\n- Calculate and redraw the frontier of neighbourhoods\n- Support freehand selection of blocks for boundary adjustments\n\n# apps/ltn/src/pages/mod.rs [176 tokens]:\n\nDescription:\nThis file serves as a module that aggregates and exposes various components related to the Local Transport Network (LTN) functionalities.\n\nInternal Imports:\n- about\n- census\n- crossings\n- customize_boundary\n- cycle_network\n- design_ltn\n- freehand_boundary\n- per_resident_impact\n- pick_area\n- predict_impact\n- route_planner\n- select_boundary\n\nClasses:\n- {'name': 'About', 'description': 'Handles information and functionalities related to the About section.'}\n- {'name': 'Census', 'description': 'Manages census data and its related functionalities.'}\n- {'name': 'Crossings', 'description': 'Handles functionalities related to road crossings.'}\n- {'name': 'CustomizeBoundary', 'description': 'Allows customization of boundaries within the LTN.'}\n- {'name': 'CycleNetwork', 'description': 'Manages the cycle network functionalities.'}\n- {'name': 'DesignLTN', 'description': 'Facilitates the design and editing of Local Transport Networks.'}\n- {'name': 'FreehandBoundary', 'description': 'Enables freehand drawing of boundaries.'}\n- {'name': 'PerResidentImpact', 'description': 'Analyzes the impact of LTN changes on residents.'}\n- {'name': 'PickArea', 'description': 'Allows users to select specific areas within the LTN.'}\n- {'name': 'ShowImpactResults', 'description': 'Displays the results of impact predictions.'}\n- {'name': 'RoutePlanner', 'description': 'Assists in planning routes within the LTN.'}\n- {'name': 'SelectBoundary', 'description': 'Enables selection of predefined boundaries.'}\n\nRelationships:\n- About <- design_ltn\n- Census <- design_ltn\n- Crossings <- design_ltn\n- CustomizeBoundary <- design_ltn\n- CycleNetwork <- design_ltn\n- FreehandBoundary <- design_ltn\n- PerResidentImpact <- design_ltn\n- PickArea <- design_ltn\n- ShowImpactResults <- design_ltn\n- RoutePlanner <- design_ltn\n- SelectBoundary <- design_ltn\n\nFunctionalities:\n- Aggregate various LTN-related modules\n- Expose classes for LTN functionalities\n- Facilitate interaction between LTN components\n\n# apps/ltn/src/pages/route_planner.rs [3779 tokens]:\n\nDescription:\nThis file implements a route planning interface for a mapping application, allowing users to calculate and visualize driving, cycling, and walking routes based on waypoints and various parameters.\n\nExternal Imports:\n- geom\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- components\n- render\n- App\n- Transition\n\nClasses:\n- {'name': 'RoutePlanner', 'description': 'Handles the route planning logic and user interface for managing waypoints and displaying calculated routes.'}\n\nRelationships:\n- RoutePlanner -> App\n- RoutePlanner -> TripManagement\n- RoutePlanner -> InputWaypoints\n- RoutePlanner -> PathfinderCache\n- RoutePlanner -> World\n- RoutePlanner -> colors\n- RoutePlanner -> Transition\n- RoutePlanner <- TripManagement\n- RoutePlanner <- InputWaypoints\n- RoutePlanner <- PathfinderCache\n- RoutePlanner <- World\n\nFunctionalities:\n- Calculate routes based on waypoints\n- Display driving, cycling, and walking routes\n- Manage trip files and save states\n- Update UI based on user interactions\n- Render visual elements on the map\n\n# apps/ltn/src/pages/freehand_boundary.rs [2329 tokens]:\n\nDescription:\nThis file defines the FreehandBoundary state for drawing custom neighbourhood boundaries in a graphical application.\n\nExternal Imports:\n- std\n- geom\n- map_gui\n- map_model\n- widgetry\n\nInternal Imports:\n- components\n- logic\n- mut_partitioning\n- pages\n- App\n\nClasses:\n- {'name': 'FreehandBoundary', 'description': 'Handles the state and logic for creating and editing custom neighbourhood boundaries.'}\n\nRelationships:\n- FreehandBoundary -> App\n- FreehandBoundary -> CustomBoundary\n- FreehandBoundary -> AppwidePanel\n- FreehandBoundary -> EditPolygon\n- FreehandBoundary -> QuadTree\n- FreehandBoundary -> Lasso\n- FreehandBoundary -> NeighbourhoodID\n- FreehandBoundary -> RoadID\n- FreehandBoundary -> Drawable\n- FreehandBoundary -> Transition\n- components -> FreehandBoundary\n- logic -> FreehandBoundary\n- mut_partitioning -> FreehandBoundary\n- pages -> FreehandBoundary\n\nFunctionalities:\n- Drawing custom boundaries\n- Editing existing boundaries\n- Handling user input for boundary creation\n- Rendering boundaries on the map\n- Managing application state transitions\n\n# apps/ltn/src/pages/pick_area.rs [1691 tokens]:\n\nDescription:\nThis file implements a state for selecting and managing neighbourhoods in a mapping application.\n\nExternal Imports:\n- widgetry\n\nInternal Imports:\n- components\n- render\n- pages\n\nClasses:\n- {'name': 'PickArea', 'description': 'Handles the state for picking and managing neighbourhoods on a map.'}\n\nRelationships:\n- PickArea -> AppwidePanel\n- PickArea -> BottomPanel\n- PickArea -> World\n- PickArea -> Neighbourhood\n- PickArea -> NeighbourhoodID\n- PickArea -> Transition\n- PickArea -> pages\n- PickArea <- AppwidePanel\n- PickArea <- BottomPanel\n- PickArea <- World\n- PickArea <- Neighbourhood\n- PickArea <- NeighbourhoodID\n- PickArea <- Transition\n- PickArea <- pages\n\nFunctionalities:\n- Manage neighbourhood selection\n- Change drawing styles\n- Handle custom boundaries\n- Render neighbourhoods on a map\n- Respond to user interactions\n\n# apps/ltn/src/pages/per_resident_impact.rs [2799 tokens]:\n\nDescription:\nThis file implements the PerResidentImpact state, which analyzes and visualizes the impact of changes on driving times for residents in a neighbourhood.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- map_model\n- synthpop\n- widgetry\n\nInternal Imports:\n- components\n- render\n- save\n- pages\n- App\n- Neighbourhood\n- NeighbourhoodID\n- Transition\n\nClasses:\n- {'name': 'PerResidentImpact', 'description': 'Manages the state and visualization of per-resident driving impact analysis.'}\n\nRelationships:\n- PerResidentImpact -> App\n- PerResidentImpact -> Neighbourhood\n- PerResidentImpact -> PreserveState\n- PerResidentImpact -> BottomPanel\n- PerResidentImpact -> DrawSimpleRoadLabels\n- PerResidentImpact -> Pathfinder\n- PerResidentImpact -> TripEndpoint\n- PerResidentImpact -> Widget\n- PerResidentImpact -> ColorLegend\n- PerResidentImpact -> ColorScale\n- PerResidentImpact -> Duration\n- PerResidentImpact -> UnitFmt\n- PerResidentImpact -> BuildingID\n- PerResidentImpact -> PathConstraints\n- PerResidentImpact -> PathRequest\n- PerResidentImpact -> World\n- PerResidentImpact -> Obj\n- PerResidentImpact -> GfxCtx\n- PerResidentImpact -> GeomBatch\n- PerResidentImpact -> Text\n- PerResidentImpact -> Line\n- PerResidentImpact -> Outcome\n- PerResidentImpact -> State\n- PerResidentImpact -> Transition\n- components -> PerResidentImpact\n- render -> PerResidentImpact\n- save -> PerResidentImpact\n- pages -> PerResidentImpact\n\nFunctionalities:\n- Visualizing driving times for buildings in a neighbourhood\n- Calculating changes in driving times due to proposed changes\n- Displaying routes before and after changes\n- Handling user interactions for selecting buildings and targets\n- Updating visual elements based on state changes\n\n# apps/ltn/src/pages/cycle_network.rs [1262 tokens]:\n\nDescription:\nThis file defines the CycleNetwork state for a cycling navigation application, handling the display and interaction of the cycling network and related information.\n\nExternal Imports:\n- std\n- map_model\n- widgetry\n\nInternal Imports:\n- components\n- render\n- App\n- Neighbourhood\n- Transition\n\nClasses:\n- {'name': 'CycleNetwork', 'description': 'Manages the state and rendering of the cycling network interface.'}\n\nRelationships:\n- CycleNetwork -> App\n- CycleNetwork -> Neighbourhood\n- CycleNetwork -> components\n- CycleNetwork -> render\n- CycleNetwork -> Transition\n\nFunctionalities:\n- Display cycling network\n- Handle user interactions\n- Show informational popups\n- Render different types of lanes\n- Calculate shortcuts through neighbourhoods\n\n# apps/ltn/src/pages/crossings.rs [3732 tokens]:\n\nDescription:\nThis file manages the representation and interaction of road crossings in a mapping application.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_model\n- widgetry\n\nInternal Imports:\n- components\n- render\n- App\n\nClasses:\n- {'name': 'Crossings', 'description': 'Handles the state and rendering of road crossings in the application.'}\n\nRelationships:\n- Crossings -> App\n- Crossings -> components::AppwidePanel\n- Crossings -> components::BottomPanel\n- Crossings -> render::Toggle3Zoomed\n- Crossings -> map_model::Crossing\n- Crossings -> map_model::CrossingType\n- Crossings -> map_model::Road\n- Crossings -> map_model::RoadID\n\nFunctionalities:\n- Display and manage road crossings\n- Handle user interactions with crossings\n- Update visual representation of crossings\n- Calculate nearest crossing walking times\n- Draw porosity of areas based on crossings\n\n# apps/osm_viewer/Cargo.toml [205 tokens]:\n\nDescription:\nThis file defines the package configuration for the osm_viewer Rust project, including dependencies and features.\n\nExternal Imports:\n- getrandom\n- wasm-bindgen\n- structopt\n\nInternal Imports:\n- abstio\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nFunctionalities:\n- Package configuration\n- Dependency management\n- Feature specification\n\n# apps/osm_viewer/src/viewer.rs [3365 tokens]:\n\nDescription:\nThis file implements a viewer for OpenStreetMap data, allowing users to interact with and explore map features.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- map_gui\n- widgetry\n\nInternal Imports:\n- map_gui::options\n- map_gui::render\n- map_gui::tools\n\nClasses:\n- {'name': 'Viewer', 'description': 'Manages the state and UI of the OpenStreetMap viewer.'}\n- {'name': 'BusinessSearch', 'description': 'Handles the search and display of businesses on the map.'}\n- {'name': 'MinimapController', 'description': 'Controls the behavior of the minimap.'}\n\nRelationships:\n- Viewer -> map_gui::options\n- Viewer -> map_gui::render\n- Viewer -> map_gui::tools\n- BusinessSearch -> map_gui::tools\n- MinimapController -> map_gui::tools\n\nFunctionalities:\n- Display map features\n- Search for businesses\n- Highlight selected map elements\n- Update UI based on user interactions\n- Manage minimap controls\n\n# apps/osm_viewer/src/lib.rs [302 tokens]:\n\nDescription:\nThis file implements the main functionality for an OpenStreetMap viewer application.\n\nExternal Imports:\n- structopt\n- widgetry\n\nInternal Imports:\n- viewer\n- map_gui\n- abstutil\n\nClasses:\n- {'name': 'Viewer', 'description': 'Handles the state and rendering for the OpenStreetMap viewer.'}\n\nRelationships:\n- Viewer -> map_gui::SimpleApp\n- map_gui::SimpleApp -> viewer\n- run -> map_gui::options::Options\n- run -> map_gui::SimpleAppArgs\n- run_wasm -> run\n\nFunctionalities:\n- Initialize application settings\n- Load or default options\n- Override application options\n- Run the OpenStreetMap viewer\n- Handle WebAssembly specific execution.\n\n# apps/parking_mapper/Cargo.toml [205 tokens]:\n[package]\nname = \"parking_mapper\"\nversion = \"0.1.0\"\nauthors = [\"Dustin Carlino <dabreegster@gmail.com>\"]\nedition = \"2021\"\n\n[features]\ndefault = [\"map_gui/native\", \"reqwest\", \"widgetry/native-backend\"]\n\n[dependencies]\nabstio = { path = \"../../abstio\" }\nabstutil = { path = \"../../abstutil\" }\nanyhow = { workspace = true }\nfs-err = { workspace = true }\ngeom = { workspace = true }\nlog = { workspace = true }\nmap_gui = { path = \"../../map_gui\" }\nmap_model = { path = \"../../map_model\" }\nreqwest = { version = \"0.11.17\", optional = true, default-features=false, features=[\"blocking\", \"rustls-tls\"] }\nstructopt = { workspace = true }\nwidgetry = { path = \"../../widgetry\" }\nxmltree = \"0.10.1\"\n\n\n# apps/parking_mapper/src/mapper.rs [5005 tokens]:\n\nDescription:\nThis file implements a parking mapper application that allows users to visualize and manage parking data on roads.\n\nExternal Imports:\n- anyhow\n- reqwest\n- fs_err\n- xmltree\n\nInternal Imports:\n- abstutil\n- geom\n- map_gui\n- map_model\n- widgetry\n\nClasses:\n- {'name': 'ParkingMapper', 'description': 'Handles the main functionality of the parking mapper application, including displaying roads and managing parking data.'}\n- {'name': 'ChangeWay', 'description': 'Facilitates the process of changing parking information for selected roads.'}\n\nRelationships:\n- ParkingMapper -> abstutil\n- ParkingMapper -> geom\n- ParkingMapper -> map_gui\n- ParkingMapper -> map_model\n- ParkingMapper -> widgetry\n- ChangeWay -> widgetry\n- ChangeWay -> map_model\n\nFunctionalities:\n- Visualizing roads with parking data\n- Managing parking information\n- Generating OSM change files\n- Finding overlapping structures with roads\n- Handling user interactions for road selection and parking mapping\n\n# apps/parking_mapper/src/main.rs [175 tokens]:\n\nDescription:\nThis file sets up and runs a parking mapper application using a graphical user interface.\n\nExternal Imports:\n- log\n- structopt\n- widgetry\n- abstutil\n\nInternal Imports:\n- mapper\n- map_gui\n\nClasses:\n- {'name': 'ParkingMapper', 'description': 'Handles the state and logic for the parking mapping functionality.'}\n- {'name': 'SimpleApp', 'description': 'Manages the overall application state and user interface.'}\n- {'name': 'Options', 'description': 'Stores configuration options for the application.'}\n- {'name': 'SimpleAppArgs', 'description': 'Parses command line arguments for the application.'}\n\nRelationships:\n- ParkingMapper -> SimpleApp\n- SimpleAppArgs -> Options\n- Options -> SimpleApp\n- SimpleApp <- ParkingMapper\n\nFunctionalities:\n- Load application options\n- Override default settings\n- Initialize application context\n- Run graphical user interface\n\n# widgetry/icons/switch_off.svg [1162 tokens]:\n<svg width=\"30\" height=\"16\" viewBox=\"0 0 30 16\" xmlns=\"http://www.w3.org/2000/svg\">\n    <rect fill=\"white\" x=\"0\" y=\"0\" width=\"30\" height=\"16\" rx=\"8\"></rect>\n    <circle fill=\"black\" cx=\"7\" cy=\"8\" r=\"4\"></circle>\n    <path fill=\"black\" d=\"M13.4443 9.30957C13.4443 8.79199 13.5452 8.3265 13.7471 7.91309C13.9521 7.49967 14.2354 7.18066 14.5967 6.95605C14.9613 6.73145 15.3763 6.61914 15.8418 6.61914C16.5612 6.61914 17.1423 6.86816 17.585 7.36621C18.0309 7.86426 18.2539 8.52669 18.2539 9.35352V9.41699C18.2539 9.93132 18.1546 10.3936 17.9561 10.8037C17.7607 11.2106 17.4792 11.528 17.1113 11.7559C16.7467 11.9837 16.3268 12.0977 15.8516 12.0977C15.1354 12.0977 14.5544 11.8486 14.1084 11.3506C13.6657 10.8525 13.4443 10.1934 13.4443 9.37305V9.30957ZM14.3525 9.41699C14.3525 10.0029 14.4876 10.4733 14.7578 10.8281C15.0312 11.1829 15.3958 11.3604 15.8516 11.3604C16.3105 11.3604 16.6751 11.1813 16.9453 10.8232C17.2155 10.4619 17.3506 9.95736 17.3506 9.30957C17.3506 8.73014 17.2122 8.26139 16.9355 7.90332C16.6621 7.54199 16.2975 7.36133 15.8418 7.36133C15.3958 7.36133 15.0361 7.53874 14.7627 7.89355C14.4893 8.24837 14.3525 8.75618 14.3525 9.41699ZM19.8311 12V7.41504H18.9961V6.7168H19.8311V6.1748C19.8311 5.6084 19.9824 5.17057 20.2852 4.86133C20.5879 4.55208 21.016 4.39746 21.5693 4.39746C21.7777 4.39746 21.9844 4.42513 22.1895 4.48047L22.1406 5.21289C21.9876 5.18359 21.8249 5.16895 21.6523 5.16895C21.3594 5.16895 21.1331 5.25521 20.9736 5.42773C20.8141 5.59701 20.7344 5.84115 20.7344 6.16016V6.7168H21.8623V7.41504H20.7344V12H19.8311ZM23.3076 12V7.41504H22.4727V6.7168H23.3076V6.1748C23.3076 5.6084 23.459 5.17057 23.7617 4.86133C24.0645 4.55208 24.4925 4.39746 25.0459 4.39746C25.2542 4.39746 25.4609 4.42513 25.666 4.48047L25.6172 5.21289C25.4642 5.18359 25.3014 5.16895 25.1289 5.16895C24.8359 5.16895 24.6097 5.25521 24.4502 5.42773C24.2907 5.59701 24.2109 5.84115 24.2109 6.16016V6.7168H25.3389V7.41504H24.2109V12H23.3076Z\" />\n</svg>\n\n\n\n# widgetry/icons/switch_on.svg [893 tokens]:\n<svg width=\"30\" height=\"16\" viewBox=\"0 0 30 16\" xmlns=\"http://www.w3.org/2000/svg\">\n    <rect fill=\"white\" x=\"0\" y=\"0\" width=\"30\" height=\"16\" rx=\"8\"></rect>\n    <circle fill=\"black\" cx=\"23\" cy=\"8\" r=\"4\"></circle>\n    <path fill=\"black\" d=\"M5.44434 8.30957C5.44434 7.79199 5.54525 7.3265 5.74707 6.91309C5.95215 6.49967 6.23535 6.18066 6.59668 5.95605C6.96126 5.73145 7.3763 5.61914 7.8418 5.61914C8.5612 5.61914 9.14225 5.86816 9.58496 6.36621C10.0309 6.86426 10.2539 7.52669 10.2539 8.35352V8.41699C10.2539 8.93132 10.1546 9.39355 9.95605 9.80371C9.76074 10.2106 9.47917 10.528 9.11133 10.7559C8.74674 10.9837 8.32682 11.0977 7.85156 11.0977C7.13542 11.0977 6.55436 10.8486 6.1084 10.3506C5.66569 9.85254 5.44434 9.19336 5.44434 8.37305V8.30957ZM6.35254 8.41699C6.35254 9.00293 6.48763 9.47331 6.75781 9.82812C7.03125 10.1829 7.39583 10.3604 7.85156 10.3604C8.31055 10.3604 8.67513 10.1813 8.94531 9.82324C9.21549 9.46191 9.35059 8.95736 9.35059 8.30957C9.35059 7.73014 9.21224 7.26139 8.93555 6.90332C8.66211 6.54199 8.29753 6.36133 7.8418 6.36133C7.39583 6.36133 7.03613 6.53874 6.7627 6.89355C6.48926 7.24837 6.35254 7.75618 6.35254 8.41699ZM12.2412 5.7168L12.2705 6.38086C12.6742 5.87305 13.2015 5.61914 13.8525 5.61914C14.9691 5.61914 15.5322 6.24902 15.542 7.50879V11H14.6387V7.50391C14.6354 7.12305 14.5475 6.84147 14.375 6.65918C14.2057 6.47689 13.9404 6.38574 13.5791 6.38574C13.2861 6.38574 13.029 6.46387 12.8076 6.62012C12.5863 6.77637 12.4137 6.98145 12.29 7.23535V11H11.3867V5.7168H12.2412Z\" />\n</svg>\n\n\n# widgetry/icons/nav_back.svg [126 tokens]:\n<svg width=\"70\" height=\"30\" viewBox=\"0 0 70 30\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\">\n<line x1=\"19\" y1=\"15\" x2=\"63\" y2=\"15\" stroke=\"white\" stroke-width=\"8\" stroke-linecap=\"round\"/>\n<path d=\"M-6.99382e-07 15L24.75 1.1436L24.75 28.8564L-6.99382e-07 15Z\" fill=\"white\"/>\n</svg>\n\n\n# widgetry/icons/toggle_right.svg [87 tokens]:\n<svg width=\"30\" height=\"16\" viewBox=\"0 0 30 16\" xmlns=\"http://www.w3.org/2000/svg\">\n    <rect fill=\"white\" x=\"0\" y=\"0\" width=\"30\" height=\"16\" rx=\"8\"></rect>\n    <circle fill=\"black\" cx=\"23\" cy=\"8\" r=\"4\"></circle>\n</svg>\n\n\n# widgetry/icons/checkbox_unchecked.svg [78 tokens]:\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n    <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" stroke-width=\"2\" stroke=\"black\" fill=\"white\" fill-opacity=\"0.0\"></rect>\n</svg>\n\n# widgetry/icons/arrow_left.svg [114 tokens]:\n<svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M15 8.25H5.8725L10.065 4.0575L9 3L3 9L9 15L10.0575 13.9425L5.8725 9.75H15V8.25Z\" fill=\"#F2F2F2\"/>\n</svg>\n\n\n# widgetry/icons/arrow_up.svg [111 tokens]:\n<svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M3 9L4.0575 10.0575L8.25 5.8725V15H9.75V5.8725L13.935 10.065L15 9L9 3L3 9Z\" fill=\"#F2F2F2\"/>\n</svg>\n\n\n# widgetry/icons/arrow_right.svg [113 tokens]:\n<svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M9 3L7.9425 4.0575L12.1275 8.25H3V9.75H12.1275L7.9425 13.9425L9 15L15 9L9 3Z\" fill=\"#F2F2F2\"/>\n</svg>\n\n\n# widgetry/icons/close.svg [166 tokens]:\n<svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M11.25 1.8075L10.1925 0.75L6 4.9425L1.8075 0.75L0.75 1.8075L4.9425 6L0.75 10.1925L1.8075 11.25L6 7.0575L10.1925 11.25L11.25 10.1925L7.0575 6L11.25 1.8075Z\" fill=\"#F2F2F2\"/>\n</svg>\n\n\n# widgetry/icons/prev.svg [114 tokens]:\n<svg width=\"6\" height=\"10\" viewBox=\"0 0 6 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M5.5575 8.4425L2.1225 5L5.5575 1.5575L4.5 0.5L0 5L4.5 9.5L5.5575 8.4425Z\" fill=\"#F2F2F2\"/>\n</svg>\n\n\n# widgetry/icons/arrow_drop_down.svg [82 tokens]:\n<svg width=\"8\" height=\"5\" viewBox=\"0 0 8 5\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.25 0.5L4 4.25L7.75 0.5H0.25Z\" fill=\"#F2F2F2\"/>\n</svg>\n\n\n# widgetry/icons/loading.svg [649 tokens]:\n<svg width=\"21\" height=\"21\" viewBox=\"0 0 21 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"10.5\" cy=\"10.5\" r=\"9.5\" fill=\"#F2F2F2\" stroke=\"#EE702E\" stroke-width=\"2\"/>\n<path d=\"M14.3907 14.0722L14.3907 6.63816C14.3907 6.21263 14.1 5.86913 13.7399 5.86913C13.3799 5.86913 13.0892 6.21263 13.0892 6.63816L13.0892 9.45796H12.6554L12.6554 5.10009C12.6554 4.67455 12.3647 4.33105 12.0047 4.33105C11.6446 4.33105 11.354 4.67455 11.354 5.10009L11.354 9.45796H10.9201L10.9201 4.5874C10.9201 4.16186 10.6295 3.81836 10.2694 3.81836C9.90935 3.81836 9.61869 4.16186 9.61869 4.5874L9.61869 9.45796H9.18488L9.18488 5.86913C9.18488 5.44359 8.89422 5.10009 8.53415 5.10009C8.17409 5.10009 7.88343 5.44359 7.88343 5.86913L7.88343 11.9753C7.88343 11.9753 6.03104 10.7192 6.01368 10.7141C6.01368 10.7141 5.67485 10.487 5.39888 10.5386C5.12292 10.5901 4.92563 10.9172 4.92563 10.9172C4.92563 10.9172 4.83236 11.0885 4.84672 11.4216C4.88619 12.3369 8.25217 15.5129 8.25217 15.5129C8.57754 15.9025 9.02003 16.123 9.48855 16.123L12.6554 16.123C13.6098 16.123 14.3907 15.2001 14.3907 14.0722Z\" fill=\"#EE702E\"/>\n</svg>\n\n\n# widgetry/icons/arrow_down.svg [111 tokens]:\n<svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M15 9L13.9425 7.9425L9.75 12.1275V3H8.25V12.1275L4.065 7.935L3 9L9 15L15 9Z\" fill=\"#F2F2F2\"/>\n</svg>\n\n\n# widgetry/icons/checkbox_no_border_checked.svg [117 tokens]:\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n    <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" fill=\"black\"></rect>\n    <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\" fill=\"white\"/>\n</svg>\n\n# widgetry/icons/toggle_left.svg [87 tokens]:\n<svg width=\"30\" height=\"16\" viewBox=\"0 0 30 16\" xmlns=\"http://www.w3.org/2000/svg\">\n    <rect fill=\"white\" x=\"0\" y=\"0\" width=\"30\" height=\"16\" rx=\"8\"></rect>\n    <circle fill=\"black\" cx=\"7\" cy=\"8\" r=\"4\"></circle>\n</svg>\n\n\n\n# widgetry/icons/next.svg [113 tokens]:\n<svg width=\"6\" height=\"10\" viewBox=\"0 0 6 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.442505 8.4425L3.8775 5L0.442505 1.5575L1.5 0.5L6 5L1.5 9.5L0.442505 8.4425Z\" fill=\"#F2F2F2\"/>\n</svg>\n\n\n\n# widgetry/icons/checkbox_checked.svg [131 tokens]:\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n    <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" stroke-width=\"2\" stroke=\"black\" fill=\"white\" fill-opacity=\"0\"></rect>\n    <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\" fill=\"black\"/>\n</svg>\n\n# widgetry/icons/arrow_keys.svg [142 tokens]:\n<svg width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M9 8H13V5H16L11 0L6 5H9V8ZM8 9H5V6L0 11L5 16V13H8V9ZM22 11L17 6V9H14V13H17V16L22 11ZM13 14H9V17H6L11 22L16 17H13V14Z\" fill=\"#7FFA4D\"/>\n</svg>\n\n\n# widgetry/icons/checkbox_no_border_unchecked.svg [62 tokens]:\n<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n    <rect x=\"0\" y=\"0\" width=\"24\" height=\"24\" fill=\"black\"></rect>\n</svg>\n\n# widgetry/shaders/vertex_webgl1.glsl [397 tokens]:\n\nDescription:\nThis file defines a vertex shader for WebGL1 that transforms 3D positions into 2D screen coordinates and outputs texture coordinates.\n\nFunctionalities:\n- Transforms 3D vertex positions to 2D screen coordinates\n- Outputs color and texture coordinates for fragment shading\n- Handles zoom and translation based on uniform inputs\n\n# widgetry/shaders/fragment_webgl1.glsl [379 tokens]:\n\nDescription:\nThis file contains a fragment shader for WebGL 1.0 that handles color output and texture application, defaulting to a white texture due to limitations in texture loading.\n\nFunctionalities:\n- Color output manipulation\n- Texture application handling\n- Fallback for texture loading in WebGL 1.0\n\n# widgetry/shaders/vertex_300.glsl [424 tokens]:\n\nDescription:\nThis file defines a vertex shader for rendering graphics with transformations and texture mapping.\n\nFunctionalities:\n- Transforms vertex positions based on zoom and offsets\n- Maps positions to normalized device coordinates\n- Handles color attributes for vertices\n- Calculates texture coordinates for rendering\n\n# widgetry/shaders/vertex_140.glsl [411 tokens]:\n\nDescription:\nThis file defines a vertex shader that transforms 3D positions into normalized device coordinates and handles texture coordinates for rendering.\n\nFunctionalities:\n- Transforms 3D vertex positions to screen coordinates\n- Calculates normalized device coordinates (NDC)\n- Handles texture coordinate mapping\n- Outputs vertex color and texture index\n\n# widgetry/shaders/fragment_140.glsl [194 tokens]:\n\nDescription:\nThis file defines a fragment shader that processes texture data and applies color transformations.\n\nFunctionalities:\n- Texture sampling\n- Color manipulation\n- Alpha blending\n- Grayscale conversion (commented out)\n\n# widgetry/shaders/fragment_300.glsl [131 tokens]:\n\nDescription:\nThis file defines a fragment shader that processes texture colors based on a transformation and outputs the final color.\n\nFunctionalities:\n- Texture sampling\n- Color manipulation\n- Output color generation\n\n# widgetry/src/tools/popup.rs [432 tokens]:\n\nDescription:\nThis file defines a popup message dialog that displays a message and an OK button for user interaction.\n\nInternal Imports:\n- crate::hotkeys\n- crate::DrawBaselayer\n- crate::EventCtx\n- crate::GfxCtx\n- crate::Key\n- crate::Line\n- crate::Outcome\n- crate::Panel\n- crate::State\n- crate::Text\n- crate::Transition\n- crate::Widget\n\nClasses:\n- {'name': 'PopupMsg', 'description': 'Displays a message dialog with an OK button.'}\n\nRelationships:\n- PopupMsg -> Panel\n- PopupMsg -> Text\n- PopupMsg -> Widget\n- PopupMsg -> EventCtx\n- PopupMsg -> GfxCtx\n- PopupMsg -> DrawBaselayer\n- PopupMsg -> State\n\nFunctionalities:\n- Display a message dialog\n- Handle user events\n- Draw the dialog on the screen\n- Manage transitions based on user input\n\n# widgetry/src/tools/choose_something.rs [517 tokens]:\n\nDescription:\nThis file implements a state for choosing an item from a menu and handling the selection through a callback.\n\nInternal Imports:\n- Choice\n- DrawBaselayer\n- EventCtx\n- GfxCtx\n- Line\n- Menu\n- Outcome\n- Panel\n- State\n- Transition\n- Widget\n\nClasses:\n- {'name': 'ChooseSomething', 'description': 'Manages a menu for selecting an item and executing a callback with the chosen item.'}\n\nRelationships:\n- ChooseSomething -> Panel\n- ChooseSomething -> Menu\n- ChooseSomething -> EventCtx\n- ChooseSomething -> Transition\n- ChooseSomething -> Outcome\n\nFunctionalities:\n- Display a menu for item selection\n- Handle user interactions with the menu\n- Execute a callback with the selected item\n- Manage state transitions based on user input\n\n# widgetry/src/tools/warper.rs [523 tokens]:\n\nDescription:\nThis file defines a Warper struct that handles camera zooming and line animation in a graphical context.\n\nExternal Imports:\n- instant\n- geom\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'Warper', 'description': 'Handles the animation of camera zooming and positioning based on user input.'}\n\nRelationships:\n- Warper -> EventCtx\n- Warper -> Pt2D\n- Warper -> Line\n- Warper -> UpdateType\n\nFunctionalities:\n- Camera zooming\n- Line animation\n- Event handling\n- Update requests\n\n# widgetry/src/tools/colors.rs [1841 tokens]:\n\nDescription:\nThe test file covers the functionality of the ColorScale class and its methods.\n\nInternal Imports:\n- Color\n- ColorScale\n\nClasses:\n- ColorScale\n\nTest Cases:\n- Testing inner evaluation of color scale with two colors\n- Testing inner evaluation of color scale with three colors\n\n# widgetry/src/tools/lasso.rs [759 tokens]:\n\nDescription:\nThis file provides functionality for drawing freehand polygons and polylines using a lasso tool.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'Lasso', 'description': 'Handles the creation and drawing of freehand polygons.'}\n- {'name': 'PolyLineLasso', 'description': 'Handles the creation and drawing of freehand polylines.'}\n\nRelationships:\n- Lasso -> EventCtx\n- Lasso -> GfxCtx\n- PolyLineLasso -> EventCtx\n- PolyLineLasso -> GfxCtx\n\nFunctionalities:\n- Drawing freehand shapes\n- Handling mouse events for shape creation\n- Managing shape state during interaction\n\n# widgetry/src/tools/prompt_input.rs [485 tokens]:\n\nDescription:\nThis file implements a prompt for arbitrary text input and handles user interactions with it.\n\nInternal Imports:\n- DrawBaselayer\n- EventCtx\n- GfxCtx\n- Key\n- Line\n- Outcome\n- Panel\n- State\n- TextBox\n- Transition\n- Widget\n\nClasses:\n- {'name': 'PromptInput', 'description': 'Handles the creation and management of a text input prompt.'}\n\nRelationships:\n- PromptInput -> Panel\n- PromptInput -> TextBox\n- PromptInput -> Transition\n- PromptInput -> EventCtx\n- PromptInput -> GfxCtx\n- PromptInput -> DrawBaselayer\n- PromptInput -> State\n\nFunctionalities:\n- Create a text input prompt\n- Handle user events for input confirmation and closure\n- Draw the input prompt on the screen\n- Manage callback execution after input is confirmed\n\n# widgetry/src/drawing.rs [2389 tokens]:\n\nDescription:\nThis file handles the graphics context for rendering in a graphical application, managing transformations, drawing operations, and asset uploads.\n\nExternal Imports:\n- std\n- geom\n\nInternal Imports:\n- crate::assets\n- crate::backend\n- crate\n- Canvas\n- Color\n- Drawable\n- EventCtx\n- GeomBatch\n- Key\n- ScreenDims\n- ScreenPt\n- ScreenRectangle\n- Style\n- Text\n\nClasses:\n- {'name': 'Uniforms', 'description': 'Holds transformation and window parameters for rendering.'}\n- {'name': 'GfxCtx', 'description': 'Manages the graphics context for rendering operations.'}\n- {'name': 'Prerender', 'description': 'Handles asset management and upload operations for rendering.'}\n\nRelationships:\n- GfxCtx -> Uniforms\n- GfxCtx -> Prerender\n- Prerender -> Assets\n- Prerender -> GfxCtx\n- Uniforms <- GfxCtx\n\nFunctionalities:\n- Manage rendering transformations\n- Handle drawing operations\n- Upload graphical assets\n- Support for screen capturing\n- Enable and disable clipping regions\n- Draw tooltips and other UI elements\n\n# widgetry/src/backend_glow_native.rs [781 tokens]:\n\nDescription:\nThis file sets up a windowed OpenGL context using the glutin library and manages rendering through a custom WindowAdapter.\n\nExternal Imports:\n- winit\n- glutin\n- glow\n\nInternal Imports:\n- backend_glow\n- ScreenDims\n- Settings\n\nClasses:\n- {'name': 'WindowAdapter', 'description': 'Manages the window context and handles resizing and buffer swapping.'}\n\nRelationships:\n- WindowAdapter -> glutin::WindowedContext\n- setup -> backend_glow::build_program\n- setup -> backend_glow::PrerenderInnards\n\nFunctionalities:\n- Setup an OpenGL context\n- Create a window\n- Handle window resizing\n- Manage rendering process\n\n# widgetry/src/color.rs [2424 tokens]:\n\nDescription:\nThis file defines color representations and fill styles for graphical rendering.\n\nExternal Imports:\n- std\n- serde\n\nInternal Imports:\n- geom\n\nClasses:\n- {'name': 'Color', 'description': 'Represents a color with red, green, blue, and alpha components.'}\n- {'name': 'Fill', 'description': 'An enum representing different fill styles, including solid colors, gradients, and textures.'}\n- {'name': 'Texture', 'description': 'Represents a texture identified by a unique ID.'}\n- {'name': 'LinearGradient', 'description': 'Represents a linear gradient fill style with color stops.'}\n\nRelationships:\n- Color -> LinearGradient\n- Fill -> Color\n- Fill -> Texture\n- LinearGradient -> Color\n- Texture -> Fill\n\nFunctionalities:\n- Color manipulation and representation\n- Fill style definitions\n- Linear gradient interpolation\n- Texture management and representation\n\n# widgetry/src/lib.rs [1895 tokens]:\n\nDescription:\nThis file defines various widgets and their functionalities for a graphical user interface library.\n\nExternal Imports:\n- anyhow\n- log\n\nInternal Imports:\n- app_state\n- backend\n- canvas\n- color\n- drawing\n- event\n- event_ctx\n- geom\n- input\n- runner\n- screen_geom\n- style\n- text\n- tools\n- widgets\n\nClasses:\n- {'name': 'ControlState', 'description': 'Represents the different states a control can be in.'}\n- {'name': 'ContentMode', 'description': 'Defines how content should stretch to fill its bounds.'}\n- {'name': 'Choice', 'description': 'Represents a selectable choice with a label and associated data.'}\n\nRelationships:\n- ControlState -> app_state\n- ContentMode -> app_state\n- Choice -> event_ctx\n- Choice -> widgets\n\nFunctionalities:\n- Defines widget states and modes\n- Creates and manages selectable choices\n- Handles graphical rendering and user input\n\n# widgetry/src/backend_glow_wasm.rs [1928 tokens]:\n\nDescription:\nThis file sets up a WebGL context for rendering graphics in a widgetry application using the Winit event loop.\n\nExternal Imports:\n- anyhow\n- wasm_bindgen\n- winit\n\nInternal Imports:\n- crate::assets\n- crate::backend_glow\n- crate::Canvas\n- crate::Event\n- crate::EventCtx\n- crate::GfxCtx\n- crate::Prerender\n- crate::ScreenDims\n- crate::Settings\n- crate::Style\n- crate::UserInput\n\nClasses:\n- {'name': 'WindowAdapter', 'description': 'Manages a Winit window and handles window resizing and drawing completion.'}\n- {'name': 'RenderOnly', 'description': 'Sets up a render-only mode for widgetry that draws to a WebGL context without handling events.'}\n\nRelationships:\n- WindowAdapter -> winit::window::Window\n- RenderOnly -> web_sys::WebGlRenderingContext\n- RenderOnly -> Prerender\n- RenderOnly -> Canvas\n- RenderOnly -> Style\n- RenderOnly -> Settings\n- RenderOnly -> UserInput\n- RenderOnly -> EventCtx\n- RenderOnly -> GfxCtx\n- RenderOnly -> Assets\n- RenderOnly -> PrerenderInnards\n- RenderOnly -> ScreenDims\n\nFunctionalities:\n- Setup WebGL context\n- Handle window resizing\n- Render graphics\n- Manage application state\n- Provide event context for rendering\n\n# widgetry/src/style/button_style.rs [1306 tokens]:\n\nDescription:\nThis file defines the styling and behavior of buttons in a GUI framework.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'ButtonStyle', 'description': 'Defines the appearance and behavior of buttons.'}\n- {'name': 'Style', 'description': 'Contains methods for creating styled buttons.'}\n\nRelationships:\n- ButtonStyle -> ButtonBuilder\n- ButtonStyle -> Color\n- ButtonStyle -> OutlineStyle\n- Style -> ButtonBuilder\n- Style -> ButtonStyle\n\nFunctionalities:\n- Button styling and customization\n- Button creation with icons and text\n- Dropdown and popup button creation\n- Button action binding and layout management\n\n# widgetry/src/style/mod.rs [2128 tokens]:\n\nDescription:\nThis file defines styling configurations for UI components, including button styles and overall application styles.\n\nInternal Imports:\n- Color\n- Text\n- button_style\n\nClasses:\n- {'name': 'Style', 'description': 'Represents the overall styling configuration for the UI.'}\n- {'name': 'ButtonStyle', 'description': 'Defines various styles for buttons used in the UI.'}\n\nRelationships:\n- Style -> Color\n- Style -> Text\n- Style -> ButtonStyle\n- ButtonStyle -> Color\n\nFunctionalities:\n- Defines color and style configurations for UI components\n- Provides different button styles\n- Creates light and dark theme styles for the application\n\n# widgetry/src/event.rs [4436 tokens]:\n\nDescription:\nThis file defines event handling for mouse and keyboard interactions in a graphical application.\n\nExternal Imports:\n- instant\n- winit\n- geom\n\nInternal Imports:\n- EventCtx\n- Line\n- ScreenDims\n- ScreenPt\n- TextSpan\n\nClasses:\n- {'name': 'Event', 'description': 'Represents various events related to mouse and keyboard input.'}\n- {'name': 'Key', 'description': 'Enumerates keyboard keys and provides utility functions for key handling.'}\n- {'name': 'MultiKey', 'description': 'Represents combinations of keys for hotkey functionality.'}\n\nRelationships:\n- Event -> EventCtx\n- Event -> Line\n- Event -> ScreenDims\n- Event -> ScreenPt\n- Event -> TextSpan\n- Key -> EventCtx\n- Key -> Line\n- Key -> TextSpan\n- MultiKey -> EventCtx\n- MultiKey -> Line\n\nFunctionalities:\n- Event creation from window events\n- Key mapping and character conversion\n- Mouse event handling\n- Multi-key representation and description\n\n# widgetry/src/runner.rs [4206 tokens]:\n\nDescription:\nThis file implements the main event loop and state management for a graphical application using the widgetry library.\n\nExternal Imports:\n- std\n- image\n- instant\n- winit\n- abstutil\n- geom\n\nInternal Imports:\n- app_state\n- assets\n- tools\n- canvas\n\nClasses:\n- {'name': 'State', 'description': 'Manages the application state and handles events.'}\n- {'name': 'Settings', 'description': 'Configures the application settings.'}\n\nRelationships:\n- State -> App\n- State -> Canvas\n- State -> Style\n- State -> Prerender\n- Settings -> CanvasSettings\n\nFunctionalities:\n- Event handling\n- Rendering and drawing\n- Application state management\n- Window management\n- User input processing\n\n# widgetry/src/backend_glow.rs [4780 tokens]:\n\nDescription:\nThis file implements a backend for rendering graphics using OpenGL with the Glow library.\n\nExternal Imports:\n- glow\n- image\n- anyhow\n- winit\n\nInternal Imports:\n- crate::drawing\n- crate::backend_glow_native\n- crate::backend_glow_wasm\n- crate::Canvas\n- crate::Color\n- crate::EventCtx\n- crate::GeomBatch\n- crate::GfxCtx\n- crate::ScreenDims\n- crate::ScreenRectangle\n\nClasses:\n- {'name': 'GfxCtxInnards', 'description': 'Handles the graphics context for rendering frames.'}\n- {'name': 'Drawable', 'description': 'Represents geometry that has been uploaded to the GPU for rendering.'}\n- {'name': 'VertexArray', 'description': 'Manages OpenGL vertex array objects.'}\n- {'name': 'Buffer', 'description': 'Manages OpenGL buffer objects.'}\n- {'name': 'PrerenderInnards', 'description': 'Handles pre-rendering tasks and manages the graphics context.'}\n- {'name': 'SpriteTexture', 'description': 'Handles the uploading and management of sprite textures.'}\n\nRelationships:\n- GfxCtxInnards -> glow::Context\n- Drawable -> GfxCtxInnards\n- Drawable -> glow::Context\n- VertexArray -> glow::Context\n- Buffer -> glow::Context\n- PrerenderInnards -> glow::Context\n- PrerenderInnards -> WindowAdapter\n- SpriteTexture -> glow::Context\n- SpriteTexture -> image::DynamicImage\n\nFunctionalities:\n- Building and compiling OpenGL shader programs\n- Managing OpenGL rendering context and state\n- Uploading geometry data to the GPU\n- Handling sprite textures and their uploads\n- Managing clipping regions for rendering\n- Clearing the rendering context\n- Requesting window redraws and managing window properties\n\n# widgetry/src/geom/geom_batch_stack.rs [953 tokens]:\n\nDescription:\nThis file defines a structure for stacking geometric batches in a specified axis and alignment, following a builder pattern.\n\nInternal Imports:\n- crate::GeomBatch\n\nClasses:\n- {'name': 'Axis', 'description': 'An enumeration representing the orientation of the stack (Horizontal or Vertical).'}\n- {'name': 'Alignment', 'description': 'An enumeration representing the alignment of the stacked items (Center, Top, Left).'}\n- {'name': 'GeomBatchStack', 'description': 'A structure that manages a collection of GeomBatch items, allowing for stacking them with specified axis, alignment, and spacing.'}\n\nRelationships:\n- GeomBatchStack -> GeomBatch\n\nFunctionalities:\n- Defines enumerations for axis and alignment\n- Creates and manages a stack of geometric batches\n- Allows configuration of stacking properties like axis, alignment, and spacing\n- Generates a combined geometric batch from the stack.\n\n# widgetry/src/geom/mod.rs [3211 tokens]:\n\nDescription:\nThis file defines a mutable builder for a group of colored tessellated polygons, allowing for various transformations and rendering options.\n\nExternal Imports:\n- serde\n- geojson\n\nInternal Imports:\n- geom\n- crate::svg\n- crate::Color\n- crate::DeferDraw\n- crate::Drawable\n- crate::EventCtx\n- crate::Fill\n- crate::GfxCtx\n- crate::JustDraw\n- crate::Prerender\n- crate::ScreenDims\n- crate::Widget\n\nClasses:\n- {'name': 'GeomBatch', 'description': 'A mutable builder for managing and rendering a collection of colored tessellated polygons.'}\n- {'name': 'RewriteColor', 'description': 'A way to transform colors in a GeomBatch.'}\n\nRelationships:\n- GeomBatch -> Fill\n- GeomBatch -> Tessellation\n- GeomBatch -> GfxCtx\n- GeomBatch -> EventCtx\n- GeomBatch -> Drawable\n- GeomBatch -> Widget\n- RewriteColor -> Color\n\nFunctionalities:\n- Creating and managing a collection of polygons\n- Transforming polygons (translation, rotation, scaling)\n- Drawing polygons to a graphics context\n- Loading SVG graphics\n- Exporting to GeoJSON format\n- Color manipulation within the batch\n\n# widgetry/src/canvas.rs [3294 tokens]:\n\nDescription:\nThis file implements a canvas for rendering and interacting with graphical elements, including panning and zooming functionality.\n\nExternal Imports:\n- serde\n\nInternal Imports:\n- geom\n- crate\n\nClasses:\n- {'name': 'Canvas', 'description': 'Represents a drawable canvas with camera controls for panning and zooming.'}\n- {'name': 'CanvasSettings', 'description': 'Holds configuration settings for the Canvas, such as scroll behavior and zoom levels.'}\n\nRelationships:\n- Canvas -> CanvasSettings\n- CanvasSettings <- Canvas\n\nFunctionalities:\n- Rendering graphical elements\n- Handling user input for interaction\n- Panning and zooming the view\n- Managing covered areas for interaction\n- Calculating screen-to-map coordinate transformations\n\n# widgetry/src/event_ctx.rs [2574 tokens]:\n\nDescription:\nThis file defines the EventCtx struct for managing events and rendering in a graphical application.\n\nExternal Imports:\n- std\n- instant\n- abstutil\n- geom\n\nInternal Imports:\n- crate\n- svg\n- Canvas\n- CanvasSettings\n- Color\n- Drawable\n- Event\n- GeomBatch\n- GfxCtx\n- HorizontalAlignment\n- Key\n- Line\n- Panel\n- PanelDims\n- Prerender\n- ScreenDims\n- Style\n- Text\n- UserInput\n- VerticalAlignment\n- Widget\n\nClasses:\n- {'name': 'EventCtx', 'description': 'Manages user input and rendering context for events.'}\n- {'name': 'LoadingScreen', 'description': 'Handles the display of a loading screen with progress information.'}\n\nRelationships:\n- EventCtx -> Canvas\n- EventCtx -> Prerender\n- EventCtx -> Style\n- EventCtx -> UserInput\n- EventCtx -> GeomBatch\n- EventCtx -> Drawable\n- LoadingScreen -> Prerender\n- LoadingScreen -> Canvas\n- LoadingScreen -> Style\n- LoadingScreen -> EventCtx\n\nFunctionalities:\n- Manage user input and events\n- Render graphics and UI components\n- Handle loading screens and display progress\n- Control canvas movement and zooming\n- Load and manage fonts and textures\n\n# widgetry/src/app_state.rs [2757 tokens]:\n\nDescription:\nThis file defines the application state management for a widgetry application, handling transitions between different states and managing shared application data.\n\nExternal Imports:\n- abstutil\n\nInternal Imports:\n- Canvas\n- Color\n- EventCtx\n- GfxCtx\n- Outcome\n- Panel\n\nClasses:\n- {'name': 'SharedAppState', 'description': 'A trait for managing global shared state in the application.'}\n- {'name': 'App', 'description': 'A struct that manages a stack of application states and shared application state.'}\n- {'name': 'DrawBaselayer', 'description': 'An enum that specifies how to draw the base layer before the main drawing.'}\n- {'name': 'State', 'description': 'A trait for defining the behavior of individual application states.'}\n- {'name': 'Transition', 'description': 'An enum that represents different types of state transitions.'}\n- {'name': 'SimpleState', 'description': 'A trait for simplifying the implementation of states that manage a panel.'}\n- {'name': 'SimpleStateWrapper', 'description': 'A struct that wraps a SimpleState and manages its associated panel.'}\n\nRelationships:\n- App -> SharedAppState\n- App -> State\n- App -> Transition\n- State -> Transition\n- SimpleStateWrapper -> SimpleState\n- SimpleStateWrapper -> Panel\n- SimpleState -> Panel\n\nFunctionalities:\n- Manage application state transitions\n- Handle events for different application states\n- Draw application states and shared data\n- Free memory for unused resources\n- Handle UI interactions through panels\n\n# widgetry/src/mapspace/mod.rs [909 tokens]:\n\nDescription:\nThis file defines a structure for drawing graphical elements that change appearance based on the zoom level in a map interface.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- unzoomed\n- world\n\nClasses:\n- {'name': 'ToggleZoomed', 'description': 'Manages two drawable representations of an object, one for zoomed-in and one for zoomed-out views.'}\n- {'name': 'ToggleZoomedBuilder', 'description': 'Facilitates the construction of a ToggleZoomed instance with customizable properties.'}\n\nRelationships:\n- ToggleZoomed -> Drawable\n- ToggleZoomedBuilder -> GeomBatch\n- ToggleZoomedBuilder -> Fill\n- ToggleZoomedBuilder -> RewriteColor\n- ToggleZoomed -> ToggleZoomedBuilder\n- ToggleZoomedBuilder -> ToggleZoomed\n\nFunctionalities:\n- Drawing graphical elements based on zoom level\n- Building drawable objects with customizable properties\n- Transforming colors of graphical elements\n- Appending multiple drawable configurations\n\n# widgetry/src/text.rs [4653 tokens]:\n\nDescription:\nThis file handles text rendering and layout for a graphical user interface, providing various text styling options.\n\nExternal Imports:\n- std\n- usvg\n- usvg_text_layout\n\nInternal Imports:\n- crate::assets\n- crate::svg\n- crate::Color\n- crate::DeferDraw\n- crate::EventCtx\n- crate::GeomBatch\n- crate::JustDraw\n- crate::MultiKey\n- crate::ScreenDims\n- crate::Style\n- crate::Widget\n\nClasses:\n- {'name': 'Font', 'description': 'Defines various font styles used in text rendering.'}\n- {'name': 'TextSpan', 'description': 'Represents a span of text with styling options.'}\n- {'name': 'Text', 'description': 'Manages multiple lines of text and their rendering.'}\n\nRelationships:\n- TextSpan -> Style\n- Text -> Assets\n- TextSpan -> Color\n- Text -> Widget\n- Text -> EventCtx\n- Text -> GeomBatch\n\nFunctionalities:\n- Text rendering\n- Text styling\n- Text layout management\n- Text caching\n- Text wrapping\n\n# widgetry/src/input.rs [898 tokens]:\n\nDescription:\nThis file handles user input events and their processing in a graphical application.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate::Canvas\n- crate::Event\n- crate::Key\n- crate::MultiKey\n- crate::ScreenPt\n\nClasses:\n- {'name': 'UserInput', 'description': 'Manages and processes user input events.'}\n\nRelationships:\n- UserInput -> Canvas\n- UserInput -> Event\n- UserInput -> Key\n- UserInput -> MultiKey\n- UserInput -> ScreenPt\n\nFunctionalities:\n- Event handling\n- Key press detection\n- Mouse button detection\n- Mouse movement tracking\n- Mouse scroll detection\n- Window event handling\n- Update event management\n\n# widgetry/src/assets.rs [1537 tokens]:\n\nDescription:\nThis file defines the Assets struct for managing text and SVG assets in a graphical application.\n\nExternal Imports:\n- std\n- lru\n- usvg_text_layout\n\nInternal Imports:\n- geom\n- crate::text\n- crate::EventCtx\n- crate::GeomBatch\n- crate::GfxCtx\n- crate::Prerender\n- crate::Style\n\nClasses:\n- {'name': 'Assets', 'description': 'Manages fonts, text, and SVG assets for rendering.'}\n\nRelationships:\n- Assets -> geom\n- Assets -> crate::text\n- Assets -> crate::EventCtx\n- Assets -> crate::GeomBatch\n- Assets -> crate::GfxCtx\n- Assets -> crate::Prerender\n- Assets -> crate::Style\n\nFunctionalities:\n- Loading and caching fonts\n- Managing text and SVG rendering\n- Calculating line heights\n- Caching text geometries\n- Clearing text cache\n\n# widgetry/src/screen_geom.rs [1578 tokens]:\n\nDescription:\nThis file defines data structures and functionalities for handling screen coordinates and dimensions in logical pixel units.\n\nExternal Imports:\n- serde\n- winit\n\nInternal Imports:\n- geom\n- crate\n\nClasses:\n- {'name': 'ScreenPt', 'description': 'Represents a point in screen space using logical pixel coordinates.'}\n- {'name': 'ScreenRectangle', 'description': 'Defines a rectangle in screen space using logical pixel coordinates.'}\n- {'name': 'ScreenDims', 'description': 'Represents dimensions in screen space using logical pixel units.'}\n\nRelationships:\n- ScreenPt -> geom::Pt2D\n- ScreenRectangle -> ScreenPt\n- ScreenRectangle -> ScreenDims\n- ScreenDims -> EdgeInsets\n- ScreenDims -> Canvas\n\nFunctionalities:\n- Creating and manipulating screen points and rectangles\n- Converting between screen and logical dimensions\n- Calculating containment and percentage positions within rectangles\n- Padding dimensions with edge insets\n- Determining top-left positions for corners within a canvas\n\n# widgetry/src/widgets/stash.rs [268 tokens]:\n\nDescription:\nThis file defines an invisible widget that allows users to store and retrieve arbitrary data on a panel.\n\nExternal Imports:\n- std\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'Stash', 'description': 'A widget that stores arbitrary data and allows reading and writing of that data.'}\n\nRelationships:\n- Stash -> Widget\n- Stash -> RefCell\n- Stash -> Rc\n- Widget <- Stash\n- RefCell <- Stash\n- Rc <- Stash\n\nFunctionalities:\n- Store arbitrary data\n- Retrieve stored data\n- Create a new widget\n\n# widgetry/src/widgets/containers.rs [523 tokens]:\n\nDescription:\nThis file defines widget containers for organizing and managing child widgets in a GUI framework.\n\nInternal Imports:\n- crate::EventCtx\n- crate::GfxCtx\n- crate::Outcome\n- crate::ScreenDims\n- crate::ScreenPt\n- crate::Widget\n- crate::WidgetImpl\n- crate::WidgetOutput\n\nClasses:\n- {'name': 'Nothing', 'description': 'Represents a placeholder widget that does not perform any operations.'}\n- {'name': 'Container', 'description': 'Manages a collection of widgets, allowing them to be organized in a row or column.'}\n\nRelationships:\n- Container -> Widget\n- Container -> EventCtx\n- Container -> GfxCtx\n- Container -> Outcome\n- Container -> ScreenDims\n- Container -> ScreenPt\n- Container -> WidgetOutput\n- Nothing -> Widget\n\nFunctionalities:\n- Widget management\n- Event handling\n- Drawing widgets\n- Dimension calculation\n\n# widgetry/src/widgets/drag_drop.rs [2569 tokens]:\n\nDescription:\nThis file implements a drag-and-drop widget for managing a collection of cards.\n\nInternal Imports:\n- Drawable\n- EventCtx\n- GeomBatch\n- GeomBatchStack\n- GfxCtx\n- Outcome\n- ScreenDims\n- ScreenPt\n- ScreenRectangle\n- StackAlignment\n- StackAxis\n- Widget\n- WidgetImpl\n- WidgetOutput\n\nClasses:\n- {'name': 'DragDrop', 'description': 'A widget that allows users to drag and drop cards.'}\n- {'name': 'Card', 'description': 'Represents an individual card with its value and graphical representations.'}\n- {'name': 'State', 'description': 'Represents the various states of the DragDrop widget during interaction.'}\n\nRelationships:\n- DragDrop -> Card\n- DragDrop -> State\n- Card <- DragDrop\n- State <- DragDrop\n\nFunctionalities:\n- Manage card selection and hovering states\n- Handle drag-and-drop interactions\n- Render graphical representations of cards\n- Emit events based on user interactions\n\n# widgetry/src/widgets/text_box.rs [1210 tokens]:\n\nDescription:\nThis file defines a TextBox widget for user input in a graphical interface.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- EdgeInsets\n- EventCtx\n- GeomBatch\n- GfxCtx\n- Key\n- Line\n- Outcome\n- ScreenDims\n- ScreenPt\n- ScreenRectangle\n- Style\n- Text\n- Widget\n- WidgetImpl\n- WidgetOutput\n\nClasses:\n- {'name': 'TextBox', 'description': 'Represents a text input box with cursor management and focus handling.'}\n\nRelationships:\n- TextBox -> EventCtx\n- TextBox -> GeomBatch\n- TextBox -> GfxCtx\n- TextBox -> Key\n- TextBox -> Line\n- TextBox -> Outcome\n- TextBox -> ScreenDims\n- TextBox -> ScreenPt\n- TextBox -> ScreenRectangle\n- TextBox -> Style\n- TextBox -> Text\n- TextBox -> Widget\n- TextBox -> WidgetImpl\n- TextBox -> WidgetOutput\n\nFunctionalities:\n- Text input handling\n- Cursor management\n- Focus management\n- Rendering of the text box\n- Event processing\n\n# widgetry/src/widgets/just_draw.rs [1190 tokens]:\n\nDescription:\nThis file defines widget classes for drawing shapes and tooltips in a graphical user interface.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'JustDraw', 'description': 'A widget that simply draws a geometric shape without any interaction.'}\n- {'name': 'DrawWithTooltips', 'description': 'A widget that draws shapes with tooltips that appear on hover and can trigger actions on click.'}\n- {'name': 'DeferDraw', 'description': 'A widget that defers drawing until later, holding a geometric batch for rendering.'}\n\nRelationships:\n- JustDraw -> crate\n- DrawWithTooltips -> crate\n- DeferDraw -> crate\n- DrawWithTooltips <> JustDraw\n\nFunctionalities:\n- Drawing geometric shapes\n- Displaying tooltips on hover\n- Handling click events\n- Deferring drawing operations\n\n# widgetry/src/widgets/tabs.rs [967 tokens]:\n\nDescription:\nThis file implements a tabbed interface with a controller to manage multiple tabs and their content.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate::widgets\n- crate::ButtonBuilder\n- crate::EventCtx\n- crate::Panel\n- crate::Widget\n\nClasses:\n- {'name': 'Tab', 'description': 'Represents a single tab with an ID, a button for the tab bar, and associated content.'}\n- {'name': 'TabController', 'description': 'Manages multiple tabs, their active state, and the rendering of the tab bar and content.'}\n\nRelationships:\n- TabController -> Tab\n- TabController -> ButtonBuilder\n- TabController -> EventCtx\n- TabController -> Panel\n- TabController -> Widget\n- Tab <- TabController\n\nFunctionalities:\n- Manage tab states and transitions\n- Render tab bar and active content\n- Handle user interactions with tabs\n- Add new tabs to the controller\n\n# widgetry/src/widgets/toggle.rs [2169 tokens]:\n\nDescription:\nThis file defines a Toggle widget that can represent a boolean state with customizable buttons and icons.\n\nInternal Imports:\n- crate::svg\n- crate\n- Button\n- Color\n- ControlState\n- EventCtx\n- GfxCtx\n- MultiKey\n- Outcome\n- RewriteColor\n- ScreenDims\n- ScreenPt\n- Text\n- TextSpan\n- Widget\n- WidgetImpl\n- WidgetOutput\n\nClasses:\n- {'name': 'Toggle', 'description': 'Represents a toggle switch widget that can be enabled or disabled.'}\n\nRelationships:\n- Toggle -> Button\n- Toggle -> Color\n- Toggle -> ControlState\n- Toggle -> EventCtx\n- Toggle -> GfxCtx\n- Toggle -> MultiKey\n- Toggle -> Outcome\n- Toggle -> RewriteColor\n- Toggle -> ScreenDims\n- Toggle -> ScreenPt\n- Toggle -> Text\n- Toggle -> TextSpan\n- Toggle -> Widget\n- Toggle -> WidgetImpl\n- Toggle -> WidgetOutput\n\nFunctionalities:\n- Create toggle widgets with different styles and states\n- Handle events for toggling state\n- Draw the toggle widget on the screen\n- Manage button states and visual representations\n\n# widgetry/src/widgets/image.rs [2932 tokens]:\n\nDescription:\nThis file defines a stylable UI component for rendering vector graphics from various image sources.\n\nExternal Imports:\n- std\n\nInternal Imports:\n- crate\n- geom\n\nClasses:\n- {'name': 'Image', 'description': 'A builder for creating stylable image components.'}\n- {'name': 'ImageSource', 'description': 'Defines various sources for images including file paths, byte arrays, and pre-rendered graphics.'}\n\nRelationships:\n- Image -> ImageSource\n- ImageSource -> svg\n- Image -> EventCtx\n- Image -> GeomBatch\n\nFunctionalities:\n- Creating images from different sources\n- Styling images with various attributes\n- Loading and processing SVG images\n- Rendering images with optional tooltips\n- Merging image styles\n\n# widgetry/src/widgets/mod.rs [6698 tokens]:\n\nDescription:\nThis file defines a widget system for a graphical user interface, including various widget types and layout management.\n\nExternal Imports:\n- std\n- taffy\n- abstutil\n- geom\n\nInternal Imports:\n- containers\n- panel\n- autocomplete\n- button\n- compare_times\n- drag_drop\n- dropdown\n- fan_chart\n- filler\n- image\n- just_draw\n- line_plot\n- persistent_split\n- plots\n- scatter_plot\n- slider\n- spinner\n- stash\n- table\n- tabs\n- text_box\n- toggle\n\nClasses:\n- {'name': 'WidgetImpl', 'description': 'A trait for implementing custom widgets.'}\n- {'name': 'Outcome', 'description': 'An enum representing the result of an event handled by a panel.'}\n- {'name': 'ClickOutcome', 'description': 'An enum representing the data returned from button-like widgets.'}\n- {'name': 'WidgetOutput', 'description': \"A struct representing the output of a widget's event handling.\"}\n- {'name': 'Widget', 'description': 'A struct representing a UI widget with layout and rendering capabilities.'}\n- {'name': 'EdgeInsets', 'description': 'A struct representing padding and margin values for widgets.'}\n\nRelationships:\n- > WidgetImpl\n- < Widget\n- < Outcome\n- < ClickOutcome\n- < WidgetOutput\n- < EdgeInsets\n- Widget -> Container\n- Widget -> Dropdown\n- Widget -> Button\n- Widget -> Toggle\n- Widget -> Panel\n- Widget -> JustDraw\n- Widget -> Nothing\n- Widget -> GeomBatch\n- Widget -> Taffy\n- Widget -> Style\n\nFunctionalities:\n- Widget creation and management\n- Event handling for widgets\n- Layout management for widgets\n- Rendering of graphical elements\n- State restoration for widgets\n\n# widgetry/src/widgets/compare_times.rs [1642 tokens]:\n\nDescription:\nThis file defines a widget for comparing two durations visually on a graph.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'CompareTimes', 'description': 'A widget that visually compares two durations using a scatter plot.'}\n\nRelationships:\n- CompareTimes -> Drawable\n- CompareTimes -> EventCtx\n- CompareTimes -> GeomBatch\n- CompareTimes -> GfxCtx\n- CompareTimes -> Line\n- CompareTimes -> ScreenDims\n- CompareTimes -> ScreenPt\n- CompareTimes -> ScreenRectangle\n- CompareTimes -> Text\n- CompareTimes -> TextExt\n- CompareTimes -> Widget\n- CompareTimes -> WidgetImpl\n- CompareTimes -> WidgetOutput\n\nFunctionalities:\n- Drawing a scatter plot for duration comparison\n- Handling mouse events for tooltips\n- Generating axis labels and grid lines\n- Uploading graphical data for rendering\n- Calculating maximum duration for scaling\n\n# widgetry/src/widgets/table.rs [2139 tokens]:\n\nDescription:\nThis file defines a generic table widget for rendering and managing data in a tabular format with sorting and filtering capabilities.\n\nExternal Imports:\n- abstutil\n- geom\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'Table', 'description': 'A generic table structure that holds data and manages rendering, sorting, and filtering.'}\n- {'name': 'Col', 'description': 'An enumeration representing the type of column, either static or sortable.'}\n- {'name': 'Column', 'description': 'A structure representing a single column in the table with rendering logic.'}\n- {'name': 'Filter', 'description': 'A structure that defines filtering logic and state for the table.'}\n\nRelationships:\n- Table -> Filter\n- Table -> Column\n- Column -> Col\n- Filter -> Widget\n- Table <- Widget\n\nFunctionalities:\n- Rendering a table with headers and rows\n- Sorting data based on selected columns\n- Filtering data according to specified criteria\n- Pagination of displayed data\n\n# widgetry/src/widgets/dropdown.rs [1604 tokens]:\n\nDescription:\nThis file implements a dropdown widget for a graphical user interface.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- Button\n- Choice\n- Color\n- ControlState\n- CornerRounding\n- EdgeInsets\n- EventCtx\n- GeomBatch\n- GfxCtx\n- Menu\n- Outcome\n- ScreenDims\n- ScreenPt\n- ScreenRectangle\n- WidgetImpl\n- WidgetOutput\n\nClasses:\n- {'name': 'Dropdown', 'description': 'Represents a dropdown widget that allows users to select from a list of choices.'}\n\nRelationships:\n- Dropdown -> Button\n- Dropdown -> Choice\n- Dropdown -> Menu\n- Dropdown -> EventCtx\n- Dropdown -> GfxCtx\n- Dropdown -> WidgetImpl\n\nFunctionalities:\n- Create a dropdown widget\n- Manage selection of choices\n- Open and close a menu for choices\n- Handle user events for interaction\n- Draw the dropdown and its menu\n\n# widgetry/src/widgets/spinner.rs [2404 tokens]:\n\nDescription:\nThis file implements a customizable spinner widget for selecting numeric values with increment and decrement buttons.\n\nExternal Imports:\n- std\n\nInternal Imports:\n- geom\n- crate\n\nClasses:\n- {'name': 'Spinner', 'description': 'A widget that allows users to increment or decrement a value within specified bounds.'}\n- {'name': 'RoundedF64', 'description': 'A wrapper around f64 that rounds values to four decimal places.'}\n\nRelationships:\n- Spinner -> Button\n- Spinner -> Drawable\n- Spinner -> OutlineStyle\n- Spinner -> GeomBatch\n- Spinner -> Text\n- Spinner -> EventCtx\n- Spinner -> Style\n- Spinner -> Widget\n- RoundedF64 -> std::ops::Add\n- RoundedF64 -> std::ops::Sub\n\nFunctionalities:\n- Create a spinner widget with increment and decrement buttons.\n- Render the current value of the spinner as text.\n- Handle user input for modifying the spinner value.\n- Clamp the spinner value within specified bounds.\n\n# widgetry/src/widgets/panel.rs [5870 tokens]:\n\nDescription:\nThis file defines a Panel widget that supports layout, scrolling, and various interactive elements in a GUI context.\n\nExternal Imports:\n- std\n- taffy\n- geom\n\nInternal Imports:\n- crate::widgets::slider\n- crate::widgets::spinner\n- crate::widgets::Container\n- crate::Autocomplete\n- crate::Button\n- crate::Dropdown\n- crate::EventCtx\n- crate::GfxCtx\n- crate::Menu\n- crate::Outcome\n- crate::PersistentSplit\n- crate::ScreenDims\n- crate::ScreenPt\n- crate::ScreenRectangle\n- crate::Slider\n- crate::Spinner\n- crate::Stash\n- crate::TextBox\n- crate::Toggle\n- crate::Widget\n- crate::WidgetImpl\n- crate::WidgetOutput\n\nClasses:\n- {'name': 'Panel', 'description': 'Represents a resizable and scrollable panel that contains various widgets.'}\n- {'name': 'PanelBuilder', 'description': 'Facilitates the construction of a Panel with specific configurations.'}\n- {'name': 'PanelDims', 'description': 'Defines the dimensions of the panel in terms of percentage or pixels.'}\n\nRelationships:\n- Panel -> Widget\n- PanelBuilder -> Panel\n- PanelBuilder -> EventCtx\n- Panel -> Slider\n- Panel -> Container\n- Panel -> Dropdown\n- Panel -> Spinner\n- Panel -> TextBox\n- Panel -> Toggle\n- Panel -> Button\n- Panel -> PersistentSplit\n- Panel -> Autocomplete\n- Panel -> Stash\n- Panel -> GfxCtx\n- Panel -> Menu\n- Panel -> Outcome\n- Panel -> ScreenDims\n- Panel -> ScreenPt\n- Panel -> ScreenRectangle\n- Panel -> WidgetOutput\n- Panel <- PanelBuilder\n\nFunctionalities:\n- Panel creation and configuration\n- Dynamic layout management\n- Scrolling support\n- Widget interaction handling\n- Event processing\n- Rendering and drawing of widgets\n- State management for interactive elements\n\n# widgetry/src/widgets/line_plot.rs [2441 tokens]:\n\nDescription:\nThis file defines a LinePlot widget for visualizing data series in a 2D line plot format.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate::widgets::plots\n- crate\n\nClasses:\n- {'name': 'LinePlot', 'description': 'Represents a 2D line plot widget that visualizes data series with axes and grid lines.'}\n- {'name': 'Hovering', 'description': 'Handles the display of tooltip information and cursor drawing for hovering over plot points.'}\n\nRelationships:\n- LinePlot -> Drawable\n- LinePlot -> FindClosest\n- LinePlot -> ScreenPt\n- LinePlot -> ScreenDims\n- LinePlot -> UnitFmt\n- LinePlot -> Series\n- LinePlot -> PlotOptions\n- Hovering -> Text\n- Hovering -> Drawable\n\nFunctionalities:\n- Creating a new line plot widget\n- Rendering grid lines and axes\n- Handling mouse events for hovering\n- Displaying tooltips for data points\n- Drawing the plot and its components\n\n# widgetry/src/widgets/autocomplete.rs [1012 tokens]:\n\nDescription:\nThis file implements an autocomplete widget that allows users to select from a list of choices based on their input.\n\nExternal Imports:\n- abstutil\n\nInternal Imports:\n- Choice\n- EventCtx\n- GfxCtx\n- Menu\n- Outcome\n- ScreenDims\n- ScreenPt\n- TextBox\n- Widget\n- WidgetImpl\n- WidgetOutput\n\nClasses:\n- {'name': 'Autocomplete', 'description': 'A widget that provides autocomplete functionality for user input based on a list of choices.'}\n\nRelationships:\n- Autocomplete -> TextBox\n- Autocomplete -> Menu\n- Autocomplete -> Choice\n- Autocomplete -> Widget\n- Autocomplete -> WidgetImpl\n\nFunctionalities:\n- Provides an interactive text input for autocomplete suggestions\n- Groups and filters choices based on user input\n- Displays a menu of matching choices\n- Handles user events and updates selected values\n\n# widgetry/src/widgets/persistent_split.rs [987 tokens]:\n\nDescription:\nThis file defines a PersistentSplit widget that combines a button and a dropdown for selecting options in a user interface.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- Button\n- ButtonBuilder\n- Choice\n- Color\n- ControlState\n- Dropdown\n- EventCtx\n- GeomBatch\n- GfxCtx\n- JustDraw\n- MultiKey\n- Outcome\n- ScreenDims\n- ScreenPt\n- Widget\n- WidgetImpl\n- WidgetOutput\n\nClasses:\n- {'name': 'PersistentSplit', 'description': 'A widget that allows users to select an option from a dropdown while displaying the current selection on a button.'}\n\nRelationships:\n- PersistentSplit -> Button\n- PersistentSplit -> Dropdown\n- PersistentSplit -> JustDraw\n- PersistentSplit -> EventCtx\n- PersistentSplit -> GfxCtx\n- PersistentSplit -> ScreenDims\n- PersistentSplit -> ScreenPt\n- PersistentSplit -> Widget\n- PersistentSplit -> WidgetImpl\n\nFunctionalities:\n- Creating a persistent split widget\n- Handling user events for selection changes\n- Drawing the widget components\n- Managing layout and positioning of components\n\n# widgetry/src/widgets/fan_chart.rs [1909 tokens]:\n\nDescription:\nThis file implements a FanChart widget for visualizing time series data with statistical bands.\n\nExternal Imports:\n- std\n- geom\n\nInternal Imports:\n- widgets::plots\n\nClasses:\n- {'name': 'FanChart', 'description': 'Represents a widget that displays a fan chart with statistical bands for time series data.'}\n\nRelationships:\n- FanChart -> Axis\n- FanChart -> PlotOptions\n- FanChart -> Series\n- FanChart -> Text\n- FanChart -> Drawable\n- FanChart -> GeomBatch\n- FanChart -> EventCtx\n\nFunctionalities:\n- Rendering a fan chart\n- Calculating statistical values (P50, P90, P99)\n- Creating a legend for the chart\n- Transforming data points for visualization\n- Drawing grid lines for axes\n\n# widgetry/src/widgets/slider.rs [2255 tokens]:\n\nDescription:\nThis file implements a Slider widget for graphical user interfaces, allowing users to select a value within a specified range.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'Slider', 'description': 'Represents a slider widget that can be horizontal, vertical, or an area slider.'}\n- {'name': 'Style', 'description': 'Defines the visual style and dimensions of the Slider.'}\n\nRelationships:\n- Slider -> Style\n- Slider <- crate\n- Style -> EdgeInsets\n- Style -> ScreenDims\n- Slider -> Drawable\n- Slider -> GeomBatch\n- Slider -> EventCtx\n- Slider -> GfxCtx\n- Slider -> ScreenPt\n- Slider -> ScreenRectangle\n\nFunctionalities:\n- Rendering of the slider\n- Handling mouse events for dragging\n- Calculating the current percentage value\n- Setting the slider position\n- Updating the visual representation based on state changes\n\n# widgetry/src/widgets/menu.rs [1510 tokens]:\n\nDescription:\nThis file implements a menu widget that allows users to select from a list of choices with keyboard and mouse interactions.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- Choice\n- EventCtx\n- GfxCtx\n- Key\n- Line\n- Outcome\n- ScreenDims\n- ScreenPt\n- ScreenRectangle\n- Style\n- Text\n- Widget\n- WidgetImpl\n- WidgetOutput\n\nClasses:\n- {'name': 'Menu', 'description': 'A generic menu class that manages a list of choices and handles user interactions.'}\n\nRelationships:\n- Menu -> EventCtx\n- Menu -> GfxCtx\n- Menu -> Style\n- Menu -> Text\n- Menu -> Widget\n- Menu -> WidgetImpl\n- Menu -> Choice\n\nFunctionalities:\n- Display a list of choices\n- Handle mouse and keyboard events\n- Highlight the current choice\n- Return the selected choice\n- Render the menu visually\n\n# widgetry/src/widgets/filler.rs [387 tokens]:\n\nDescription:\nThis file defines a Filler widget that can adjust its size based on specified rules for use in a graphical user interface.\n\nInternal Imports:\n- EventCtx\n- GfxCtx\n- ScreenDims\n- ScreenPt\n- Widget\n- WidgetImpl\n- WidgetOutput\n\nClasses:\n- {'name': 'Filler', 'description': 'A widget that acts as a filler with adjustable size based on specified resize rules.'}\n- {'name': 'ResizeRule', 'description': 'An enum that defines the rules for resizing the Filler widget.'}\n\nRelationships:\n- Filler -> EventCtx\n- Filler -> GfxCtx\n- Filler -> ScreenDims\n- Filler -> ScreenPt\n- Filler -> Widget\n- Filler -> WidgetImpl\n- Filler -> WidgetOutput\n- ResizeRule -> ScreenDims\n\nFunctionalities:\n- Creates a filler widget with adjustable dimensions\n- Handles window resize events\n- Calculates dimensions based on resizing rules\n- Draws the widget on the screen\n\n# widgetry/src/widgets/scatter_plot.rs [1663 tokens]:\n\nDescription:\nThis file implements a scatter plot widget for visualizing time-series data.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- widgets::plots\n\nClasses:\n- {'name': 'ScatterPlot', 'description': 'Represents a scatter plot widget that displays data points over time.'}\n\nRelationships:\n- ScatterPlot -> Axis\n- ScatterPlot -> PlotOptions\n- ScatterPlot -> Series\n- widgets::plots -> ScatterPlot\n\nFunctionalities:\n- Create a new scatter plot widget\n- Render data points on the plot\n- Generate axes and labels for the plot\n- Calculate and display average values\n\n# widgetry/src/widgets/button.rs [6186 tokens]:\n\nDescription:\nThis file defines a Button widget with customizable styles and behaviors for a graphical user interface.\n\nExternal Imports:\n- geom\n\nInternal Imports:\n- crate::style\n- crate::text\n- crate::ButtonStyle\n- crate::Color\n- crate::ContentMode\n- crate::ControlState\n- crate::CornerRounding\n- crate::Drawable\n- crate::EdgeInsets\n- crate::EventCtx\n- crate::GeomBatch\n- crate::GfxCtx\n- crate::Image\n- crate::Line\n- crate::MultiKey\n- crate::Outcome\n- crate::OutlineStyle\n- crate::RewriteColor\n- crate::ScreenDims\n- crate::ScreenPt\n- crate::Text\n- crate::Widget\n- crate::WidgetImpl\n- crate::WidgetOutput\n- crate::geom::geom_batch_stack\n\nClasses:\n- {'name': 'Button', 'description': 'Represents a clickable button with various states and styles.'}\n- {'name': 'ButtonBuilder', 'description': 'Facilitates the construction of a Button with customizable properties.'}\n- {'name': 'ButtonStateStyle', 'description': 'Holds style properties for different states of a Button.'}\n- {'name': 'Label', 'description': 'Defines the properties of a label associated with a Button.'}\n\nRelationships:\n- Button -> Drawable\n- ButtonBuilder -> Button\n- ButtonBuilder -> ButtonStateStyle\n- ButtonStateStyle -> Label\n- ButtonBuilder -> ControlState\n- Button -> ControlState\n- ButtonBuilder -> GeomBatch\n- ButtonBuilder -> EdgeInsets\n- ButtonBuilder -> Image\n- ButtonBuilder -> OutlineStyle\n- ButtonBuilder -> RewriteColor\n- ButtonBuilder -> Color\n- ButtonBuilder -> Font\n- ButtonBuilder -> Text\n- ButtonBuilder -> MultiKey\n- ButtonBuilder -> ContentMode\n- ButtonBuilder -> CornerRounding\n- ButtonBuilder -> Outcome\n- ButtonBuilder -> GfxCtx\n- ButtonBuilder -> EventCtx\n- ButtonBuilder -> ScreenDims\n- ButtonBuilder -> ScreenPt\n- ButtonBuilder -> GeomBatchStack\n\nFunctionalities:\n- Button creation and customization\n- Event handling for button clicks\n- Rendering button visuals based on state\n- Tooltip management for buttons\n- Styling buttons with images and labels\n\n# widgetry/src/widgets/plots.rs [1627 tokens]:\n\nDescription:\nThis file defines plotting options and functionalities for creating and managing plots with customizable axes and series data.\n\nExternal Imports:\n- std\n- abstutil\n- geom\n- lyon\n\nInternal Imports:\n- crate\n\nClasses:\n- {'name': 'PlotOptions', 'description': 'Holds configuration options for plotting, including filtering and dimensions.'}\n- {'name': 'Series', 'description': 'Represents a data series in a plot with a label, color, and points.'}\n- {'name': 'Axis', 'description': 'A trait defining methods for handling axis-related operations.'}\n\nRelationships:\n- PlotOptions -> crate\n- Series -> crate\n- Axis -> crate\n\nFunctionalities:\n- Define plot options\n- Manage series data\n- Create legends for plots\n- Generate thick line series for visualization\n\n# widgetry/src/svg.rs [1610 tokens]:\n\nDescription:\nThis file provides functionality to load and process SVG files into a geometric batch for rendering.\n\nExternal Imports:\n- lyon\n- usvg\n- abstutil\n- geom\n\nInternal Imports:\n- Color\n- Fill\n- GeomBatch\n- LinearGradient\n- Prerender\n\nClasses:\n- {'name': 'GeomBatch', 'description': 'Manages a collection of geometric shapes for rendering.'}\n- {'name': 'Fill', 'description': 'Represents a fill style for shapes.'}\n- {'name': 'Color', 'description': 'Represents a color with RGBA values.'}\n- {'name': 'LinearGradient', 'description': 'Represents a linear gradient fill.'}\n- {'name': 'Prerender', 'description': 'Handles pre-rendering tasks and asset management.'}\n\nRelationships:\n- GeomBatch -> Fill\n- GeomBatch -> Color\n- GeomBatch -> LinearGradient\n- Prerender -> GeomBatch\n- Prerender -> Fill\n- Prerender -> Color\n- Prerender -> LinearGradient\n\nFunctionalities:\n- Loading SVG files\n- Caching SVG data\n- Tessellating paths\n- Converting SVG paths to geometric representations\n- Handling fills and strokes in SVG\n\n# piggyback/index.html [1482 tokens]:\n\nDescription:\nThis file sets up a Mapbox map with a custom traffic simulation feature using WebAssembly.\n\nExternal Imports:\n- mapbox-gl\n\nInternal Imports:\n- piggyback\n\nClasses:\n- {'name': 'PiggybackDemo', 'description': 'Handles the traffic simulation and rendering on the map.'}\n\nRelationships:\n- PiggybackDemo -> piggyback\n\nFunctionalities:\n- Initialize the map\n- Load map data\n- Render custom layers\n- Handle user interactions\n- Manage traffic simulation\n\n# piggyback/src/piggyback.rs [2079 tokens]:\n\nDescription:\nThis file implements a WebAssembly-based demo for rendering a traffic simulation on a WebGL canvas.\n\nExternal Imports:\n- wasm_bindgen\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nInternal Imports:\n- abstutil\n- geom\n- map_gui\n- map_model\n- sim\n- widgetry\n\nClasses:\n- {'name': 'PiggybackDemo', 'description': 'Manages the rendering and simulation of a traffic scenario on a WebGL canvas.'}\n\nRelationships:\n- PiggybackDemo -> RenderOnly\n- PiggybackDemo -> Map\n- PiggybackDemo -> Sim\n- PiggybackDemo -> DrawMap\n- PiggybackDemo -> AgentCache\n- PiggybackDemo -> ColorScheme\n- PiggybackDemo -> Options\n- RenderOnly <- PiggybackDemo\n- Map <- PiggybackDemo\n- Sim <- PiggybackDemo\n- DrawMap <- PiggybackDemo\n- AgentCache <- PiggybackDemo\n- ColorScheme <- PiggybackDemo\n- Options <- PiggybackDemo\n\nFunctionalities:\n- Initialize rendering with a map\n- Manage camera movements\n- Advance traffic simulation\n- Spawn random traffic\n- Reset traffic simulation\n- Draw zoomed-in view\n- Draw unzoomed agents\n- Provide debug information for objects at specific coordinates"}, {"role": "user", "content": "\nGenerate a comprehensive UI documentation section.\n\nStart with the title '## User Interface'.\n\nInclude subsections using '### [Subsection Name]' format. Examples of subsections may include (but are not limited to):\n- Component Hierarchy\n- State Management\n- Styling Approach\n- Responsive Design\n- Accessibility Features\n- User Interaction Flows\n\nProvide detailed explanations and examples for each aspect of the UI.\n\nIMPORTANT: The output should be directly suitable for a markdown file without any additional explanations or markdown code block tags.\n"}]}