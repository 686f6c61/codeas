{"content": "## Setup and Development\n\n### Prerequisites\n\nBefore you begin setting up the project, ensure you have the following prerequisites installed on your system:\n\n- **Rust**: The project is developed using Rust, so you need to have Rust installed. You can install it using [rustup](https://rustup.rs/).\n- **Cargo**: Cargo is the Rust package manager and build system. It is included with Rust installations.\n- **Node.js and npm**: Required for building the web components. You can download them from [nodejs.org](https://nodejs.org/).\n- **wasm-pack**: This tool is used for building Rust-generated WebAssembly. Install it by running `cargo install wasm-pack`.\n- **Python 3**: Required for running some scripts. Ensure you have Python 3 installed.\n- **AWS CLI**: Required for uploading and downloading data from AWS S3. Follow the [AWS CLI installation guide](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html).\n\n### Environment Setup\n\n1. **Clone the Repository**: Start by cloning the repository to your local machine.\n   ```\n   git clone https://github.com/a-b-street/abstreet.git\n   cd abstreet\n   ```\n\n2. **Set Up Rust Environment**: Ensure your Rust toolchain is up to date.\n   ```\n   rustup update\n   ```\n\n3. **Install Node.js Packages**: Navigate to the `web` directory and install the necessary Node.js packages.\n   ```\n   cd web\n   npm install\n   ```\n\n4. **Configure AWS CLI**: If you plan to upload or download data from AWS S3, configure your AWS CLI with your credentials.\n   ```\n   aws configure\n   ```\n\n### Dependencies\n\nThe project uses several dependencies managed by Cargo. The main dependencies are listed in the `Cargo.toml` files located in each crate directory. Some common dependencies include:\n\n- **anyhow**: For error handling.\n- **serde**: For serialization and deserialization.\n- **log**: For logging.\n- **tokio**: For asynchronous programming.\n- **wasm-bindgen**: For interacting with WebAssembly.\n\nTo install all dependencies, simply run:\n```\ncargo build\n```\n\n### Build Process\n\n1. **Build the Project**: You can build the entire project using Cargo.\n   ```\n   cargo build --release\n   ```\n\n2. **Build Web Components**: To build the web components, use the Makefile in the `web` directory.\n   ```\n   make release\n   ```\n\n3. **Build for WebAssembly**: Use `wasm-pack` to build Rust code for WebAssembly.\n   ```\n   wasm-pack build --release --target web\n   ```\n\n### Configuration Files\n\n- **Cargo.toml**: Each crate has a `Cargo.toml` file that specifies its dependencies and metadata.\n- **web/package.json**: Contains metadata and dependencies for the web components.\n- **web/Makefile**: Used to automate the build process for web components.\n- **aws/config**: AWS CLI configuration file for managing AWS credentials and settings.\n\n### Code Style and Standards\n\n- **Rustfmt**: Use `rustfmt` to format Rust code according to standard style guidelines. Run it with:\n  ```\n  cargo fmt\n  ```\n\n- **Clippy**: Use `clippy` for linting Rust code to catch common mistakes and improve code quality. Run it with:\n  ```\n  cargo clippy\n  ```\n\n- **Prettier**: Use `prettier` for formatting JavaScript and TypeScript code. Run it with:\n  ```\n  npm run fmt\n  ```\n\nFollowing these guidelines and steps will help you set up and develop the project efficiently. Make sure to regularly update your dependencies and tools to keep up with the latest improvements and fixes.", "cost": {"input_cost": 0.28658, "output_cost": 0.011985, "total_cost": 0.298565}, "tokens": {"input_tokens": 57316, "output_tokens": 799, "total_tokens": 58115}}